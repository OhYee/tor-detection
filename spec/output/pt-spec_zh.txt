

             可插拔传输规范(版本1)

摘要

   可插接传输(PTs)是一种快速开发和部署绕过审查的通用机制，基于模块化子流程的思想，通过转换流量来击败审查。

   此文档指定了需要使用的子进程启动、关闭和进程间通信机制
   分。

表的内容

   1. 介绍
      1.1。要求符号
   2. 体系结构概述
   3.规范
      3.1。可插入运输命名
      3.2。可插入的传输配置环境变量
           3.2.1之上。常见的环境变量
           3.2.2。可插入的传输客户端环境变量
           3.2.3。可插拔的传输服务器环境变量
      3.3。可插入的传输到父进程通信
           3.3.1。常见的消息
           3.3.2。可插入的传输客户端消息
           3.3.3。可插入的传输服务器消息
      3.4。可插入运输关闭
      3.5。可插拔的传输客户端每个连接参数
   4. 匿名的考虑
   5引用
   6. 致谢
   附录A.示例客户端可插拔传输会话
   附录B.服务器可插拔传输会话示例

1. 介绍

   该规范描述了一种从应用程序的客户端/服务器代码中分离协议级混淆的方法，这种方法可以促进混淆/规避工具的快速开发，并促进Tor项目在该领域工作范围之外的重用。

   这是通过利用辅助子流程完成的，它实现了必要的前向/反向代理服务器，处理审查规避，有一个良好定义和标准化的配置和管理界面。

   实现本文档中指定的接口的任何应用程序代码都可以使用所有符合规范的Pluggable
   传输。

1.1。要求符号

   “必须”、“不得”、“必须”、“应当”、“应当”等关键词
   本文档中的“NOT”、“SHOULD”、“SHOULD NOT”、“recommendation”、“MAY”和“OPTIONAL”将按照[RFC2119]中描述的解释进行解释。

2. 体系结构概述
 +------------+                    +---------------------------+ | 客户端应用程序+——本地回环+ PT客户机(袜子代理 )   +--+ +------------+                    +---------------------------+  | |
                 公共网络(混淆/改变了交通 ) ==> | | +------------+                    +---------------------------+  | | 服务器应用+——本地回环+ PT服务器(反向代理 ) +--+ +------------+                    +---------------------------+

   在客户机的主机上，PT客户机软件向客户机应用程序公开一个SOCKS代理[RFC1928]，并在将流量转发到服务器的主机之前对其进行模糊处理或转换。

   在服务器的主机上，PT服务器软件公开了一个反向代理，它接受来自PT客户端的连接，并在转发到实际的服务器软件之前，处理应用于流量的混淆/转换的反转。存在一个可选的轻量级协议来促进通信连接元数据，否则就会丢失，比如源IP地址和端口[勒索端口]。

   所有PT实例都由各自的父流程通过一组标准化的环境变量(3.2)配置，这些环境变量在启动时设置，并通过将标准化格式的输出写入stdout(3.3)向父流程报告状态信息。

   每次对PT的调用都必须是客户机或服务器。

   所有的PT客户端转发代理都必须支持SOCKS 4或SOCKS 5，并且应该更喜欢SOCKS 5而不是SOCKS 4。

3.规范

   可插入传输代理在其整个生命周期中遵循以下工作流。

     1)父进程设置所需的环境值(3.2)并作为子进程启动PT代理(fork()/exec())。

     2) PT代理确定父版本“TOR_PT_MANAGED_TRANSPORT_VER”(3.2.1)支持的PT规范的版本

        如果没有兼容的版本，PT代理会向标准输出写入“版本错误”消息(3.3.1)并终止。

        2.2)如果有兼容的版本，PT代理会向标准输出写一个“版本”消息(3.3.1)。

     3) PT代理解析其余的环境值。

        3.1)如果环境值格式不正确或无效，PT代理会向stdout写入“ENV-ERROR”消息(3.3.1)并终止。

        3.2)通过检查“tor_pt_client_transport”和“tor_pt_server_transport”环境变量，可以确定它是客户端转发代理还是服务器端反向代理。

     如果有一个通过“TOR_PT_PROXY”(3.2.2)指定的上游代理，PT代理将验证提供的URI。

        4.1)如果上游代理不可用，PT代理会向stdout发送“代理错误”消息(3.3.2)并终止。

        4.2)如果有一个受支持且格式良好的上游代理，PT代理会向stdout发送一条“代理完成”的消息(3.3.2)。

     5) PT代理初始化传输并通过stdout报告状态(3.3.2,3.3.3)

     PT代理根据需要转发和转换流量。

     7)当父进程(3.4)发出终止信号时，PT代理会优雅地关闭。

3.1。可插入运输命名

   可插拔传输名称作为惟一标识符
   PT必须有一个唯一的名称。

   PT名称必须是有效的C标识符。PT名称必须以字母或下划线开头，其余字符必须为
   ASCII字母、数字或下划线。没有长度限制。

   PT名称必须满足正则表达式“[a-zA-Z_][a-zA-Z0-9_]*”。

3.2。可插入的传输配置环境变量

   所有可插拔传输代理实例都由父进程在启动时通过一组定义良好的环境变量配置。

   “TOR_PT_”前缀用于命名空间的原因，除了本规范的起源之外，它并不表示与Tor的任何关系。

3.2.1之上。常见的环境变量

   在启动客户机或服务器可插拔传输代理时，必须设置以下公共环境变量。
 “TOR_PT_MANAGED_TRANSPORT_VER”

       指定父进程支持的可插拔传输规范的版本，用逗号分隔。所有PTs必须接受任何格式良好的列表，只要有兼容版本。

       有效的版本必须完全由非空格、非逗号的可打印ASCII字符组成。

       截至本文档的可插拔传输规范版本为“1”。

       例子:

         TOR_PT_MANAGED_TRANSPORT_VER = 1, 1、2 b this_is_a_valid_ver
 “TOR_PT_STATE_LOCATION”

       指定一个目录的绝对路径，允许PT在其中存储将在调用之间持久保存的状态。当PT启动时，目录不需要存在，但是PT实现应该能够根据需要创建它。

       PTs必须只在提供的路径中存储文件，并且不得在系统的其他地方创建或修改文件。

       例子:

         TOR_PT_STATE_LOCATION = / var / lib / tor / pt_state /
 “TOR_PT_EXIT_ON_STDIN_CLOSE”

       指定父进程将关闭PT代理的标准输入(stdin)流，以指示PT代理应该优雅地退出。

       除非这个环境变量被设置为“1”，否则PTs不能将一个关闭的stdin作为终止信号。

       如果这个环境变量被设置为“1”，PTs应该将stdin关闭当作一个优雅地终止的信号。

       例子:

         TOR_PT_EXIT_ON_STDIN_CLOSE = 1
 “TOR_PT_OUTBOUND_BIND_ADDRESS_V4”

       指定一个IPv4 IP地址，PT代理应该使用它作为传出IPv4 IP包的源地址。这个特性允许拥有多个网络接口的用户明确地指定他们希望PT代理使用的接口。

       如果该值未设置或为空，PT代理必须使用默认的源地址用于传出连接。

       对于环回地址(127.0.0.0/8)的连接，必须忽略此设置。

       例子:

         TOR_PT_OUTBOUND_BIND_ADDRESS_V4 = 203.0.113.4
 “TOR_PT_OUTBOUND_BIND_ADDRESS_V6”

       指定一个IPv6 IP地址，PT代理应该使用作为传出IPv6 IP数据包的源地址。这个特性允许拥有多个网络接口的用户明确地指定他们希望PT代理使用的接口。

       如果该值未设置或为空，PT代理必须使用默认的源地址用于传出连接。

       对于到环回地址([::1])的连接，必须忽略此设置。

       IPv6地址必须始终用方括号括起来。

       例如::

         TOR_PT_OUTBOUND_BIND_ADDRESS_V6 = (2001: db8:: 4)

3.2.2。可插入的传输客户端环境变量

   客户端可插入传输转发代理通过以下环境变量配置。
 “TOR_PT_CLIENT_TRANSPORTS”

       指定客户端代理应该初始化的PT协议，作为逗号分隔的PT名称列表。

       PTs应该忽略它不能识别的PT名称。

       父进程在启动客户端PT代理实例时必须设置这个环境变量。

       例子:

         TOR_PT_CLIENT_TRANSPORTS = obfs2 obfs3 obfs4
 “TOR_PT_PROXY”

       指定PT在进行外向网络连接时必须使用的上游代理。它是一个URI [RFC3986]的格式:
 < user_name > < proxy_type >: / /[[: <密码>][@]< ip >: <端口>。

       “TOR_PT_PROXY”环境变量是可选的
       如果不需要通过上游代理连接，则必须省略。

         例子:

           TOR_PT_PROXY = socks5: / / tor: test1234@198.51.100.1:8000
           TOR_PT_PROXY = socks4a: / / 198.51.100.2:8001
           TOR_PT_PROXY = http://198.51.100.3:443

3.2.3。可插拔的传输服务器环境变量

   服务器端可插入传输反向代理是通过以下环境变量配置的。
 “TOR_PT_SERVER_TRANSPORTS”

       指定服务器代理应该初始化的PT协议，作为逗号分隔的PT名称列表。

       PTs应该忽略它不能识别的PT名称。

       父进程在启动服务器端PT反向代理实例时必须设置此环境变量。

       例子:

         TOR_PT_SERVER_TRANSPORTS = obfs3 scramblesuit
 “TOR_PT_SERVER_TRANSPORT_OPTIONS”

       指定每个PT协议配置指令，作为一个分号分隔的<key>:<value>对的列表，其中<key>是一个PT名称，<value>是一个k=v字符串值，带有要传递给传输的选项。

       冒号、分号和反斜杠必须用反斜杠转义。

       如果没有参数需要传递给
       PT传输协议，"TOR_PT_SERVER_TRANSPORT_OPTIONS"
       可以省略。

       例子:

         TOR_PT_SERVER_TRANSPORT_OPTIONS = scramblesuit:关键=香蕉;自动机:规则= 110;自动机:深度= 3

         将传递给'scramblesuit'参数'key=banana'和'automata'参数'rule=110'和'depth=3'。
 “TOR_PT_SERVER_BINDADDR”

       一个逗号分隔的<key>-<value>对列表，其中<key>是一个PT名称，<value>是<地址>:<端口>，它应该在上面监听进入的客户端连接。

       保存传输名称的键的顺序必须与它们在“tor_pt_server_transport”中出现的顺序相同。

       只要端口转发是在外部完成的，<address>可以是本地作用域的地址。

       <address>:<port>组合必须是' bind() '支持的IP地址，并且不能是主机名。

       应用程序不能为每个PT名称设置多个<地址>:<端口>对。

       如果没有为任何传输配置的特定的<地址>:<端口>组合，“TOR_PT_SERVER_BINDADDR”可以省略。

       例子:

          TOR_PT_SERVER_BINDADDR = obfs3-198.51.100.1:1984 scramblesuit-127.0.0.1:4891
 “TOR_PT_ORPORT”

       指定PT反向代理在对其进行适当转换后应该将流量转发到的目的地，如<address>:<port>。

       通过“TOR_PT_ORPORT”连接到指定的目的地
       必须只包含应用程序负载。如果父进程需要客户端连接的实际源IP地址(或其他元数据)，它应该设置“TOR_PT_EXTENDED_SERVER_PORT”。

       例子:

         TOR_PT_ORPORT = 127.0.0.1:9001
 “TOR_PT_EXTENDED_SERVER_PORT”

       指定PT反向代理应该转发流量到的目的地，通过扩展ORPort协议[勒索端口]作为一个<地址>:<端口>。

       扩展的ORPort协议允许PT反向代理向父进程传输每个连接的元数据，如PT名称和客户端IP地址/端口。

       如果父进程不支持敲诈端口协议，它必须将“TOR_PT_EXTENDED_SERVER_PORT”设置为空字符串。

       例子:

         TOR_PT_EXTENDED_SERVER_PORT = 127.0.0.1:4200
 “TOR_PT_AUTH_COOKIE_FILE”

       指定扩展ORPort身份验证cookie的绝对文件系统路径，用于与
       扩展ORPort通过"TOR_PT_EXTENDED_SERVER_PORT"指定。

       如果父进程对传入的流量不使用勒索端口协议，那么“TOR_PT_AUTH_COOKIE_FILE”必须被省略。

       例子:

         TOR_PT_AUTH_COOKIE_FILE = / var / lib / tor / extended_orport_auth_cookie

3.3。可插入的传输到父进程通信

   所有可插拔传输代理都通过向stdout写入nl终止的行来与父进程通信。行metaformat为:
 < >:: = <关键词> < optarg > <问> <关键词>::= < KeywordChar > | <关键词> < KeywordChar > < KeywordChar >:: = <任何us - ascii字母数字,破折号,强调> < optarg >:: = <参数> * <参数>::= < SP > < ArgChar > | <参数> < ArgChar > < ArgChar >:: = <任何us - ascii字符但NUL或NL > < SP >:: = < us - ascii空格符号(32)> <问>::= < us - ascii换行符(换行)字符(10)>

   父进程必须忽略从PT代理接收到的带有未知关键字的行。

3.3.1。常见的消息

   当PT代理首次启动时，它必须确定使用可插拔传输规范的哪个版本来配置自己。

   它通过“TOR_PT_MANAGED_TRANSPORT_VER”(3.2.1)环境变量来实现这一点，该环境变量包含应用程序支持的所有版本。

   在决定使用或缺少版本时，PT代理用两个消息中的一个来响应。

     VERSION-ERROR < ErrorMessage >

       “版本错误”消息用于表明“TOR_PT_MANAGED_TRANSPORT_VER”列表中没有兼容的可插入传输规范版本。

       由于历史原因，应该将<ErrorMessage>设置为“no-version”，但可以将其设置为有用的错误消息。

       PT代理必须在输出“版本错误”消息后终止。

       例子:

         VERSION-ERROR没有版本

     版本< ProtocolVersion >

       “VERSION”消息用于向可插拔传输发送信号
       规范版本(如“TOR_PT_MANAGED_TRANSPORT_VER”)，PT代理将使用它来配置传输并与父进程通信。

       本文档指定的环境值和回复消息的版本为“1”。

       PT代理必须报告一个错误并终止，或者在转移到客户端/服务器代理初始化和配置之前输出一个“版本”消息。

       例子:

         版本1

   在完成版本协商之后，PT代理必须验证提供了所有必需的环境变量，并且提供的所有配置值都是格式良好的。

   在任何时候，如果遇到与通过环境变量提供的配置相关的错误，它都可能以错误消息响应并终止。

     ENV-ERROR < ErrorMessage >

       “ENV-ERROR”消息用来表示PT代理无法解析配置环境变量(3.2)。

       <ErrorMessage>应该包含一个有用的错误消息，可用于诊断和纠正失败的根本原因。

       PT代理必须在输出“ENV-ERROR”消息后终止。

       例子:

         当设置TOR_PT_EXTENDED_SERVER_PORT时，没有设置TOR_PT_AUTH_COOKIE_FILE

3.3.2。可插入的传输客户端消息

   在讨论了可插拔传输规范版本之后，
   PT客户端代理在初始化任何传输之前，必须首先验证“TOR_PT_PROXY”(3.2.2)是否已经设置。

   假设提供了一个上游代理，PT客户端代理
   必须响应一条消息，表明代理是有效的、受支持的和将被使用的，或者一条失败消息。

     代理做的

       “代理完成”消息用于表示PT代理接受由“TOR_PT_PROXY”指定的上游代理。

     PROXY-ERROR < ErrorMessage >

       “代理错误”消息用于指示上游代理格式错误/不受支持或不可用。

       PT代理必须在输出“代理错误”消息后立即终止。

       例子:

         不支持代理错误SOCKS 4个上游代理。

   在上游代理(如果有的话)配置好之后，PT客户机然后在“tor_pt_client_transport”中迭代请求的传输并初始化侦听器。

   对于初始化的每个传输，PT代理通过向stdout发送消息将侦听器状态报告给父级。

     CMETHOD <transport> <'socks4'，'socks5'> <地址:端口>

       “CMETHOD”消息被用来表示一个请求
       PT传输已经启动，父服务器应该使用的协议来建立外向连接，PT传输的前向代理正在监听的IP地址和端口。

       例子:

         CMETHOD投石袜5 127.0.0.1:19999

     CMETHOD-ERROR <交通> < ErrorMessage >

       “cmethods - error”消息用于表示请求的PT传输无法启动。

       例子:

         错误投石机没有岩石可用

   一旦所有的PT传输都被初始化(或失败)，则
   PT代理必须发送一个最终消息，表明它已经完成了初始化。

     CMETHODS做

       “CMETHODS DONE”消息表示PT代理已经完成了它能够处理的所有传输的初始化。

   发送“CMETHODS DONE”消息后，PT代理初始化就完成了。

   注:

    -“tor_pt_client_transport”中的未知传输被完全忽略，并且不能导致“cmethods - error”消息。
      因此，对于一个给定的PT代理来说，立即输出“CMETHODS DONE”是完全可能的。

    -父进程必须以任何顺序处理“CMETHOD”/“cmethods - error”消息，而不考虑“tor_pt_client_transport”中的顺序。

3.3.3。可插入的传输服务器消息

   PT服务器反向代理遍历“tor_pt_client_transport”中请求的传输并初始化侦听器。

   对于初始化的每个传输，PT代理通过向stdout发送消息将侦听器状态报告给父级。

     SMETHOD <transport> <地址:端口> [options]

       “SMETHOD”消息用于发出请求的信号
       PT传输已经启动，该协议将被用来处理传入的连接，以及IP地址和端口，客户端应该使用到达反向代理。

       如果有一个特定的<address:port>提供给给定
       PT传输通过“TOR_PT_SERVER_BINDADDR”，传输
       必须使用它作为服务器地址初始化。

       可选的“options”字段用于将附加的每个传输信息传递回父进程。

       目前公认的“选项”是:

         参数:[<关键> = < >价值,]+[<关键> = < >价值)

           “ARGS”选项用于传递客户端使用反向代理时需要的附加键/值格式化信息。

           等号和逗号必须用反斜杠转义。

           Tor: ARGS包括在运输线内
           桥的extra-info文档。

       例子:

         SMETHOD抛石机198.51.100.1:19999
         ARGS:N=13

     SMETHOD-ERROR <交通> < ErrorMessage >

       “SMETHOD-ERROR”消息用于表示请求的PT传输反向代理无法启动。

       例子:

         没有奶牛可用

   一旦所有的PT传输都被初始化(或失败)，则
   PT代理必须发送一个最终消息，表明它已经完成了初始化。

     SMETHODS做

       “SMETHODS DONE”消息表示PT代理已经完成了它能够处理的所有传输的初始化。

   发送“SMETHODS DONE”消息后，PT代理初始化就完成了。

3.3.4。可插拔的传输日志消息

   此消息是为了让客户机或服务器PT能够通过stdout或stderr向父进程发送任何日志消息。

   日志消息可以是PT返回的任何类型的消息(人类可读的)，以便父进程可以收集关于子进程中正在进行的事情的信息。它不打算让父进程进行相应的解析和操作，而是用于普通日志记录的消息。

   例如，tor守护进程将这些消息记录在严重性级别上，并使用PT_LOG(参见control-spec.txt)事件将它们发送到控制端口，这样任何第三部分都可以提取它们进行调试。

   消息的格式:

      日志严重性=严重性消息=消息

   严重性值指示消息应用于哪个日志级别。
   <Severity>可接受的值是:错误、警告、通知、信息、调试

   消息值是一个人类可读的字符串，由PT格式化。< MESSAGE >包含日志消息，它可以是字符串或CString(参见control-spec.txt中的第2节)。

   例子:

      日志严重程度=调试消息=“连接到A桥”

3.3.5。可插拔传输状态消息

   此消息是为了让客户机或服务器PT能够通过stdout或stderr向父进程发送任何状态消息。

   消息的格式:

      运输状态=运输< K_1 > = < V_1 > (< K_2 > = < V_2 >,…]

   传输值表明了PT是什么，例如使用的名称或协议。例如，obfs4proxy将使用“obfs4”。因此，传输值可以是PT本身定义的任何值，也可以是字符串或CString(参见control-spec.txt中的第2节)。

   <K_n>=<V_n>值是特定于PT的，必须至少有一个。这些信息反映了劳工党想要报告的状态。<V_n>可以是字符串或CString。

   例子(虚构的):

      STATUS TRANSPORT=obfs4 ADDRESS=198.51.100.123:1234 CONNECT=成功
      状态传输=obfs4地址=198.51.100.222:2222 CONNECT=失败指纹=<指纹> ERRSTR="连接被拒绝"
      状态传输=投石器地址= 198.51.100.15:443% =42

3.4。可插入运输关闭

   可插入传输的推荐方式是使用应用程序和
   处理优雅关闭的可插拔传输如下。

     -(父)在启动PT代理时设置“TOR_PT_EXIT_ON_STDIN_CLOSE”(3.2.1)，以表明stdin将用于优雅的关闭通知。

     -(父级)当PT代理终止时:

       1. 关闭PT代理的stdin。
       2. 等待一段“合理”的时间让PT退出。
       3.尝试使用操作系统特定的机制来导致优雅
          PT关闭(例如:“SIGTERM”)
       4. 使用操作系统特定的机制强制终止PT(例如:'SIGKILL'， 'ProccessTerminate()')。

     PT代理应该监视stdin，并在关闭时优雅地退出，如果父服务器支持该行为。

     PT代理应该处理特定的操作系统机制，以优雅地终止(例如:在“SIGTERM”上安装一个信号处理程序，如果可以的话，它会导致清理和优雅地关机)。

     PT代理应该尝试检测什么时候父进程已经终止(例如:通过检测它的父进程ID haso改变在U*IX系统)，并优雅地终止。

3.5。可插拔的传输客户端每个连接参数

   某些PT传输协议要求客户端在进行外向连接时提供每个连接的参数。在服务器端，这是由“ARGS”可选参数作为“SMETHOD”消息的一部分来处理的。

   在客户端，参数通过SOCKS协议的一部分身份验证字段传递。

   首先，必须转义“<Key>=<Value>”格式化的参数，这样所有反斜杠、等号和分号字符都用反斜杠转义。

   其次，所有转义的字符连接在一起。

     例子:
 共享秘密= rahasia; secrets-file = / tmp / blob

   最后，在使用特定于的身份验证机制建立传出连接时传输参数
   袜子协议版本。

    在SOCKS 4中，连接的参数列表在“CONNECT”请求的“USERID”字段中传输。

    在SOCKS 5中，父进程必须协商“用户名/密码”身份验证[RFC1929]，并传输“UNAME”和“PASSWD”字段中编码的参数。

      如果已编码的参数列表长度小于255字节，则“PLEN”字段必须设置为“1”，“PASSWD”字段必须包含一个NUL字符。

4. 匿名的考虑

   在设计和实现可插拔传输时，应该注意保护客户的隐私并避免泄露个人身份信息。

   客户相关考虑的例子有:

     -没有记录客户端IP地址到磁盘。

     -不泄漏DNS地址，除非必要。

     -确保“TOR_PT_PROXY”的“fail closed”行为被正确实现。

   此外，某些混淆机制依赖于服务器IP地址/端口的机密信息，因此客户端还需要注意在适用的情况下保持服务器端信息的机密性。

5. 参考文献
 [RFC2119] Bradner, S.， " rfc中用于指示的关键词
                 要求水平"，BCP 14, rfc2119, 1997年3月。
 Leech, M.， Ganis, M.， Lee, Y.， Kuris, R.，
                 科布拉斯博士，琼斯博士，《袜子协议版本5》，
                 1928年RFC, 1996年3月
 Kadianakis, G.， Mathewson, N.，“扩展ORPort和
                 运输控制港”，Tor提案196,2012年3月。
 Berners-Lee, T.， Fielding, R.， Masinter, L.，《制服
                 资源标识符:通用语法"，RFC 3986，
                 2005年1月。
 用户名/密码认证
                 袜子V5"， RFC 1929, 1996年3月。

6. 致谢

   这个规范大量借鉴了Jacob以前的版本
   Appelbaum, Nick Mathewson和George Kadianakis。

附录A.示例客户端可插拔传输会话

   环境变量:

     TOR_PT_MANAGED_TRANSPORT_VER = 1
     TOR_PT_STATE_LOCATION = / var / lib / tor / pt_state /
     TOR_PT_EXIT_ON_STDIN_CLOSE = 1
     TOR_PT_PROXY = socks5: / / 127.0.0.1:8001
     TOR_PT_CLIENT_TRANSPORTS = obfs3 obfs4

   PT代理写入stdin的消息:

     版本1
     代理做的
     CMETHOD obfs3 socks5 127.0.0.1:32525
     socks5 127.0.0.1:37347
     CMETHODS做

附录B.服务器可插拔传输会话示例

   环境变量:

     TOR_PT_MANAGED_TRANSPORT_VER = 1
     TOR_PT_STATE_LOCATION = / var / lib / tor / pt_state
     TOR_PT_EXIT_ON_STDIN_CLOSE = 1
     TOR_PT_SERVER_TRANSPORTS = obfs3 obfs4
     TOR_PT_SERVER_BINDADDR = obfs3-198.51.100.1:1984

   PT代理写入stdin的消息:

     版本1
     SMETHOD obfs3 198.51.100.1:1984
     参数:cert=HszPy3vWfjsESCEOo9ZBkRv6zQ/1mGHzc8arF0y2SpwFr3WhsMu8rK0zyaoyERfbz3ddFw,iat-mode=0
     SMETHODS做
