

                         Tor填充规范

                        迈克·佩里，乔治·卡迪亚纳基斯

注意:这是将Tor指定为当前实现的尝试。Tor的未来版本将实现改进的算法。

本文档试图介绍Tor如何选择使用覆盖流量来掩盖外部和内部观察者的各种流量模式。其他实现可能采用其他方法，但实现者应该意识到其选择的匿名性和负载平衡影响。

      “必须”、“不得”、“必须”、“应当”、“应当”等关键词
      本文档中的“不”、“应该”、“不应该”、“推荐”、“可能”和“可选”将按照中描述的方式解释
      RFC 2119。


1. 概述

  Tor支持两类覆盖流量:连接级填充和电路级填充。

  连接级填充使用CELL_PADDING单元命令来覆盖流量，而电路级填充使用RELAY_COMMAND_DROP中继命令。CELL_PADDING仅为单跳，可以通过Tor继电器(“内部”观察者)与正常的流量进行区分，但不能通过实体监视Tor或连接(“外部”观察者)进行区分。

  RELAY_COMMAND_DROP是多跳的，并且对中间的Tor继电器是不可见的，因为relay命令字段被电路层加密覆盖。此外，Tor的'recognized'字段允许RELAY_COMMAND_DROP填充被发送到电路中的任何中间节点(按节计算)
  6.1 tor-spec.txt)。

  Tor同时使用连接级和电路级填充。连接级填充在第2节中进行了描述。电路电平填充在第3节中进行了描述。

  电路级填充系统与连接级填充完全正交。连接级填充系统将电路级填充看作正常的数据流量，因此当电路级填充系统正在主动填充时，连接级填充系统不会增加任何额外的开销。


2. 连接级填充

2.1。背景

  Tor客户端和中继使用CELL_PADDING来降低isp和监视基础设施所保留的连接级元数据的分辨率。

  这种元数据保留是由Internet路由器以
  Netflow、jFlow、Netstream或IPFIX记录。这些记录由网关路由器以原始形式发出，然后导出(通常通过明文)到“收集器”，收集器要么逐字记录它们，要么进一步降低它们的粒度[1]。

  Netflow记录和相关的数据收集和保留工具是非常可配置的，并且具有许多操作模式，特别是在配置为处理高吞吐量时。然而，在ISP规模上，每个流记录很可能被使用，因为它们是默认的，并且在端点活动方面提供非常高的分辨率，仅次于全包和/或头捕获。

  每个流记录记录端点连接5元组，以及该5元组在特定时间段内发送和接收的总字节数。它们也可以存储其他字段，但主要是计时和字节码信息。

  当被配置为提供每个流数据时，路由器会根据两个参数周期性地为通过它们的所有活动连接发出这些原始流记录:“活动流超时”和“非活动流超时”。

  “活动流超时”导致路由器为每个持续发送数据的活动TCP会话定期发出新记录。大多数路由器的默认活动流超时为30分钟，这意味着至少每30分钟为每个TCP会话创建一个新记录，无论如何。这个值可以在主路由器上从1分钟配置到60分钟。

  “非活动流超时”是由路由器用于创建一个新记录，如果
  TCP会话在一定时间内处于非活动状态。它允许路由器避免跟踪内存中的大量空闲连接，而只在有活动时发出单独的记录。在普通路由器上，这个值的范围从10秒到600秒。似乎没有路由器支持低于10秒的值。

  下面是常见路由器的默认值和范围(已知时在括号中)，以及它们手册的引用，以供参考。

  有些路由器使用Netflow以外的其他收集协议，在Juniper的情况下，对这些协议使用不同的超时。凡是已知发生这种情况的地方，都已加以注意。

                            活动超时
    思科IOS[3] 15s (10-600s) 30min (1-60min)
    思科催化剂[4]5min 32min
    Juniper (jFlow)[5] 15s (10-600s) 30min (1-60min)
    Juniper (Netflow)[6,7] 60s (10-600s) 30min (1-30min)
    H3C (Netstream)[8] 60s (60-600s) 30min (1-60min)
    Fortinet [9 ]               15秒                          30分钟
    MicroTik[10] 15s 30min, nProbe[14] 30s 120s
    阿尔卡特朗讯[2]15s (10-600s) 30min (1-600min)

  活动的和非活动的netflow记录超时的组合允许我们设计一种低成本的填充防御，它会导致那些本来会被分割的记录甚至在它们被导出到收集器进行存储之前就在路由器上“崩溃”。只要连接在“非活动流超时”结束前传输数据，路由器就会继续计算该流上的总字节数，最终在“活动流超时”发出记录。

  这意味着，对于防止“非活动流超时”过期的最小填充量，可以将每个流的原始netflow数据的分辨率降低到30分钟内发送和接收的总字节量。这大大降低了HTTP, IRC, XMPP的分辨率，
  SSH和其他间歇交互流量，特别是当该时间段内的所有用户流量都在单个连接上多路复用时(就像Tor一样)。

2.2。实现

  Tor客户端目前维护一个到其保护节点的TLS连接，以携带实际的应用程序流量，并构成多达3个到其他节点的额外连接，以检索目录信息。

  我们只将客户端连接加到保护节点，而不加任何其他连接。我们将到Tor网络的桥节点连接视为客户端连接，并将其填充，但不在正常继电器之间填充。

  客户端和守卫都将为所有应用程序(即:非目录)TLS连接维护计时器。每次两端发送或接收非填充数据包时，该端点将使用2.3节中描述的max(X,X)分布对1.5秒到9.5秒之间的超时值进行采样。时间范围以第2.6节规定的协商一致参数为准。

  如果在计时器到期之前，由于任何原因连接变得活跃，计时器将在1.5到9.5秒之间重置为一个新的随机值。如果该连接在计时器到期之前保持非活动状态，则将在该连接上发送单个CELL_PADDING单元格。

  这样，连接将只在空闲时填充，并且总是在至少10秒的非活动超时之前传输数据包。

2.3。填充单元格超时分布统计信息

  结果是，由于填充是双向的，而且两个端点都维护计时器，这就造成了这样一种情况，即在向任意方向发送填充包之前的时间实际上是min(client_timeout, server_timeout)。

  如果对client_timeout和server_timeout进行统一采样，那么min(client_timeout,server_timeout)的分布就不再是统一的，因此产生的平均超时(Exp[min(X,X)])远低于超时范围的中点。

  为了弥补这一点，我们不是均匀地采样每个端点超时，而是从max(X,X)采样，其中X是均匀分布的。

  如果X是一个从0开始均匀的随机变量。R-1(其中R=高低)，则随机变量Y = max(X,X)有Prob(Y == i) = (2.0*i + 1)/(R*R)。

  然后，当双方应用从Y采样的超时时，得到的双向填充包率现在是第三个随机变量:
  Z =最小(Y, Y)。

  Z的分布呈轻微的钟形，但在均值附近大多是平的。它也证明，Exp[Z] ~= Exp[X]。下面是每个随机变量的平均值表:

     [Y=max(X,X)] [Y=max(X,X)]
     2000 999.5 1066 666.2 1332.8
     3000 1499.5 1599.5 999.5 1999.5
     5000 2499.5 2666 1666.2 3332.8
     6000 2999.5 3199.5 1999.5 3999.5
     7000 3499.5 3732.8 2332.8 4666.2
     8000 3999.5 4266.2 2666.2 5332.8
     10000 4999.5 5328 3332.8 6666.2
     15000 7499.5 7995 4999.5 9999.5
     20000 9900.5 10661 6666.2 13332.8

  通过这种方式，我们维护了这样一个属性，即超时范围的中点是在向任意方向发送填充包之前的预期平均时间。

2.4。最大的开销界限

  使用默认参数和上述分布，我们希望填充连接每5.5秒发送一个填充单元。这平均为103字节每秒全双工(每个方向上约52字节/秒)，假设一个512字节的单元和55字节的TLS+TCP+IP报头。
  对于在预期的~50分钟寿命(由电路可用超时加上一个小的额外连接超时控制)中保持空闲状态的客户机连接，这在两个方向上大约是154.5KB的开销(总计309KB)。

  同时连接250万个完全空闲的客户端，52字节/秒相当于130MB/秒在各个方向的网络范围内，这大致是当前Tor目录流量[11]。当然,我们的
  每天250万用户既不会同时连接网络，也不会完全空闲，所以我们预计实际开销会比这个低得多。

2.5。通过谈判减少或禁用填充

  为了允许移动客户端禁用或减少它们的填充开销，CELL_PADDING_NEGOTIATE单元格(tor-spec.txt section 7.2)可以从客户端发送到中继。这个单元用来指示继电器停止发送填充。

  如果客户选择使用减少的填充，它将继续发送从范围[9000,14000]毫秒取样的填充单元(根据2.6节的一致参数更改)，仍然使用
  Y = max (X, X)分布。由于填充现在是单向的，填充单元的预期频率现在由上面的Y分布控制，而不是z。对于5000ms范围，我们可以看到，我们期望每9000+3332.8 = 12332.8ms发送一个填充包。我们还将电路可用超时时间从~50分钟缩短到~25分钟，这将导致客户端的OR连接在空闲时立即关闭，从而减少开销。

  这两个变化使每次使用的填充开销从309KB降低到原来的水平
  Tor连接降低到每次使用Tor连接69KB。对于连续使用，最大开销从103字节/秒下降到46字节/秒。

  如果客户端选择完全禁用填充，它发送一个
  CELL_PADDING_NEGOTIATE指示继电器不要填充，然后不发送任何进一步的填充本身。

2.6。控制行为的一致参数

  连接级填充由以下一致参数控制:

    * nf_ito_low
      -不活动时发送填充的范围的低端，毫秒。
      默认值:1500

    * nf_ito_high
      -发送填充范围的高端，以毫秒计。
      默认值:9500
      -如果nf_ito_low == nf_ito_high == 0，填充将被禁用。

    * nf_ito_low_reduced
      -为减少填充客户端:范围的低端发送填充时，不活动，在ms。
      默认值:9000

    * nf_ito_high_reduced
      -为减少填充客户端:高端范围发送填充，在ms。
      默认值:14000

    * nf_conntimeout_clients
      -保持电路打开并供客户使用的秒数。请注意，实际客户端超时是由这个值随机分配到这个值的两倍。管理客户端
        或者康涅狄格州的寿命。减少填充客户端使用了一致值的一半。
      默认值:1800

    * nf_pad_before_usage
      -如果设置为1，或连接被填充之前，客户端使用他们的任何应用程序流量。如果是0，则连接直到应用程序数据开始时才填充。
      -默认值:1

    * nf_pad_relays
      -如果设置为1，我们也垫非活动继电器到继电器连接
      -默认值:0

    * nf_conntimeout_relays
      -空闲中继到中继连接保持打开的秒数。
      默认值:3600


3.电路级填充

  Tor中的电路填充系统是WTF-PAD事件驱动状态机设计[15]的扩展。在较高的层次上，这种设计在客户机上放置一个或多个填充状态机，在每个电路上在一个中继上放置一个或多个填充状态机。

  状态转移和直方图生成被推广为完全可编程，并增加了概率分布支持，以支持更紧凑的表示，如APE[16]。此外，还增加了数据包计数限制、速率限制和电路应用条件。

  目前，Tor使用这个系统来部署两对电路填充机，以掩盖客户端洋葱服务电路的设置阶段之间的差异，直到前10个单元。

  本规范只涉及这些填充机的结果行为，因此不涉及状态机实现细节或操作。有关使用电路填充系统来开发未来填充防御的详细信息，请参阅研究开发人员文档[17]。

3.1。电路填充谈判

  电路填充机被宣传为“填充”子协议版本(参见tor-spec.txt第9部分)。洋葱服务电路填充机被宣传为“padding =2”。

  由于电路填充机仅在电路生命周期的某些时刻激活，而且在电路生命周期的任何给定时刻可能有多个填充机激活，因此还存在填充协商单元和协商响应。这些是中继命令41和42，中继头文件与tor-spec.txt的6.1节相同。

  协商请求的中继单元数据有效载荷字段如下:
 const CIRCPAD_COMMAND_STOP = 1;const CIRCPAD_COMMAND_START = 2;
 const CIRCPAD_RESPONSE_OK = 1;const CIRCPAD_RESPONSE_ERR = 2;
 const CIRCPAD_MACHINE_CIRC_SETUP = 1;
 struct circpad_negotiate {u8版本在[0];u8命令[CIRCPAD_COMMAND_START, CIRCPAD_COMMAND_STOP];
 u8 machine_type IN [CIRCPAD_MACHINE_CIRC_SETUP];
 与未使用;/ /前echo_request
 u32 machine_ctr;};

  当客户机希望启动电路填充机器时，它首先检查所需的目的地跳是否为该机器提供了适当的子协议版本。然后，它用command=CIRCPAD_COMMAND_START和machine_type=CIRCPAD_MACHINE_CIRC_SETUP(对于circ setup机器，目标跳是电路中的第二跳)向该跳发送一个circpad_negotiate单元。machine_ctr是电路中这台机器实例的计数。它用于消除关机请求的歧义。

  当一个中继接收到一个circpad_negotiate单元格时，它检查它是否支持被请求的机器，并发送一个circpad_negotiate单元格，它在一个中继单元的数据有效负载中格式化为42号命令(参见tor-spec.txt章节6.1)，如下:
 struct circpad_谈判{u8版本在[0];u8命令[CIRCPAD_COMMAND_START, CIRCPAD_COMMAND_STOP];u8响应[CIRCPAD_RESPONSE_OK, CIRCPAD_RESPONSE_ERR];
 u8 machine_type IN [CIRCPAD_MACHINE_CIRC_SETUP];
 u32 machine_ctr;};

  如果支持该机器，则响应字段将包含
  CIRCPAD_RESPONSE_OK。如果不是，它将包含CIRCPAD_RESPONSE_ERR。

  任何一方都可以发送CIRCPAD_COMMAND_STOP来关闭填充机器(客户端只能发送circpad_negotiate，继电器为此只能发送circpad_negotiate)。

  如果machine_ctr与电路上的当前机器实例计数不匹配，则忽略该命令。

3.2。电路填充机器信息管理

  客户端可以在接收到circpad_negotiation响应之前向中继发送填充单元，以便在协商完成之前允许出站覆盖流量。

  客户端可以在接收到circpad_negotiate响应之前发送另一个circpad_negotiate单元，以允许快速的机器更改。

  继电器不能发送填充单元或circpad_协商单元，除非填充机器是活动的。任何从非预期的中继源到达客户端的与拍片相关的单元都是违反协议的，客户可以立即拆除这样的电路以避免侧通道风险。

3.3。混淆客户端洋葱服务电路设置

  当前部署在Tor中的电路填充试图隐藏客户端洋葱服务电路设置。这里没有讨论服务端设置，因为这样做会涉及到更多的开销，并且/或需要与应用层进行交互。

  所采取的方法是针对前10个单元进行客户端介绍和汇聚电路匹配用于正常web流量的3跳通用电路的单元方向序列和单元数。引入电路的寿命也与一般电路的寿命相匹配。

  注意，这种辩解并没有混淆到达时间。

3.3.1。通用电路构造顺序

  大多数用于上网或下载目录信息的通用Tor电路以以下6单元继电器单元序列开始(在[括号]中包围的单元是出线的，其他的是入线的):
 扩展d2 ->[开始]->连接

  当这完成时，客户端已经建立了一个3跳电路，并打开了一个流到另一端。通常在这之后会有一系列的数据单元来获取页面，建立SSL连接或获取目录信息:
 [数据]->[数据]->数据->数据…(入站细胞继续)

  以上10个继电器单元的流定义了在我们的测试期间从Tor浏览器中出来的绝大多数通用电路，并且它是我们用来混合引入和会合电路的。

  请注意，在本节中，我们只研究中继单元，而不研究像创建/创建或认证/等连接级单元。在链接层握手期间使用的。其基本原理是，连接级单元依赖于所使用的保护类型，而不是网络/保护级对手的有效指纹。

3.3.2。客户端洋葱服务介绍电路混淆

  两台电路填充机器用来隐藏客户端介绍电路:一台机器位于原点，另一台机器位于电路的第二跳。
  每台机器向另一台机器发送填充物。来自原始端机器的填充在第二跳终止，并且不会被转发到实际的引入点。

  从上面3.3.1节可以看出，大多数通用电路的初始继电器单元顺序如下(出线单元标记在[括号]中):
 扩展d2 ->[开始]->连接
    -> [DATA] -> [DATA] -> DATA -> DATA…(继续入站数据单元)

  而正常的引入电路通常是这样的:
 [扩展d2] ->扩展d2 ->[扩展d2] ->扩展d2
    -> [INTRO1] ->导入e_ack

  这意味着直到第六个细胞(上面每个序列的第一行)，一般电路和引入电路都有相同的细胞序列。之后，我们想模拟的第二行序列

    -> [DATA] -> [DATA] -> DATA -> DATA…(继续入站数据单元)

  我们通过开始填充来实现这一点。使用填充协商单元格，通常情况下，第二行是这样的:

    -> [INTRO1] -> [PADDING_NEGOTIATE] -> padding_negotiation -> INTRO_ACK

  然后，中间节点将在INTRO_MACHINE_MINIMUM_PADDING(7)和之间发送
  INTRO_MACHINE_MAXIMUM_PADDING(10)单元格，以匹配"…(入站数据单元格继续)跟踪的一部分(也就是HTTPS响应体的其余部分)。

  我们还设置了一个特殊的标志，以保持电路开放，即使在介绍完成后。有了这个特性，电路在过期之前(通常是10分钟)将和普通网络电路保持相同的存活时间。

3.3.3。客户端会合电路隐藏

  与引入电路类似，我们的目标是填充会合电路，使其融入一般电路的初始单元序列，一般电路的初始单元序列通常是这样的:
 扩展d2 ->[开始]->连接
     -> [DATA] -> [DATA] -> DATA -> DATA…(传入细胞继续)

  而正常的会合电路通常是这样的:
 扩展d2 -> [EST_REND] -> REND_EST
     -> REND2 -> [BEGIN]

  这意味着直到第六个细胞(第一行)，一般电路和rend电路都有相同的细胞序列。

  在这之后，我们想模拟一个[数据]->[数据]->数据->数据序列。

  在REND_ESTABLISHED之后进行填充协商，序列变成:
 扩展d2 -> [EST_REND] -> REND_EST
     -> [padding_negotiation] -> [DROP] -> padding_negotiation -> DROP…

  之后，正常的应用程序数据单元继续在电路上。

  因此，通过这种方法，直到电路设置结束，我们都使会合电路看起来像一般电路。

  在那之后，我们的机器被停用，我们让实际的会合线路塑造交通流。由于会合电路通常模仿一般电路(它们的目的是在网上冲浪)，我们可以预期它们看起来会很相似。

3.3.4。电路安装机开销

  在介绍电路的情况下，我们看到原始端机器只发送一个[PADDING_NEGOTIATE]单元，而原始端机器发送一个
  padding_协商单元格和7到10个删除单元格。这意味着这台机器的平均开销是11填充单元每个引入电路。

  对于开路的情况，这台机器是相当轻的。双方发送2个填充单元格，共4个填充单元格。

3.4。电路填充一致参数

  电路填充系统有一些一致的参数，可以使电路填充完全失效，或者限制继电器和客户端的总开销。

  * circpad_padding_disabled
    -如果设置为1，没有电路填充机器将协商，所有当前填充机器将立即停止填充。
    -默认值:0

  * circpad_padding_reduced
    -如果设置为1，只会使用标有“减少”/“低开销”的电路填充机。(目前没有这样的机器被标记为“减少的开销”)。
    -默认值:0

  * circpad_global_allowed_cells
    -这是在‘circpad_global_max_padding_percent’参数应用之前必须发送的填充单元格的数量。
    -默认值:0

  * circpad_global_max_padding_percent
    -这是填充单元格与总单元格的最大比例，指定为百分比。如果所有电路的填充单元与总单元的整体比率超过了这个百分比值，则在比率降低之前不会发送更多的填充。0意味着没有限制。
    -默认值:0

  * circpad_max_circ_queued_cells
    -这是可以在电路填充停止被发送之前在电路队列中的最大单元格数。
    -默认值:CIRCWINDOW_START_MAX (1000)


答:确认

  这项研究部分得到了美国国家科学基金会拨款CNS-1111539的支持，
  CNS-1314637, CNS-1526306, CNS-1619454和CNS-1640548。

1. https://en.wikipedia.org/wiki/NetFlow
2. http://infodoc.alcatel-lucent.com/html/0_add-h-f/93-0073-10-01/7750_SR_OS_Router_Configuration_Guide/Cflowd-CLI.html
3.http://www.cisco.com/en/US/docs/ios/12_3t/netflow/command/reference/nfl_a1gt_ps5207_TSD_Products_Command_Reference_Chapter.html#wp1185203
4. http://www.cisco.com/c/en/us/support/docs/switches/catalyst-6500-series-switches/70974-netflow-catalyst6500.html#opconf
5. https://www.juniper.net/techpubs/software/erx/junose60/swconfig-routing-vol1/html/ip-jflow-stats-config4.html#560916
6. http://www.jnpr.net/techpubs/en_US/junos15.1/topics/reference/configuration-statement/flow-active-timeout-edit-forwarding-options-po.html
7. http://www.jnpr.net/techpubs/en_US/junos15.1/topics/reference/configuration-statement/flow-active-timeout-edit-forwarding-options-po.html
8. http://www.h3c.com/portal/Technical_Support___Documents/Technical_Documents/Switches/H3C_S9500_Series_Switches/Command/Command/H3C_S9500_CM-Release1648%5Bv1.24%5D-System_Volume/200901/624854_1285_0.htm#_Toc217704193
9. http://docs-legacy.fortinet.com/fgt/handbook/cli52_html/FortiOS%205.2%20CLI/config_system.23.046.html
10. http://wiki.mikrotik.com/wiki/Manual:IP/Traffic_Flow
11. https://metrics.torproject.org/dirbytes.html
12. http://freehaven.net/anonbib/cache/murdoch-pet2007.pdf
13. https://gitweb.torproject.org/torspec.git/tree/proposals/188-bridge-guards.txt
14. http://www.ntop.org/wp-content/uploads/2013/03/nProbe_UserGuide.pdf
15. http://arxiv.org/pdf/1512.00524
16. https://www.cs.kau.se/pulls/hot/thebasketcase-ape/
17. https://github.com/torproject/tor/tree/master/doc/HACKING/CircuitPaddingDevelopment.md
18. https://www.usenix.org/node/190967 https://blog.torproject.org/technical-summary-usenix-fingerprinting-paper

