

                           Tor路径规范

                              罗杰Dingledine
                               尼克·马修森

注意:这是将Tor指定为当前实现的尝试。Tor的未来版本将实现改进的算法。

本文档试图介绍Tor如何选择构建电路并将流分配给电路。其他实现可能采用其他方法，但实现者应该意识到其选择的匿名性和负载平衡影响。

                    这个规范还没有完成。

      “必须”、“不得”、“必须”、“应当”、“应当”等关键词
      本文档中的“不”、“应该”、“不应该”、“推荐”、“可能”和“可选”将按照中描述的方式解释
      RFC 2119。

1. 一般的操作

   Tor一旦有了足够的目录信息就开始构建电路(参见dir-spec.txt的第5节)。有些电路是预先构建的，因为我们期望以后需要它们(用于用户流量)，而有些是由于迫切需要而构建的(用于当前电路无法处理的用户流量、用于测试网络或我们的可达性，等等)。
 [较新的Tor版本(0.2.6.2 alpha及更高版本):
   如果共识包含出口(典型的情况)，Tor将建立出口和内部电路。当引导程序完成时，Tor将准备处理请求退出电路的应用程序，例如
   万维网。

   如果共识不包含出口，Tor将只建立内部电路。在本例中，前面的状态将包含如上所述的“内部”。当引导完成，Tor将准备处理一个应用程序请求内部电路隐藏服务在"。洋葱”地址。

   如果未来共识包含退出，则可能出现退出电路。

   当客户端应用程序创建一个新的流(通过打开一个SOCKS连接或启动一个解析请求)时，我们将它附加到一个适当的开放电路(如果存在的话)，或者等待一个适当的电路正在进行中。只有当没有电流电路可以处理请求时，我们才启动一个新电路。我们随着时间的推移对电路进行旋转，以避免一些剖面分析攻击。

   为了构建一个电路，我们选择所有我们想要使用的节点，然后构建电路。有时，当我们想要一个电路在一个给定的跳点结束时，我们有一个合适的未使用的电路，我们“分流”现有的电路并将其扩展到新的终端。

   下面将更详细地描述这些过程。

   本文档仅描述了Tor的自动路径选择逻辑;路径选择可以被控制器覆盖(通过扩展电路和
   ATTACHSTREAM命令)。通过这些方法构造的路径可能会违反下面给出的一些约束。

1.1。术语

   一个“路径”是一个节点的有序序列，还没有构建成一个电路。

   “干净”的线路是指尚未被用于任何流量的线路。

   “快速”、“稳定”或“有效”节点是指根据当前目录信息分别设置了“快速”、“稳定”或“有效”标志的节点。“快速”或“稳定”电路是指仅由“快速”或“稳定”节点组成的电路。

   在“exit”电路中，如果有等待流请求，则根据等待流请求来选择最终节点，在任何情况下，都采用“reject *:*”的退出策略避开节点。另一方面，在“内部”电路中，最终节点的选择就像中间节点一样(忽略其退出策略)。

   “请求”是需要由电路提供服务的客户端流或DNS解析。

   一个“待定”的电路是一个我们已经开始建造，但尚未完成。

   根据下面给出的规则，如果可以使用电路/路径来满足请求，则电路或路径“支持”请求。
   如果请求的某些方面是未知的(通常是它的目标IP)，电路或路径“可能支持”请求，但是我们相信路径可能根据下面给出的规则支持请求。

1.1。继电器的带宽

   旧版本的Tor在网络状态文档中没有报告带宽，所以客户必须从路由器的广告中继描述符中了解带宽。

   对于在0.2.1.17-rc之前的Tor版本，在我们提到一个继电器的“带宽”下面的任何地方，我们指的是它的剪切的广告带宽，通过对继电器描述符中的“带宽”元素的“速率”和“观察到的”参数取较小的值来计算。如果路由器的广告带宽大于
   MAX_BELIEVABLE_BANDWIDTH(目前是10 MB/s)，我们将其压缩到这个值。

   对于最近版本的Tor，我们取一致意见中声明的带宽值，只有当一致意见中没有列出带宽时，我们才返回到压缩的公开带宽。

2. 建立电路

2.1。当我们建立

魅惑。在我们有足够的目录信息之前，我们不会造电路

   有一类可能的攻击，我们的目录服务器只给我们关于他们想让我们使用的中继的信息。为了防止这种攻击，我们不会为实际流量构建多跳电路(如下面2.1.1、2.1.2、2.1.4中的电路)，直到我们有足够的目录信息能够合理地确信这种攻击没有发生在我们身上。

   此处，“enough”目录信息定义为:

      *在最后一个合理的时间间隔(24小时)内的某个时间点达成共识是有效的。

      *有足够的描述符，我们可以建立至少部分F的所有带宽加权路径，而不采取
        ExitNodes EntryNodes /等考虑在内。
 (F由PathsNeededToBuildCircuits选项设置，默认为'min_paths_for_circs_pct' consensus参数，最终默认值为60%。)

      *有足够的描述符，我们可以建立至少部分F的所有带宽加权路径，_while_
        ExitNodes EntryNodes /等考虑在内。
 (F如上所示。)

      *每个开头都有一个描述符
        在我们的主要警卫中使用警卫。(见guard-spec.txt)


2.1.1。客户预先构建电路

   在作为客户端运行时，Tor会尝试至少维护一定数量的清洁电路，以便能够快速处理新的流。为了增加成功的可能性，Tor试图通过选择支持我们最近使用的端口的节点来预测哪些电路将是有用的(默认为一个小时)。具体地说，在启动时，Tor会尝试维护一个允许连接到80端口的干净快速出口电路，以及至少两个快速干净稳定的内部电路，以备我们解决请求或隐藏服务请求时使用(如果我们_run_隐藏服务，则至少三个)。

   之后,Tor将调整电路,它预先构建的基础上,从用户请求它看到:它试图有两个快速清洁出口电路可用的每端口看到过去一小时内(每个电路可以适合很多预测港口——它不需要两个单独的电路为每个端口),和它试图有上述内部电路可用如果我们看到解决或隐藏在过去一小时内服务活动。如果有12个或更多的清洁电路打开，它不会打开更多，即使它有更多的预测。

   只有稳定电路才能“覆盖”列在
   LongLivedPorts配置选项。同样，LongLivedPorts中列出的对端口的隐藏服务请求使我们创建稳定的内部电路。

   注意，如果用户在一小时内没有请求，Tor将预测没有使用，也不会建立先发制人的电路。

   Tor客户端不应该将其预测的请求列表存储到一个持久的媒体中。

2.1.2。客户根据需要制造电路

   此外，当存在没有电路(已构建或挂起)支持的客户机请求时，我们将创建一个新的电路来支持该请求。
   对于退出连接，我们选择一个将处理最多挂起请求的退出节点(在绑定之间任意选择)，启动一个电路到那里结束，然后重复，直到每个未附加的请求都可能被挂起的或已构建的电路支持为止。对于内部电路，我们选择任意可接受的路径，根据需要进行重复。

   在某些情况下，我们可以重用已经建立的电路，如果它是干净的;详见第2.3节(拆装电路)。

2.1.3。继电器构建测试可达性和带宽的电路

   Tor继电器一旦成功地建立了一个电路(在启动和每当他们的IP地址改变时)，就会测试他们的指令的可达性。他们用自己建造一个普通的快速内部电路作为最后一跳。一旦测试电路成功，Tor继电器决定它是可到达的，并愿意发布一个描述符。

   我们启动多个测试电路(一次一个)，直到我们打开了NUM_PARALLEL_TESTING_CIRC(4)这样的电路。然后我们通过向每个电路发送一定数量的中继降单元来做“带宽测试”:在四个电路上划分的带宽* 10 / CELL_NETWORK_SIZE的总单元，但不能超过
   CIRCWINDOW_START(1000)单元格总数。这样可以练习输出和输入带宽，并帮助快速启动所观察到的带宽(参见dir-spec.txt)。

   一旦建立了电路，Tor继电器也会测试其DirPort的可达性，但他们使用普通的出口电路来达到这个目的。

2.1.4。Hidden-service电路

   参见下面的第4节。

2.1.5节讨论。失效电路的速率限制

   如果我们未能在X秒内建立N次电路(见节)
   我们停止构建电路，直到X秒过去。
   XXXX

2.1.6。何时拆除电路

   XXXX


2.2。路径选择和约束

   我们为每个新电路选择路径，然后再构建它。我们先选择出口节点，然后选择电路中的其他节点。我们生成的所有路径都遵循以下约束条件:

     -我们不会为同一路径选择同一路由器两次。
     -我们不会选择同一家族的路由器，也不会选择同一路径的路由器。(如果两台路由器在描述符的“家族”条目中列出了另一台路由器，那么这两台路由器属于同一个系列。)
     -我们不会在给定的/16子网中选择一个以上的路由器(除非强制执行的区别子网是0)。
     -我们不会选择任何不运行或无效的路由器，除非我们已经被配置这样做。默认情况下，我们被配置为允许在“中间”和“会合”位置的无效路由器。
     -如果我们使用保护节点，第一个节点必须是一个保护节点(见下面5)
     - XXXX选择长度

   对于“快速”电路，我们只选择带有快速标志的节点。对于非“快速”电路，所有节点都是合格的。

   对于所有的电路，我们根据路由器带宽来对节点进行权重选择。

   我们还根据出口和保护标记节点所占总带宽的比例以及它们被选择的位置来对它们的带宽进行加权。

   这些权重在consensus中公布，并在diro -spec.txt的“计算带宽权重”部分中进行计算。它们是:

      Wgg -处于警戒位置的警戒标志节点的重量
      Wgm -处于保护位置的非标记节点的重量
      Wgd -在保护位置的保护+被退出标记的节点的权重

      Wmg -中间位置的警卫标记节点的重量
      Wmm -中间位置的非标记节点的权重
      Wme -中间位置的带有退出标记的节点的权重
      Wmd -中间位置的警卫+出口标记节点的重量

      Weg -在出口位置的警卫标记节点的重量
      Wem—退出位置的非标记节点的权重
      处于退出位置的被退出标记的节点的极小重量
      在出口位置的警卫+出口标记节点的权重

      Wgb - begin_dir支持的监视标记节点的权重
      Wmb—支持begin_dir的非标记节点的权重
      支持begin_dir的导出标记节点的Web权重
      Wdb - begin_dir支持保护+输出标记节点的权重

      为BEGIN_DIR请求的保护+退出标记节点的权重
      为BEGIN_DIR请求的保护+退出标记节点的权重
      为BEGIN_DIR请求的保护+退出标记节点的权重
      为BEGIN_DIR请求的保护+退出标记节点的权重

   如果其中任何一个权重是畸形的，或者没有出现一致意见，客户端就会继续使用常规的路径选择算法将权重设置为默认值10000。

   此外，我们在构建电路时可能考虑到一个或多个请求。每种请求都会对路径施加一定的约束:

     -所有服务端引入电路和所有会合路径应稳定。
     -我们认为需要长时间保持开放的所有连接请求都需要稳定的电路。目前，Tor通过检查请求的目标端口，并将其与一列“长期存在的”端口进行比较来确定。(默认:21 22 706 1863 5050，
       5190, 5222, 5223, 6667, 6697, 8300。)
     - DNS解析要求退出节点的退出策略不等于“reject *:*”。
     -反向DNS解析需要一个Tor版本的公告eventdns支持(可用在Tor 0.1.2.1-alpha-dev或更高版本)。
     -所有连接请求都需要一个出口节点，其出口策略支持其目标地址和端口(如果已知)，或者哪个“可能支持”(如果地址不已知)。见2.2.1。
     -快速的规则?XXXXX

2.2.1。选择退出

   如果我们知道我们想要连接或解析的IP地址，我们就可以通过模拟给定的路由器声明的退出策略来简单地判断它是否支持它。

   因为我们经常连接到form hostname:port的地址，所以当我们选择一个出口节点时，我们并不总是知道目标IP地址。在这些情况下，我们需要选择一个出口节点，它“可能支持”连接到具有未知地址的给定地址端口。如果接受到该端口的任何连接的任何子句优于拒绝到该端口的所有连接的所有子句(如果有的话)，则退出节点“可能支持”这样的连接。

   除非用户要求这样做，否则我们绝不会选择一个被超过半数的官方标记为“坏出口”的退出节点，因为他们声称自己列出了坏出口。

2.2.2。用户配置

   用户可以使用配置选项更改路径选择的默认行为。

   -如果提供了“ExitNodes”，那么每个请求都需要ExitNodes列表中的一个退出节点。(如果列表上没有节点支持一个请求，并且StrictExitNodes为false，那么Tor将该请求视为If
     没有提供ExitNodes。)

   -“entrynode”和“StrictEntryNodes”行为相似。

   -如果用户尝试连接或解析表单的主机名<target>.<servername>。退出时，请求被重写为<target>的请求，并且该请求仅由昵称或指纹为<servername>的出口支持。

   -设置后，“HSLayer2Nodes”和“HSLayer3Nodes”放宽了Tor的路径限制，允许相同/16和节点家族中的节点重新出现在路径中。它们还允许选择保护节点作为RP、IP和HSDIR，以及在这些位置之前的跳点。

2.3。调拨电路

   如果我们需要一个电路，并且已经建立了一个干净的电路，在某些情况下，我们可以调整干净的电路来适应我们的新目的。具体地说,

   对于隐藏的服务交互，如果一个干净的内部电路可用，我们可以“拆掉”它，所以我们不需要根据需要从头开始构建这些电路。

   当客户端请求在给定节点退出时，我们也可以分流干净的电路——通过。表示退出，或者因为目标运行在与退出节点相同的位置。

2.4。学习什么时候放弃电路构造(“超时”)

   由于版本0.2.2.8-alpha, Tor尝试学习什么时候放弃基于网络条件的电路。

2.4.1。分布选择和参数估计

   通过对构建时间的研究，我们发现电路构建时间的分布呈现出一种弗雷切特分布。然而，弗雷切特分布的估计量和分位数函数难以处理，收敛速度慢。因为我们只关心尾部的精确度，所以我们用帕累托曲线来近似尾部分布。

   我们使用公式4中的估计量，从http://portal.acm.org/citation.cfm?id=1647962.1648139计算与数据拟合的帕累托分布的参数

   这是:
 alpha_m = s / (ln (U (X) / Xm ^ n))
 其中s为我们所见过的已完成电路的总数，而

      U(X) = x_max^ U * Prod_s{x_i}
 x_i是我们第i个完成的电路时间，x_max是我们观察到的最长完成的电路构建时间，u是没有记录准确值的未观察到的超时次数，n是u+s，是超时或完成的电路总数。

   使用对数法则，我们计算这个作为日志的总和，以避免溢出和ln(1.0+epsilon)精度问题:
 alpha_m = s / (u * ln (x_max) + Sum_s {ln (x_i)} - n * ln (Xm))

   这个估计器与下面的参数密切相关:http://en.wikipedia.org/wiki/Pareto_distribution# parameter_estimate，只是它们被调整以处理我们的样本在超时截止时是正确审查的事实。

   此外，因为这不是真正的帕累托分布，所以我们改变Xm的计算方式。Xm参数被计算为最经常出现的50ms直方图库的中点，直到记录1000个电路的点为止。在此之后，使用顶部“cbtnummodes”(默认为3)中点模式的加权平均值作为Xm。所有低于这个值的时间都被计算为这个加权平均箱子的中点值。

   超时本身是通过使用Pareto分位数函数(反向CDF)来计算的，从而给出CDF上的值，使分布质量的80%低于超时值。

   因此，我们期望Tor客户端能够接受网络上路径总数中最快的80%。

2.4.2。要记录多少数据

   从我们的观察来看，合理配合的电路建造时间的最小数目似乎在100左右。然而，为了长期保持良好的适应，我们将1000个最新的电路构建时间存储在一个圆形阵列中。

   Tor客户端应该以每分钟一个的速度构建测试电路，直到构建100个电路。这允许新Tor在安装、升级或网络更改后1.5小时内估计电路构建超时(见下文)。

   超时以50ms bin宽度的柱状图存储在磁盘上，与上面计算Xm值所用的宽度相同。从磁盘读取后，该直方图必须重新洗牌，以在重启后保留旧值的适当过期。

2.4.3。如何记录超时

   应该允许通过超时阈值的电路继续构建，直到对应于帕累托曲线上的点“cbtclosequantile”(默认为95)的时间或60秒(以较大的时间为准)为止。

   这些电路的实际完成时间应该被记录下来。
   如果总构建时间超过这个阈值，实现应该完全放弃电路并记录一个“未知”超时值。

   这样做的原因是，如果超过5%的值被审查，右审查帕累托估计值就会开始失去准确性。
   由于我们希望将截止值设为20%，我们必须允许电路继续建造超过这个截止值的95%。

2.4.4。检测变化的网络状况

   我们尝试检测网络连接丢失和超时特征的急剧变化。

   我们假设我们已经失去了网络连接，如果电路超时，我们没有收到细胞或TLS握手自从电路开始。然后我们暂时停止计算超时，直到网络活动恢复。

   为了检测不断变化的网络条件，我们保存了成功完成至少一跳的过去20个电路的超时或非超时状态的历史。如果超过90%的电路超时，我们将丢弃所有构建时间历史记录，将超时重置为60，然后开始重新计算超时。

   如果超时已经达到60或更高，则将超时加倍。

2.4.5。控制行为的一致参数

   实现电路构建超时学习的客户端应该遵守以下控制行为的共识参数，以便我们能够处理由于客户端电路构建而产生的bug或其他突发行为。如果这些参数没有出现在协商一致中，则应该使用列出的默认值。
 cbtdisabled
        默认值:0
        最小值:0
        马克斯:1
        效果:如果是1，所有的电路构建时间学习代码应该被禁用，历史应该被丢弃。仅供紧急情况下使用。
 cbtnummodes
        默认值:3
        最小值:1
        马克斯:20
        效果:该值决定在Pareto参数Xm的加权平均计算中使用多少种模式。当值为3时，在理想情况下会引入一些偏差(CDF的2-5%)，但当客户端选择性能特征完全不同的保护节点时，则可以获得更好的性能。
 cbtrecentcount
        默认值:20
        分:3
        马克斯:1000
        效果:这是要跟踪以下选项的电路构建时间。
 cbtmaxtimeouts
        默认值:18
        分:3
        马克斯:10000
        效果:当在最后一次'cbtrecentcount'电路尝试中出现这么多超时时，客户端应该丢弃其所有历史记录，并开始学习新的超时值。
 cbtmincircs
        默认值:100
        最小值:1
        马克斯:10000
        效果:这是计算超时之前要构建的最小电路数量。
 cbtquantile
        默认值:80
        10分钟:
        马克斯:99
        效果:这是分位数曲线上用于设置超时值的位置。它是一个百分比(10-99)。
 cbtclosequantile
        默认值:95
        Min: cbtquantile参数的值
        马克斯:99
        效果:这是分位数曲线上用于设置用于实际关闭电路的超时值的位置。它是一个百分比(0-99)。
 cbttestfreq
        默认值:60
        最小值:1
        马克斯:2147483647 (INT32_MAX)
        效果:描述构建测试电路以收集超时值的频率(以秒为单位)。仅适用于记录的小于'cbtmincircs'。
 cbtmintimeout
        默认值:2000
        最小值:500
        马克斯:2147483647 (INT32_MAX)
        效果:这是允许的最小超时值，以毫秒为单位。
                最小值是防止四舍五入到0(我们每秒只检查一次)。
 cbtinitialtimeout
        默认值:60000
        Min: cbtmintimeout的值
        马克斯:2147483647 (INT32_MAX)
        效果:这是在计算超时之前使用的超时值，以毫秒为单位。
 cbtlearntimeout
        默认值:180
        10分钟:
        马克斯:60000
        效果:这是当cbt学习一个新的超时值时，空闲电路将保持打开的时间。
 cbtmaxopencircs
        默认值:10
        最小值:0
        马克斯:14
        效果:这是在电路构建时学习阶段，同时可以打开的最大电路数。

2.5。处理故障

   如果扩展电路的尝试失败(要么是因为第一次创建失败，要么是因为随后的扩展失败)，则电路将被拆除，不再挂起。(XXXX真的吗?)因此，挂起的电路可能支持的请求将不受支持，需要构造一个新的电路。

   如果流“begin”尝试失败并出现EXITPOLICY错误，则我们认为退出节点的退出策略没有得到正确的公告，因此在为该退出节点检索到新的描述符之前，我们将其视为不退出节点。

   任何一种类型的故障数量过多都可能表明对匿名性的攻击。有关如何处理过度故障，请参阅第7节。

3.将流连接到电路

   当一个电路可能支持一个请求被建立，Tor尝试附加请求的流到电路，并发送一个开始，BEGIN_DIR，或解析中继单元适当。如果请求未成功完成，Tor会考虑在闭合继电器单元中给出的原因。(XXX是的,?)


   当一个请求在SocksTimeout中保持独立后(默认为2分钟)，Tor会放弃这个尝试，并向客户端发送一个错误信号(例如，关闭SOCKS连接)。

   XXX超时，当Tor自动重试时。

    什么样的流程末端原因适合重新尝试。

   如果没有应答开始/解决，则流将超时并失败。

4. Hidden-service相关电路

  期望隐藏服务使用(客户端和隐藏端)

5. 警卫队节点

  我们使用保护节点(在研究文献中也称为“辅助节点”)来防止某些配置攻击。要了解我们的警卫选择算法(它已经变得相当复杂)，请参阅Guard -spec.txt。

5.1。如何一致的带宽权重因素进入进入警卫选择

  当加权一列路由器选择一个入口警卫，以下共识参数(从“带宽权重”线)适用:

      Wgg -处于警戒位置的警戒标志节点的重量
      Wgm -处于保护位置的非标记节点的重量
      Wgd -在保护位置的保护+被退出标记的节点的权重
      Wgb - begin_dir支持的监视标记节点的权重
      Wmb—支持begin_dir的非标记节点的权重
      支持begin_dir的导出标记节点的Web权重
      Wdb - begin_dir支持保护+输出标记节点的权重

  请参见dir-spec.txt中§3.4.1中的“带宽权重”，以获得对这些参数的更深入描述。

  如果路由器同时被标记为入口警卫和出口，那么我们更喜欢使用它，我们喜欢这样做(粗略地)线性增加w.r.t路由器的非警卫带宽和带宽重量(计算时没有考虑到警卫标志)。建议# 236:
 | |让Wpf表示重量从“bandwidth-weights”行|客户端将适用于N的位置p如果警卫|国旗,Wpn的重量,如果没有警卫旗,N和B |测量带宽的共识。然后，客户应该|按比例选择N到F*Wpf*B + (1-F)*Wpn*B，而不是按比例选择位置p的| N。
 式中，F为利用上述参数计算出的权重。

6. 服务器描述符的目的

  服务器描述符目前支持三种“用途”:通用、控制器和桥接。大多数描述符属于一般类型
  ——这些是共识中列出的，以及在一般情况下提取和使用的。

  控制器用途描述符是那些由控制器交付并按原样标记的描述符:它们将被保留(和普通描述符一样过期)，并且它们可以被控制器在其中使用
  CIRCUITEXTEND命令。否则Tor在选择路径时就会忽略它们。

  桥用途描述符用于作为桥的路由器。更多的设计解释或建议见doc/设计文件/block .pdf
  具体细节为125。目前，对于启用了UseBridges的Tor客户端，桥描述符被用来代替普通的入口守卫。

7. 通过保护节点检测路径操纵(路径偏差)

  路径偏置防御旨在防御一种路由捕获类型，在这种情况下，恶意防御节点故意失效或阻塞电路，使其扩展到无串通的出口节点，以使其网络利用率最大化，从而只承载折中流量。

  在极端情况下，这种攻击允许携带网络容量c/n的对手去匿名化网络连接的c/n，从而破坏了Tor原始威胁模型的O((c/n)^2)特性。它还允许针对特定用户、桥或保护节点的活动进行有针对性的攻击。

  可以在两个点上操作路径选择:构造期间和使用期间。在电路扩展步骤中，可以通过诱导电路故障来操纵电路构造，这将导致Tor客户端透明地用新路径重试电路构造。电路的使用可以通过滥用Tor的流重试特性来操纵(例如，在流超时过期之前拒绝客户端的流尝试响应)，此时，Tor客户端也会在新的路径上透明地重试流。

  因此，部署的防御系统对成功的路径使用进行了两组独立的测量:一组在电路构建期间，另一组在电路使用期间。

  客户端的预期行为是最终禁用对任何一种类型的过度电路故障负责的保安(见7.4节);然而，目前已知的Tor网络问题限制了防御在此阶段仅提供信息(见第7.5节)。

7.1。测量路径构建成功率

  客户端为他们的每个防护维护两个计数:一个电路通过该防护被扩展到至少两跳的次数，以及成功通过该防护完成的电路的数量。这两个数字的比率用来确定该保护的电路成功率。

  如果电路未能在95%的“右截”超时间隔之前完成，而不是在80%的超时条件之前完成，则将电路构建超时计算为构造故障(见第2.4节)。

  如果电路在施工后，但在客户要求关闭之前过早关闭，这被视为失败。

7.2。测量路径使用成功率

  客户端为它们的每个守卫维护两个使用计数:一个是尝试使用次数的计数，一个是成功使用次数的计数。

  使用尝试是指将流附加到电路上的任何尝试。

  使用成功状态由电路上的状态标志临时记录。
  保护使用成功计数不会增加直到电路关闭。如果我们在该电路上接收到预期用于当前电路用途的正确识别的中继单元，则该电路被标记为成功使用。

  如果后续流附件失败或超时，则清除电路的成功使用状态，再次将其视为仅尝试使用。

  在接近客户端时，仍然标记为使用尝试的所有电路将使用RELAY_BEGIN单元来探测，该单元构造为表单0.a.b的目的地。c:25，其中a.b.c是24位随机现时符。如果我们在响应中得到一个RELAY_COMMAND_END匹配我们的nonce，则该电路被视为成功使用。

  如果任何未识别的中继单元到达探针已经被发送后，电路被视为一个使用故障。

  如果流失败原因代码销毁，TORPROTOCOL，或内部被接收到响应任何流尝试，这样的电路不被探测，并被声明使用失败。

  过早闭合的电路不被探测，被视为使用故障。

7.3。扩展成功数

  为了提供最近守卫活动的移动平均值，同时仍然保持验证正确性的能力，我们通过将成功计数乘以0到1.0之间的比例因子，定期地“缩放”成功计数。

  当使用或构造尝试计数超过参数化值时，将执行扩展。

  为了避免在电路构造和使用过程中因缩放而产生的错误，当前开路电路在缩放前要从使用计数中减去，缩放后再加回。

7.4。参数化

   下面的共识参数调整了防守的各个方面。
 pb_mincircs
       默认值:150
       5分钟:
       效果:这是我们开始评估建造率之前必须完成至少2跳的最小电路数。

 pb_noticepct
       默认值:70
       最小值:0
       马克斯:100
       效果:如果电路成功率低于这个百分比，我们会发出一个通知日志消息。
 pb_warnpct
       默认值:50
       最小值:0
       马克斯:100
       效果:如果电路成功率低于这个百分比，我们会发出警告日志消息。
 pb_extremepct
       默认值:30
       最小值:0
       马克斯:100
       效果:如果电路成功率低于这个百分比，我们会发出一个更危言耸听的日志警告消息。如果pb_dropguard被设置为1，我们也会禁用这个守卫。
 pb_dropguards
       默认值:0
       最小值:0
       马克斯:1
       效果:如果电路成功率低于pb_extremepct，当pb_dropguard设置为1时，禁用该保护。
 pb_scalecircs
       默认值:300
       10分钟:
       效果:在这许多回路完成至少两跳之后，
               Tor执行7.3节中描述的缩放。
 pb_multfactor和pb_scalefactor
       默认值:1/2
       最小值:0.0
       马克斯:1.0
       效果:pb_multfactor/pb_scalefactor得到的双精度结果乘以我们当前的计数进行缩放。
 pb_minuse
       默认值:20
       分:3
       效果:这是我们开始评估建造率之前必须尝试使用的最小电路数。
 pb_noticeusepct
       默认值:80
       分:3
       效果:如果电路使用成功率低于这个百分比，我们会发出一个通知日志消息。
 pb_extremeusepct
       默认值:60
       分:3
       效果:如果电路使用成功率低于这个百分比，我们会发出警告日志消息。如果设置了pb_dropguard，我们也会禁用该守卫。
 pb_scaleuse
       默认值:100
       10分钟:
       效果:在我们尝试使用这么多电路之后，
               Tor执行7.3节中描述的缩放。

7.5。已知的执法障碍

  由于间歇性的CPU过载在继电器，正常的成功电路完成率是高度可变的。防御的守卫版本不太可能被部署，直到ntor电路握手被启用，或CPU过载导致的故障的性质被更好地理解。



x旧笔记

X.1。我们真的这么做吗?

如何处理网络故障。
  -当所有的助手都已关闭/无法到达，并且没有建立或正在进行的测试电路时，启动一个测试电路。(测试电路是一种特殊类型的电路，流不会意外地连接到它上。)
  -当测试电路成功时，标记所有助手并保持测试电路打开。
  -如果与助手的连接成功，关闭所有测试电路。
    否则，把那个助手记下来，再试试另一个。
  -如果最后一个助手被标记下来，并且我们已经建立了一个测试电路，那么将该测试电路的第一个跳添加到我们的助手节点列表的末尾，关闭该测试电路，然后回到起点。(实际上，与其关闭测试电路，我们能否将其转换为正常电路并立即开始使用?)
 我们真的做了上面的任何一项吗?如果是这样，让我们说明一下。如果没有，我们删除它。海里)

X.2。我们可以做一件事来处理可达性。

此外，它还为Nick的攻击提供了一个答案(“如果我选择我的辅助节点都在18.0.0.0:*上，那么我移动，您将知道我引导的位置”)——答案是选择您最初的三个辅助节点，而不考虑可达性。然后，上面的算法将为您添加更多可达的数据，如果您移动到某个地方，更有可能(尽管不确定)一些原始数据将变得有用。
这是聪明的还是复杂的?

X.3。我有点担心门卫的事。2006年6月,Nickm。

  两个用户不太可能拥有同一套入口警卫。
  观察一个用户就足以了解它的入口警卫。所以，当我们四处走动时，入口警卫使我们可链接。如果我们想改变保护时，我们的位置(IP?子网?)变化，我们有两个坏的选择。我们可以

    -放下老卫兵。但如果我们回到原来的位置，我们就不用原来的守卫了。对于一台有时在工作中使用，有时在家使用的笔记本电脑来说，这是相当致命的。
    -记住与旧地点有关的旧守卫，如果我们回到旧地点，请再次使用它们。这将是很糟糕的，因为它将迫使我们记录我们所处的位置。
 我们现在做这些吗?如果没有，应该改为099-misc或
  098 -待办事项。海里)
