

                    Tor共享随机子系统规范

的共享随机子系统
Tor的作品。这个文本以前是提案250-commit-reveal- agree .txt。

   表的内容:

      1. 介绍
         1.1。动机
         1.2。以前的工作
      2. 概述
         2.1。介绍我们的“提交-展示”协议
         2.2。从一万英尺的高空俯瞰议定书
         2.3。我们如何使用共识[反对意见]
            2.3.1。在一致性中插入共享的随机值
         2.4。协议的持久状态[状态]
         2.5。协议说明
      3.协议
         3.1承诺阶段【承诺阶段】
            3.1.1。承诺阶段投票
            3.1.2。承诺阶段的持久状态
         3.2显示相
            3.2.1之上。揭牌阶段投票
            3.2.2。显示阶段的持久状态[STATEREVEAL]
         3.3。共享随机值计算在00:00UTC
            3.3.1。共享随机计算[SRCALC]
         3.4。引导程序
         3.5。重新启动目录权限[重新启动]
      4. 规范(规范)
         4.1。投票
            以下4.4.1。计算承诺和揭示[COMMITREVEAL]
            4.1.2。验证承诺并揭示[validatevalvalues]
            4.1.4。在投票中提交/显示值[COMMITVOTE]
            4.1.5。共享随机值[SRVOTE]
         4.2。在consensus中编码共享随机值[SRCONSENSUS]
         4.3。持久状态格式
      5. 安全分析
         5.1。提交-披露和未来方向的安全性
         5.2。在揭示阶段预测共享随机值
         5.3。分区的攻击
            5.3.1。提交阶段中的分区攻击
            5.3.2。显示阶段中的分区攻击
      6. 讨论
         6.1。为什么提案225增加了复杂性?
         6.2。为什么你要在24轮会议中进行“提交-透露”?
         6.3。为什么我们不能恢复如果00:00UTC共识失败?
      7. 确认


1. 介绍

1.1。动机

   对于下一代的hidden services项目，我们需要Tor网络每天以一种无法提前预测或被攻击者影响的方式产生一个新的随机值。

   目前，我们需要这个随机值来使HSDir哈希环不可预测(#8244)，这将解决一个广泛的隐藏服务类
   DoS攻击，应该会让人们更难判断目标隐藏服务的流行程度和活动。此外，该随机值可用于其他需要新的全局随机性的系统，如
   tor相关协议(例如，onion)或者甚至是非tor相关的协议(例如，warrant canaries)。

1.2。以前的工作

   提案225指定了一个提交-揭示协议，它可以作为外部脚本运行，并将结果提供给目录权威机构。
   但是，目录权威操作人员在运行打开TCP端口并接受来自Internet的连接的第三方脚本时感到不安全。
   因此，这个提议的目的是在Tor投票过程中嵌入“提交并公开”的思想，这将使部署和维护更加顺畅。

2. 概述

   这个提议改变了Tor共识协议，这样一个随机数是在定期投票过程中由目录权威产生的每午夜。分布式随机发生器方案是基于提交-显示技术。

   该提案还详细说明了如何将最终共享随机值嵌入到共识文档中，以便需要它的客户端能够得到它。

2.1。介绍我们的“提交-展示”协议

   每天，在00:00UTC投票达成一致意见之前，每个权威产生一个新的随机值，并保持一整天。权威以密码学的方式散列随机值，并调用输出的“承诺”值。原始随机值称为“显示”值。

   其思想是，给定一个揭示值，您可以通过加密方式确认它对应于一个给定的承诺值(通过散列处理它)。然而，给定了承诺值，您不应该能够推导出潜在的揭示值。这些值的构造在[COMMITREVEAL]部分中指定。

2.1。从一万英尺的高空俯瞰议定书

   我们的“提交-揭示”协议旨在每天00:00UTC产生一个新的共享随机值。最后一个新的随机值此时嵌入到consensus文档中。

   我们的协议分为两个阶段，采用Tor的小时投票程序。
   每个阶段持续12个小时，这意味着在此期间有12轮投票。简而言之，协议的工作原理如下:

      提交阶段:

        从00:00:00开始，在长达12个小时的时间里，当局每小时都在投票中包含他们的承诺。如果可能的话，还包括从其他当局收到的承诺。

      揭示阶段:

        12:00UTC开始显示，并持续到00:00UTC结束协议。在这一阶段，当局必须披露他们在前一阶段承诺的价值。其他权威机构的承诺和披露的价值，如果可以的话，也会被加入投票。

      共享随机性的计算:

        在00:00UTC，从约定的显示值中计算共享随机值，并添加到共识中。

   这结束了每天00:00UTC的“提交-透露”协议。

2.3。我们如何使用共识[反对意见]

   生成的共享随机值需要对客户端随时可用。为此，我们将它们列入协商一致文件。

   每个小时的共识文档需要包含当天的共享随机值，以及前一天的共享随机值。这是因为根据提案224中的[时间重叠]部分，在给定的时间内，Tor客户端访问隐藏服务可能需要这些值中的任何一个。这意味着这两个值也需要包含在投票中。

   因此，共识必须包括:
 (a)当前期间的共享随机值。(b)前一时间段的共享随机值。

   为此，需要一个新的SR共识方法来表明哪些权威机构支持这个新协议。

2.3.1。在一致性中插入共享的随机值

   在投票发生后，我们需要小心选择哪些共享随机值(SRV)放入共识中，以避免因为当局对提交-披露协议有不同的看法(因为他们可能错过了一些协议)而破坏共识。

   出于这个原因，当局在达成共识之前会查看收到的选票，并采用以下逻辑:

   -首先，他们确保agree upon consensus方法高于SR consensus方法。

   -当且仅当SRV得到至少多数权威机构的投票通过时，权威机构才将SRV纳入共识。

   -对于00:00UTC的一致意见，权威机构在一致意见中包含SRV，当且仅当SRV已经被至少AuthDirNumAgreements权威机构投票(其中AuthDirNumAgreements是一个新引入的共识参数)。

   当局在共识中包括最流行的SRV，它也满足上述约束。否则，不应包括SRV。

   上述逻辑是为了使通过自然分配原因来打破共识变得更加困难。

   我们使用AuthDirNumAgreements consensus参数来强制要求在SRV创建期间，有_supermajority_的dirauths支持SR协议，这样即使其中一些dirauths在运行过程中离线，SR协议也不会受到干扰。为了确保这一点，我们付出了额外的努力，因为在中午更改srv会给隐藏的服务客户端带来可怕的可达性后果。

2.4。协议的持久状态[状态]

   目录权威需要在正在运行的协议的磁盘上保持一个持久的状态。这允许一个权限在重新启动时无缝地加入协议。

   在承诺阶段，它包含所有权威机构的承诺。然后在显示阶段，显示值也存储在状态中。

   如前所述，当前和以前时间段的共享随机值如果可用，也必须始终处于状态。

2.5。协议说明

   为了更好地理解该协议，可以在这里找到说明:
 https://people.torproject.org/~asn/hs_notes/shared_rand.jpg

   它读取从左到右。

   插图显示了当局(A_1, A_2, A_3)投的票。链'A_1 -> c_1 -> r_1'表示authority A_1提交给c_1，而c_1对应于揭示值r_1。

   插图只描述了整个协议的几个回合。它从提交阶段的前三轮开始，然后跳到提交阶段的最后一轮。它继续进行揭示阶段的前两轮，然后跳到协议运行的最后一轮。最后显示了下一个协议运行(00:00UTC)的提交阶段的第一轮，其中计算最终共享随机值。在我们的虚构示例中，SRV是由3个权威机构贡献计算的，其值为“a56fg39h”。

   我们建议您在阅读完整个文档后再重新阅读该文档。

3.协议

   在本节中，我们将给出协议的详细说明。我们描述协议参与者的逻辑和他们发送的消息。消息的编码将在下一节([SPEC])中指定。

   现在我们来看看协议的各个阶段:

3.1。承诺阶段(COMMITMENTPHASE)

   提交阶段从00:00UTC持续到12:00UTC。

   在此阶段，一个机构在其投票中提交一个值，并将其保存为永久状态。

   权限还将其他权限接收的权威提交保存为永久状态。如果爱丽丝的投票中包含了这一承诺，我们就称它为“权威的”。

3.1.1。承诺阶段投票

   在提交阶段，每个机构的投票包括:

    -此协议运行的承诺值。
    -从其他当局收到的任何权威性承诺。
    -以前协议产生的两个共享随机值(如果有)。

   提交阶段持续12个小时，因此授权机构有多个机会提交它们的值。在提交阶段的后续一轮中，一个权限不能提交第二个值。

   如果一个权威机构在同一提交阶段发布了第二个承诺值，那么其他权威机构只应该考虑第一个承诺。任何随后的承诺都必须被忽略。

3.1.2。承诺阶段的持久状态

   在提交阶段，权威机构将从每个权威机构收到的权威提交保存在其持久状态。在给定的时间内，每个权限只有一次提交必须被视为受信任和活动的。

3.2。揭示阶段

   显示阶段从12:00UTC持续到00:00UTC。

   既然各方已经就承诺达成一致，现在是有关当局公布其随机价值的时候了。

3.2.1之上。揭牌阶段投票

   在公开阶段，每个权威机构的投票包括:

    -在提交阶段之前提交的显示值。
    -从其他当局收到的所有承诺和披露。
    -以前协议产生的两个共享随机值(如果有)。

   承诺的集合已经在承诺阶段确定，并且必须保持不变。如果某个权威机构试图在揭示阶段更改其承诺或引入新的承诺，则必须忽略新的承诺。

3.2.2。显示阶段的持久状态[STATEREVEAL]

   在揭示阶段，权威机构将从提交阶段开始的权威提交保持在持久状态。它们还保存与权威提交相对应且有效的任何已接收的揭示(如[VALIDATEVALUES]中指定的)。

   一个权威刚刚从另一个权威的投票中获得了揭示价值，
   必须等到下一轮投票时，才能将揭示价值纳入投票。

3.3。共享随机值计算在00:00UTC

   最后，在每天的00:00:00，权威机构计算一个新的共享随机值，这个值必须加入到共识中，以便客户使用它。

   权威机构使用[SRCALC]中规定的显示值在其状态下计算共享随机值。

   当局在00:00UTC开始将这个新的共享随机值包括在他们的投票中，取代之前运行的两个协议中的一个。当局也开始在共识中包括这个新的共享随机值。

   除此之外，有关当局会在00:00UTC正常进行投票，就像他们在承诺阶段的第一轮投票一样(章节[承诺阶段])。

3.3.1。共享随机计算[SRCALC]

   想要获得共享随机值SRV的权威机构，应该使用该时间段的适当揭示值，并按如下方法计算SRV。

      hashed_reveal = H(ID_a | R_a | ID_b | R_b | .)

      SRV = SHA3-256(“共享-随机”| INT_8(REVEAL_NUM) | INT_4(版本)|
                     HASHED_REVEALS | PREVIOUS_SRV)
 其中ID_a值为权限‘a’的标识键指纹，R_a为该权限在当前时期对应的揭示值。

   另外，REVEAL_NUM是这个构造中显示的值的数量，
   VERSION是协议版本号，PREVIOUS_SRV是之前共享的随机值。如果以前没有共享随机值，则
   PREVIOUS_SRV被设置为32 NUL (\x00)字节。

   为了在hashed_reveal中保持一致的顺序，所有ID_a | R_a对都是基于R_a值的升序排序的。

3.4。引导程序

   正如在[缺点]中所描述的，HSDir覆盖期间需要两个共享的随机值才能正常工作，如提案224中所述。因此，在系统完全启动之前，客户不能使用这个系统的随机性;也就是说，直到一致意见中包含两个共享的随机值为止。这应该在3点00分时达成一致意见后进行，这需要48小时。

3.5。重新启动目录权限[重新启动]

   共享随机协议必须能够支持在协议执行过程中离开或加入的目录权限。

   在提交阶段提交然后离开的机构必须将其reveal值存储在磁盘上，这样，如果它在reveal阶段之前或期间返回，它就可以继续参与协议。显示的值
   必须存储时间戳，以避免发送它在错误的协议运行。

   一个错过了提交阶段的机构不能再提交，因此它不能参与到该运行的协议中。对于那些错过了透露阶段的权威来说也是如此。没有参与该议定书的当局仍应在其投票中提交和披露他人的行为。

   最后，授权机构必须以这样一种方式实现它们的持久状态，即它们永远不会在运行的同一协议中提交两个不同的值，即使它们必须在中间重新启动(假设它们的持久状态文件被保存)。一种构造持久状态的建议方法可以在[STATEFORMAT]中找到。

4. 规范(规范)

4.1。投票

   本节描述承诺、揭示和SR值是如何在投票中编码的。我们描述了如何对权威机构自己的承诺/揭示以及从其他权威机构收到的承诺/揭示进行编码。承诺和揭示是同一条线，但是揭示是可选的。

   参与的当局需要包括以下内容:
 “shared-rand-participate”
 以投票的形式宣布他们参加议定书。

以下4.4.1。计算承诺和揭示[COMMITREVEAL]

   希望参与该协议的目录权威机构需要为每次协议运行创建一对新的承诺/揭示值。当局应在当天的第一个承诺阶段之前(00:00:00协调世界时)生成新的一对这样的值。

   所揭示的值计算如下:

      REVEAL = base64-encode(时间戳|| H(RN))
 其中RN是一个256位随机值的SHA3散列值。我们对随机值进行散列，以避免将原始字节从PRNG暴露给网络(参见[RANDOM-REFS])。

      TIMESTAMP是一个8字节的网络端time_t值。权威机构应该将时间戳设置为他们首先计划发布其提交的投票文件的有效后时间(所以通常是在00:00UTC，除非他们在稍后的提交回合启动)。

   COMMIT值的计算方法如下:

      提交= base64编码(时间戳|| H(REVEAL))

4.1.2。验证承诺并揭示[validatevalvalues]

   对于提交消息和揭示消息，应该可以验证它们是否确实对应。为此，客户端提取随机值
   将显示消息中的H(RN)散列，并将其与提交消息中的H(H(RN))进行比较。如果比较成功，我们称COMMIT和REVEAL消息对应。

   Pariticipants还必须检查相应的COMMIT和REVEAL值是否具有相同的时间戳值。

   权威机构应该在揭示阶段忽略与提交阶段发布的提交值不对应的揭示值。

4.1.4。在投票中提交/显示值[COMMITVOTE]

   一个权威对它所做的承诺进行投票，并披露它从其他权威那里得到的和看到的。为此，它在表决中包括下列各项:
 “共享rand- COMMIT”SP版本SP ALGNAME SP身份提交
 VERSION是创建提交时使用的协议的版本。
   身份是权威的SHA1身份指纹，提交是经过编码的COMMIT [COMMITREVEAL]。在显示阶段的权限还可以选择包括一个编码的显示值显示。每个权威机构只能有一行，否则投票将被视为无效。最后,
   ALGNAME是应该用于计算提交和的哈希算法
   揭示哪个是版本1的“sha3-256”。

4.1.5。共享随机值[SRVOTE]

  权威机构包括一个共享的随机值(SRV)在他们的投票使用以下编码的前一个和当前值分别:
 “shared- lang - before - VALUE”SP num_reveal SP VALUE NL“shared- lang -current- VALUE”SP num_reveal SP VALUE NL
 其中VALUE是用十六进制编码的实际共享随机值(在[SRCALC]部分中指定计算)。num_reveal是用于生成这个SRV的reveal值的数量。

  为了保持一致的排序，应将前一期间的共享随机值列在当前期间的值之前。

4.2。在consensus中编码共享随机值[SRCONSENSUS]

   权威机构按照[SRVOTE]中相同的编码格式在一致性中插入两个活动共享随机值。

4.3。持久状态格式

   作为在协议中保持ground truth状态的一种方法，权威机构必须保持协议的持久状态。下一节建议此状态的格式与当前状态文件格式相同。

   它包含一个序言、承诺和揭示部分以及一个共享随机值列表。

   序言(或标题)包含以下项目。它们必须按照这里给出的顺序出现:
 "版本" SP版本NL
 (一开始，就一次。)

        文档格式版本。对于该规范，版本为“1”。
 “有效直到”SP YYYY-MM-DD SP:MM:SS NL
 (完全一次)

        在此之后，此状态过期，不应该使用或信任。有效期是到当前协议运行结束为止(即将到来的中午)。

   下面详细介绍了承诺和揭示部分。它们的编码与投票中的编码相同。这使得它更容易实现。
 “提交”SP版本SP algname SP身份提交[SP揭示]NL
 [每个权威机构只一次]

        这些值与[COMMITVOTE]中详细说明的值相同。

        权限也使用这一行来存储自己的值。

   最后是共享随机值部分。
 “SharedRandPreviousValue”SP num_reveal SP value NL
 (最多一次)

        这是前一阶段约定的前一个共享随机值。字段与[SRVOTE]部分中的相同。
 "SharedRandCurrentValue" SP num_reveal SP value NL
 (最多一次)

        这是最新的共享随机值。字段与[SRVOTE]部分中的相同。

5. 安全分析

5.1。提交-披露和未来方向的安全性

   提交-显示协议的安全性是众所周知的，但也存在一定的缺陷。基本上，协议是不安全的，在某种程度上，控制当局b的对手可以从2^b的结果中选择协议的结果。然而，一个不是肮脏的攻击者根本不能影响比赛的结果。

   我们相信这个系统提供了足够的安全，特别是与目前的情况相比。更安全的解决方案需要更高级的加密和更复杂的协议，因此目前看来这是一个可以接受的解决方案。

   下面是一些未来可能发展方向的例子:
   -基于阈值签名的方案(如[HOPPER])
   - Lenstra等人的独角兽方案[Unicorn]
   -基于可验证延迟函数的方案[VDFS]

   更多关于协作随机数生成的替代方法请参见[RNGMESSAGING]。

5.2。在揭示阶段预测共享随机值

   揭示阶段持续12个小时，大多数权威机构将在揭示阶段的第一轮发送他们的揭示值。这意味着攻击者可以在共享随机值生成前12小时左右预测它。

   这对HSDir哈希环没有问题，因为我们对HSDir节点施加了更高的正常运行时间限制，所以12小时的可预测性不是问题。

   使用这个系统中的共享随机值的任何其他协议都应该知道这个属性。

5.3。分区的攻击

   这种设计不能避免某些分区攻击。我们认为，它们不会给攻击者带来太多好处，因为它们很容易被发现，但很难实现，因为攻击者至少需要危及目录权威。而且，由于拜占庭式的普遍问题，很难(在某些情况下甚至不可能)保护所有这些攻击。尽管如此，本节将描述所有可能的分区攻击以及如何检测它们。

5.3.1。提交阶段中的分区攻击

   恶意目录权限只能将其提交发送给一个权限，这将导致该权限有一个额外的提交值用于共享随机计算，而其他权限没有。由于共识需要多数，这不会影响最终的SRV值。但是，当SRV被计算时，使用这种攻击的攻击者可以在24:00时从协商一致决策中删除单个目录权限。

   攻击者还可以通过在提交阶段向不同的权限发送两个不同的提交值来对权限进行分区。

   所有这些都很容易检测。来自于一个权威的投票中的承诺价值不应该在不同的权威之间有所不同。如果是这样的话，这意味着攻击正在进行或者是非常糟糕的错误(非常不可能)。

5.3.2。显示阶段中的分区攻击

   让我们考虑一下Alice，一个恶意的目录权威。爱丽丝可以等到最后一轮，向一半的权威人士透露它的价值。这将把当局分成两组:一组认为共享随机值应该包含这一新披露，另一组则不知情。这将导致一个平局和两个不同的共享随机值。

   类似的袭击是可能的。例如，在揭示阶段结束前两轮，爱丽丝只能向一半的dirauths宣传她的揭示价值。这样，在最后一轮揭示阶段，一半的dirauths将在他们的投票中包含揭示价值，而其他的将不包含。在揭示阶段的最后，一半的dirauths将计算一个不同于其他人的共享随机值。

   我们声称这种攻击并不是特别有效:Alice最终有两个共享的随机值可供选择，这也是提交-揭示协议的一个基本问题(因为最后一个人总是可以中止或揭示)。攻击者也可以破坏共识，但在当前的投票系统中还有其他方式可以做到这一点。

   此外，我们声称，这种攻击是非常嘈杂和可察觉的。
   首先，它需要权威去破坏两个会引起相当大的噪音的共识。此外，当局需要向不同的授权机构发送可检测到的不同投票。与提交阶段攻击一样，这里的检测是确保来自一个权威机构的投票中的commiment值对于每个权威机构总是相同的。

6. 讨论

6.1。为什么提案225增加了复杂性?

   这个建议和prop225之间的复杂性差异部分是因为prop225没有指定共享随机值如何到达客户机。这个建议花费了大量的精力来指定这两个共享的随机值如何总是可以让客户端随时访问。

6.2。为什么你要在24轮会议中进行“提交-透露”?

   读者可能想知道为什么我们要将协议跨越一整天(24小时)，而只有3轮就足以产生一个共享的随机值。

   我们决定这样做，因为我们依靠Tor投票协议，这也是每小时都会发生的。

   我们可以只从每天21:00到00:00执行共享随机协议。或者一天做几次。

   然而，我们决定，既然共享的随机值无论如何都需要出现在每一个共识中，那么承担承诺/揭示也将不是一个大问题。同样，这样我们给失败的dirauth更多的机会来恢复和重新加入协议。

6.3。为什么我们不能恢复如果00:00UTC共识失败?

   如果00:00UTC共识失败，那么一整天都不会有共享的随机值。理论上，我们可以通过在01:00UTC计算当天的共享随机性来恢复。但是，添加这种恢复逻辑的工程问题太大了。例如，对于一个刚刚启动的权威来说，要了解一个特定的共识是否没有被建立起来并不容易。

7. 确认

   感谢每一个对这个设计做出贡献的人的反馈和讨论。

   感谢arma, ioerror, kernelcorn, nickm, s7r, Sebastian, teor, weasel和其他人!

引用:
 (RANDOM-REFS): http://projectbullrun.org/dual-ec/ext-rand.html https://lists.torproject.org/pipermail/tor-dev/2015-November/009954.html
 (RNGMESSAGING): https://moderncrypto.org/mail-archive/messaging/2015/002032.html
 (料斗):https://lists.torproject.org/pipermail/tor-dev/2014-January/006053.html
 (独角兽):https://eprint.iacr.org/2015/366.pdf
 (氟乙烯):https://eprint.iacr.org/2018/601.pdf
