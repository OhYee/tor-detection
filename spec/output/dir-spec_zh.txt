

                      Tor目录协议，版本3

0. 范围和预赛

   Tor 0.2.0版本使用这个目录协议。x-alpha后来。
   请参阅dirl -spec-v1.txt以了解使用的协议
   0.1.0。x系列和dir-spec-v2.txt提供关于0.1.1所使用的协议的信息。x和0.1.2。x系列。

   本文件合并并取代下列建议:

       在Tor目录系统上投票
       从常用的签名密钥中分离身份密钥
       104个长和短路由器描述符

   XXX时间表
   填写XXX

      “必须”、“不得”、“必须”、“应当”、“应当”等关键词
      本文档中的“不”、“应该”、“不应该”、“推荐”、“可能”和“可选”将按照中描述的方式解释
      RFC 2119。

0.1。历史

   洋葱路由的最早版本附带了一个已知路由器及其密钥列表。当路由器的集合改变时，用户需要获取一个新的列表。

   版本1目录协议
   --------------------------------

   Tor(0.0.2)的早期版本引入了“目录权限”:服务于包含签名的“目录”文档的服务器，这些文档包含签名的“服务器描述符”列表，以及每个路由器状态的简短摘要。因此，客户端可以自动获得关于网络状态的最新信息，并确保他们获得的列表是由可信的目录权威认证的。

   后来的版本(0.0.8)增加了目录缓存，用于从权威机构下载目录并将其提供给客户端。非缓存从缓存中获取信息，而不是从权限中获取信息，从而分散带宽需求。

   在版本1目录协议中还添加了“路由器状态”文档:只列出网络上路由器的上/下状态的短文档，而不是所有描述符的完整列表。客户端和缓存取回这些文档的频率要比它们取回完整目录的频率高得多。

   版本2目录协议
   --------------------------------

   在Tor期间是0.1.1。x系列，Tor修改了它的处理目录文档，以解决两个主要问题:

      *目录变得相当大(超过1MB)，大多数目录下载主要由客户端已经拥有的服务器描述符组成。

      *每个目录权威都是信任的瓶颈:如果单个目录权威撒谎，它会让客户在一段时间内认为Tor网络的视图是任意扭曲的。(客户端信任他们下载的最新签名文档。)因此，增加权限只会使系统更不安全，而不是更安全。

   为了解决这些问题，我们扩展了目录协议，使得当局现在可以发布经过签名的“网络状态”文档。对于网络中的每一个路由器，每个网络状态都被列出:它的身份密钥的散列，它最近描述符的散列，以及权威机构对它的状态的总结。客户将依次下载有关当局的网络状态文件，并相信有关路由器的声明，如果这些文件得到了超过一半的当局的证实。

   客户机并没有一次下载所有服务器描述符，而是只下载它们没有的描述符。描述符根据其摘要建立索引，以防止恶意缓存将不同版本的服务器描述符提供给不同的客户端。

   路由器开始努力工作，只有在其内容发生实质性变化时才上传新的描述符。


0.2。版本3协议的目标

   Tor目录协议的版本3尝试解决以下问题:

      *用于传输服务器描述符的大量带宽被两个不被Tor路由器实际使用的字段(即读历史和写历史)所使用。通过将它们移到一个单独的文档中，我们可以节省大约60%，而大多数客户端都不会获取或使用这个文档。

      *在某些不正常的情况下，客户端可能会下载一组不寻常的网络状态文档，从而将自己与拥有最新和/或典型文档集的客户端分隔开。即使在最好的情况下，客户对他们下载的网络状态文档的年龄也很敏感。因此，我们没有让客户关联多个网络状态文档，而是让权威机构集体投票决定一个统一的网络状态文档。

      *整个网络中最敏感的数据(目录权威的身份密钥)需要不加密存储，以便权威机构可以动态地签署网络状态文档。
        现在，当局的身份密钥被离线存储，并用于认证可旋转的中期签名密钥。

0.3。一些剩余的问题

   我们可以在v3的时间框架内解决的事情:

     SHA-1哈希显示了它的年龄。我们应该对我们对它的依赖做点什么。在这次修订中，我们也许可以避免将来发生的情况，至少就当局提供的文件而言是这样。

     太多有关当局的事情都被IP硬编码了。

     也许我们也应该开始接受更长的路由器身份密钥。

   最终要解决的问题:

     要求每一个客户都知道每一个路由器不会永远有效。

     要求每个目录缓存知道每个路由器不会永远伸缩。


1. 大纲

   有一小组(大约5-10个)半可信的目录权限。Tor软件附带了默认的权限列表。用户可以更改此列表，但建议不要这样做，以避免分区攻击。

   每个权威机构都有一个非常秘密的、长期的“权威身份密钥”。
   它被加密和/或离线存储，用于签署“密钥证书”文档。每个密钥证书包含一个中期(3-12个月)“权限签名密钥”，由权限机构用于对其他目录信息进行签名。(请注意，权威机构身份密钥与作为普通路由器的权威机构所使用的路由器身份密钥是不同的。)

   路由器定期向目录权威上传签名的“路由器描述符”，描述它们的密钥、功能和其他信息。路由器也可以上传签名的“额外信息文档”，其中包含Tor协议不需要的信息。
   目录权限提供服务器描述符，这些描述符由路由器标识或描述符散列索引。

   路由器可以作为目录缓存，以减少目录权威的负载。他们在他们的描述中宣布了这一点。

   每个目录权限定期生成已知路由器的当前描述符和状态视图。他们将这一观点的签名摘要(“地位投票”)发送给其他当局。当局会计算这次投票的结果，并签署一份包含投票结果的“共识状态”文件。

   目录缓存下载、缓存和重新服务一致文档。

   客户端、目录缓存器和目录授权器都使用一致文档来确定它们的路由器列表何时过期。(目录权限也使用投票状态。)如果是，他们下载任何丢失的服务器描述符。客户端从缓存中下载丢失的描述符;缓存和权限从权限下载。
   描述符是通过描述符的散列来下载的，而不是通过中继的身份密钥下载的:这可以防止目录服务器通过向客户机提供其他人不使用的描述符来攻击客户机。

   所有目录信息都是通过HTTP上传和下载的。

1.1。与版本2有什么不同?

   客户端用来下载多个网络状态文档，大致相当于上面的“状态投票”。他们会计算客户端的投票结果。

   当局过去使用与路由器角色相同的私钥来签署文件。这迫使他们在内存中保持这些极其敏感的密钥不加密。

   以前，extra-info文档中的所有信息都保存在主描述符中。

1.2。文档meta-format

  服务器描述符、目录和运行路由器文档都遵循以下轻量级可扩展信息格式。

  最高级别的对象是文档，它由一个或多个对象组成
  物品。每个项目都以一个关键字开头，后面跟着零或更多
  对象。关键字行以关键字开始，后面可选跟着空格和更多的非换行字符，然后以换行符结束。一个
  关键字是集合[a- za -z0-9-]中的一个或多个字符的序列，但不能以-开头。
  对象是以伪隐私增强邮件(PEM)格式编码的数据块:也就是说，可以通过插入ascii换行符(“LF”，也称为换行符，或“NL”)来包装编码的数据行(cf. RFC 4648§3.1)。换行时，实现必须以64个字符换行。在解码时，实现必须忽略并丢弃所有换行符。

  更正式地:

    NL = ascii LF字符(十六进制值0x0a)。
    文件::=(项目| NL)+
    = KeywordLine对象*
    关键字::=关键字NL |关键字WS ArgumentChar+ NL
    关键字字符*
    关键字::= 'A'…'Z' | 'a'…'z' | '0'…“9”
    KeywordChar::= KeywordStart | '-'
    ArgumentChar::=除NL以外的任何打印ASCII字符。
    WS = (SP | TAB)+
    对象::= BeginLine base64 -已编码-data结束行
    BeginLine  ::= "----- 开始”关键字(“”字 )* "-----" 问
    EndLine  ::= "----- 端”关键字(“”字 )* "-----" 问

    关键字可能不是“——BEGIN”。

    对象的起始线和结束线必须使用相同的关键字。

  在解释文件时，软件必须忽略任何以不认识的关键字开头的关键字;未来的实现不能要求当前的客户端理解任何当前未描述的关键字。

  其他想要扩展Tor目录格式的实现可能会引入它们自己的项。扩展项的关键字应该以字符“x-”或“x-”开头，以保证它们不会与Tor未来版本使用的关键字冲突。

  在下面的文档描述中，我们用方括号中的多样性标记项目。可能的标签:
 “start, exactly one”:这些项必须在文档类型的每个实例中出现，而且必须恰好出现一次，并且必须是它们文档中的第一项。
 “恰好一次”:这些项在文档类型的每个实例中必须恰好出现一次。
 “At end, exactly one”:这些项必须在文档类型的每个实例中出现，而且必须出现一次，而且必须是它们文档中的最后一项。
 “最多一次”:在该文档类型的任何实例中，这些项可能出现零次或一次，但不能出现超过一次。
 “任意数字”:在文档类型的任何实例中，这些项可能出现零次、一次或多次。
 “一次或多次”:在文档类型的任何实例中，这些项必须至少出现一次，而且可能出现更多。

   为了向前兼容，除非另有说明，否则每个项都必须允许在行末添加额外的参数。因此，如果一个项目的描述如下:
 “东西”，int int NL
 那么实现也应该接受这个字符串:
 "东西5 9 11 13 16 12" NL
 但不是这个字符串:
 “5”问
 而不是这个字符串:
 “事情5 10事情”

   每当一个项不允许额外参数时，我们将用“不允许额外参数”标记它。

1.3。签署文件

   下面的每个可签名文档都以类似的方式签名，使用给定的“初始项”、最终的“签名项”、摘要算法和签名密钥。

   初始项必须是文档中的第一项。

   签字项格式如下:
 <签名项关键字> [arguments

   “签名”对象包含整个文档PKCS#1 1.5填充摘要的签名(使用签名键)，该签名从初始项开始，通过签名后的换行获得
   项的关键字及其参数。

   签名不包括PKCS #1中指定的algorithmIdentifier。

   除非另外指定，该摘要算法是SHA-1。

   所有文档都是无效的，除非使用正确的签名密钥。

   除非另有说明，文件的“摘要”是由本签名方案*签署的文件摘要*。

1.4。投票时间表

   每个共识文件都有一个“生效后”(VA)时间、一个“更新后”(FU)时间和一个“生效后”(VU)时间。VA必须在FU之前，FU必须反过来在VU之前。时间的选择使每一个共识都是“新鲜的”，直到下一个共识生效，并在之后一段时间内“有效”。在任何时候，至少有3个共识是有效的。

   达成共识的时间表如下:

   当局交换选票。每个当局把他们的投票上传到其他所有当局。

   VA-DistSeconds-VoteSeconds/2:当局试图下载他们没有的选票。

   在此之后，权威机构也应该拒绝其他权威机构试图上传的任何投票。(0.4.4.1-alpha是第一个以这种方式拒绝投票的版本。)

      注意:拒绝延迟上传选票会将意见分歧的可能性降至最低，特别是在当局面临带宽压力的情况下。如果一个当局在努力上传其投票结果，并最终在此期间上传给一小部分的当局，他们将计算出一个不同于其他人的共识。在此之后拒绝上传投票，我们增加了大多数权威使用相同投票集的可能性。

      拒绝晚上传的选票并不能完全解决这个问题。如果一些当局能够下载一份特定的选票，而另一些却无法下载，那么可能仍然存在共识分歧。然而，这一变化确实消除了共识分歧的一个常见原因。

   VA-DistSeconds:权威机构计算共识并交换签名。(这是任何人要求达成共识的最早阶段。)

   VA-DistSeconds/2:当局试图下载他们没有的任何签名。

   VA:所有的权威都有一个多重签署的共识。

   弗吉尼亚州……傅:缓存下载共识。(注意，由于缓存只有在下载了一致意见后才能知道VA和FU是什么，因此它们假设当前一致意见的VA等于前一个一致意见的FU，而且它的FU是在那之后的一个间隔。)

   傅:这个共识不再是最新鲜的共识了。

   傅……(当前共识的VU):客户端下载共识。(见上表注:客户猜测下一个共识的FU将在当前VA之后的两个间隔时间。)

   VU:共识不再有效;客户应该继续尝试下载一个新的共识，如果他们还没有这样做。

   VU + 24小时:客户将不再使用一致意见。

   votesecseconds和DistSeconds必须分别至少为20秒;FU-VA和
   每次必须至少5分钟。

2. 路由器操作和格式

2.1。上传服务器描述符和附加信息文档

   当发生以下事件时，ORs应该生成一个新的服务器描述符和一个新的extra-info文档:

      -从上次生成描述符到现在已经过去了一段时间(默认为18小时)。

      -除了带宽或正常运行时间之外的描述符字段发生了变化。

      它的正常运行时间小于24小时，带宽与上次生成描述符时相比改变了2倍，并且从那时起至少过了一个给定的时间间隔(默认为3小时)。

      -它的正常运行时间已经重置(通过重新启动)。

      -它收到一个网络状态共识，其中它没有列出。

      -它接收一个网络状态共识，其中列出了StaleDesc标志。
 [XXX本清单不完整;参见routerlist.c中的router_differences_are_cosmetic()

   如果以上事件都没有发生，并且时间不多(默认为12小时)，则ORs不应该发布新的服务器描述符或extra-info文档。

   大于0.3.5.1-alpha的Tor版本在检查带宽变化时忽略正常运行时间。

   在生成描述符之后，ORs将它们上传到它们知道的每个目录权限，方法是(按顺序)将它们发布到URL
 http:// <主机名:port > / tor /

   服务器描述符的长度不能超过20,000字节;extra-info文档的长度不能超过50,000字节。如果他们这样做，当局应该拒绝。

2.1.1。服务器描述符格式

   服务器描述符由以下项目组成。

   在接受多个参数的行中，应该接受并忽略额外的参数。下面的许多非终端都在2.1.3节中定义。
 “路由器”的昵称地址ORPort SOCKSPort DirPort NL
 (一开始，就一次。)

       指示服务器描述符的开头。“昵称”必须是一个有效的路由器昵称在2.1.3节指定。“地址”必须是四节点格式的IPv4地址。后三个数字表示
       此功能或公开功能的TCP端口。ORPort是一个端口，在此或接受TLS连接的主协议或协议;
       SOCKSPort是不赞成的，应该总是0;DirPort是此或接受与目录相关的HTTP连接的端口。如果不支持任何端口，则给出值0而不是端口号。(应设置至少一个DirPort和ORPort;当局可拒绝任何同时带有DirPort和ORPort of的描述
       0)。
 "identity-ed25519" " NL "开始ED25519 CERT- " NL certificate "结束ED25519 CERT- " NL
 [正好有一次，在文件的第二位置。][没有额外参数]

        该证书是一个用base64编码的Ed25519证书(请参阅cert-spec.txt)，终止=s被删除。当这个元素出现时，它必须作为路由器描述符中的第一个或第二个元素出现。

        该证书的CERT_TYPE为[04]。它必须包含一个带ed25519键的签名扩展(请参阅证书规范)。txt，第2.2.1节)，这样我们就可以提取主身份密钥。
 [在Tor 0.4.5.1-alpha之前，该字段是可选的。]
 "master-key-ed25519" SP
 (完全一次)

        包含base-64编码的ed25519主密钥作为单个参数。如果存在，则必须与identi- ed25519条目中的标识键匹配。
 [在Tor 0.4.5.1-alpha之前，该字段是可选的。]
 “带宽”带宽-avg带宽-burst带宽-observed NL
 (完全一次)

       这个路由器的估计带宽，单位是字节每秒。“平均”带宽是OR愿意在长时间内维持的每秒容量;“突发”带宽是OR愿意在很短的间隔内维持的容量。“观察”值是这个继电器能处理的容量的估计值。中继记住在过去5天内任何10秒周期内的最大带宽持续输出，以及另一个持续输入。“观察到的”值是这两个数字中较小的一个。

       2018年前发布的Tor版本只保留了一天的带宽观察。这些版本不再受支持或推荐。
 “平台”字符串问
 (最多一次)

       一个人类可读的字符串，描述在其上运行或运行的系统。这可能包括操作系统，并且应该包括实现Tor协议的软件的名称和版本。
 发表的“YYYY-MM-DD HH:MM:SS NL”
 (完全一次)

       UTC表示生成此描述符(以及相应的extra-info文档(如果有的话)的时间。
 “指纹”指纹问
 (最多一次)

       这个路由器的身份密钥的指纹(asn1编码的公钥的hash_len字节，十六进制编码，每4个字符后有一个单独的空间)。如果指纹行与公钥不匹配，描述符将被认为是无效的(必须被拒绝)。
 [我们直到Tor 0.1.0.6-rc才开始解析这一行;在Tor的早期版本被淘汰之前，它应该被标记为“opt”。
 bool问“冬眠”
 (最多一次)

       如果值是1，那么当描述符被发布时，Tor继电器处于休眠状态，不应该被用于构建电路。
 [我们直到Tor 0.1.0.6-rc才开始解析这一行;在Tor的早期版本被淘汰之前，它应该被标记为“opt”。
 “运行时间”问
 (最多一次)

       此进程或进程运行的秒数。
 一种PEM格式的公钥
 [正好一次][没有额外参数]

       此密钥用于为This或加密创建单元格。在后续描述符中发布任何新密钥后，密钥必须至少在一周内被接受。它必须是1024位。

       密钥编码是将密钥编码为PKCS#1 RSAPublicKey结构，用base64编码，并包装在“——BEGIN RSA PUBLIC”中
       和"-结束RSA公钥-"。
 “oni -key-crosscert”NL一种PEM格式的RSA签名。
 [正好一次][没有额外参数]

       这个元素包含一个RSA签名，使用洋葱密钥生成，如下所示:

          RSA身份密钥的SHA1散列，即RSA密钥来自“签名密钥”(见下文)[20个字节]
          Ed25519身份密钥，即“主密钥Ed25519”中的Ed25519密钥[32字节]

       如果没有Ed25519身份密钥，或者在将来的某个版本中没有RSA身份密钥，则对应的字段必须为零填充。

       验证此签名的各方必须允许超过上面列出的52字节的额外数据。

       这个签名证明了创建描述符的一方可以控制与洋葱密钥对应的密钥。
 [在Tor 0.4.5.1-alpha之前，当identi- ed25519不在时，该字段是可选的。]
 “ntor-onion-key”base - 64编码——关键
 (完全一次)

       用于ntor电路扩展握手的curve25519公钥。它是OR的curve25519公钥的标准编码，使用base64编码。在base64编码中可以省略后面的'='符号。在后续描述符中发布任何新密钥后，密钥必须至少在一周内被接受。
 [在Tor 0.4.5.1-alpha之前，该字段是可选的。]
 ntor-onion-key-crosscert“SP位NL”开始ED25519 CERT——“NL证书”结束ED25519 CERT——“NL证书
 [正好一次][没有额外参数]

       使用证书规范中记录的证书格式，使用ntor-onion-key创建的签名。txt，输入[0a]。这里的签名密钥是主身份密钥。

       位必须为“0”或“1”。它表示对应于ntor onion密钥的ed25519公钥的符号。如果比特为“0”，则实现必须保证得到的ed25519公钥的x坐标为正。否则,如果
       位为“1”，则x坐标的符号必须为负。

       要计算与curve25519密钥对应的ed25519公钥，以及关于密钥格式的进一步解释，请参阅附录C。

       这个签名证明了创建描述符的一方可以控制与ntor-onion-key对应的密钥。
 [在Tor 0.4.5.1-alpha之前，当identi- ed25519不在时，该字段是可选的。]
 一个PEM格式的公钥
 [正好一次][没有额外参数]

       OR的长期RSA身份密钥。它必须是1024位。

       编码与上面的“洋葱键”相同。
 “接受”，“拒绝”，“接受”
 (任意数量)

       这些行描述了一个“退出策略”:OR在决定是否允许一个新流到达给定地址时所遵循的规则。下面将描述“exitpattern”语法。必须至少有一个这样的条目。这些规则是按顺序考虑的;如果没有匹配的规则，该地址将被接受。为清楚起见，最后一个条目应该是accept *:*或reject *:*。
 “ipv6策略”SP(“接受”/“拒绝”)SP PortList NL
 (最多一次。)

       一个在章节3.4.1和3.8.2中指定的退出策略摘要，总结了路由器连接到IPv6地址的规则。丢失的“ipv6-policy”行相当于“ipv6-policy reject”
       1 - 65535”。
 “router-sig-ed25519”SP签名NL
 (一次。)

       它必须是描述符中倒数第二的元素，出现在RSA签名之前。它必须包含整个文档的SHA256摘要的Ed25519签名。这个摘要从第一个字符开始，包括“router-sig-ed25519”字符串之后的第一个空格。在计算摘要之前，将字符串“Tor router descriptor signature v1”作为文档的前缀。

       签名用Base64编码，终止=s被删除。

       identity-ed25519证书中的签名密钥必须是用于签署文档的密钥。
 [在Tor 0.4.5.1-alpha之前，当identi- ed25519不在时，该字段是可选的。]
 “路由签名”NL签名
 [在结束，恰好一次][没有额外参数]

       “签名”对象包含整个服务器描述符的pkcs1填充散列的签名，从“router”行开始到“router- SIGNATURE”行之后的换行。
       服务器描述符是无效的，除非签名是用路由器的身份密钥执行的。
 “接触”信息问
 (最多一次)

       描述与中继管理员联系的方法，最好包括电子邮件地址和PGP密钥指纹。
 “桥接-分配-请求”SP方法
 (最多一次，只有桥。)

        “方法”描述网桥地址是如何分布的
        BridgeDB。公认的方法有:“none”，“any”，“https”，“email”，“moat”。如果设置为“none”，BridgeDB将避免分发您的网桥地址。如果设置为“any”，BridgeDB将选择如何分发网桥地址。选择任何其他方法将告诉BridgeDB通过一个特定的方法来分发你的网桥:

          -“https”指定通过https://bridges.torproject.org的web界面进行分发;
          -“电子邮件”指定通过邮件autoresponder bridges@torproject.org分发;
          -“护城河”指定分布通过一个互动菜单内Tor
            浏览器;和

        未来可能的“方法”说明符必须如下:
            方法= (KeywordChar | "_") +

        所有的桥都应该包括这条线。非桥梁不能包括它。

        BridgeDB应该将未识别的方法值视为“none”。
 (默认:“任何”)
 这行代码是在0.3.2.3 alpha版本中引入的，最小的后台端口是0.2.5.16、0.2.8.17、0.2.9.14、0.3.0.13、0.3.1.9，以及以后的版本。
 问“家庭”的名字
 (最多一次)
 “Names”是一个用空格分隔的中继昵称或十六进制列表。如果两个OR在它们的“家族”条目中相互列出，那么OPs应该将它们视为单个或用于路径选择。

        例如，如果节点A的描述符包含“B族”，节点B的描述符也包含“A族”，那么节点A和节点B不应该在同一个电路上使用。
 “读历史”YYYY-MM-DD HH:MM:SS (NSEC s) NUM,NUM,NUM,NUM…最多一次“写历史”YYYY-MM-DD HH:MM:SS (NSEC s) NUM,NUM,NUM,NUM…最多一次
 (这些字段曾经出现在路由器描述符中，但从0.2.0.x开始出现在extrainfo描述符中。)
 bool问“eventdns”
 (最多一次)

        声明此版本的Tor是否使用新的增强的dns逻辑。将此字段设置为false的版本的Tor不应用于反向主机名查找。
 这个选项已经过时了。应该假定所有的Tor电流继电器都具有evdns后端。
 “caches-extra-info”问
 (最多一次。][没有额外参数]

       仅当此路由器是提供额外信息文档的目录缓存时才显示。
 [在0.2.0.1-alpha之前的版本不认识到这个]
 《额外信息文摘
 (最多一次)
 “sha -digest”是路由器的extra-info文档的十六位编码的SHA1摘要(使用大写字符)，它是在路由器的extra-info(即不包括签名)中签名的。(如果这个字段不存在，路由器就不会上传相应的extra-info文档。)
 “SHA256 -digest”是extra-info文档的base64编码的SHA256摘要。与“sha -digest”不同，该摘要是对整个文档(包括签名)进行计算的。这种差异是由于tor实现中的一个长期存在的bug，很难对其进行增量修复，而不是一个设计选择。指定的未来摘要算法不应该在用于计算摘要的数据中包含签名。
 在0.2.7.2-alpha之前的版本没有包含SHA256摘要。[在0.2.0.1-alpha之前的版本根本不识别这个字段。]
 “hidden-service-dir”问
 (最多一次。)

       仅当此路由器存储和提供隐藏的服务描述符时才显示。这个路由器支持在HSDir“proto”条目中声明的描述符版本。如果没有“proto”条目，此路由器支持版本2描述符。
 “协议”SP“链接”SP链接-版本-列表SP“电路”SP
          CIRCUIT-VERSION-LIST问
 (最多一次。)

       一个过时的协议版本列表，被“原型”条目取代。这个列表从未被解析过，并且从Tor 0.2.9.4-alpha开始就没有被发出过。新代码既不能生成也不能解析这一行。
 “allow-single-hop-exits”问
 (最多一次。][没有额外参数]

       只有当路由器允许单跳电路使出口连接时才存在。大多数Tor继电器不支持这一点:这包括为支持透视图访问等而设计的专门控制器。这在tor版本>= 0.3.1.0-alpha中已经过时了。
 "或地址" SP地址":"端口NL
 (任意数量)

       地址= IP6ADDR | IP4ADDR
       IPV6ADDR =一个ipv6地址，用方括号括起来。
       IPV4ADDR =一个ipv4地址，表示为一个虚线四轴。
       端口= 1到65535之间的数字。

       一个替代的地址和ORPort的“路由器”线，但有两个增加的能力:

         * or地址可以是IPv4或IPv6地址
         * or-address允许多个ORPorts和地址

       描述符不应该包括一个or-address行，它只做复制地址:端口对从它的“路由器”行。

       or-address线路及其端口条目的顺序很重要，因为
       Tor可以接受有限数量的地址/端口对。的
       Tor 0.2.3。只有第一个地址/端口对被广告和使用。
 “tunnelled-dir-server”问
 (最多一次。][没有额外参数]

       表示如果路由器接受“隧道”目录请求使用
       在路由器的或端口上的BEGIN_DIR单元格。(在0.2.8.1-alpha补充道。在此之前，Tor中继只有在DirPort打开或它们是桥的情况下才接受隧道目录请求。)
 “原型”SP条目
 (一次。)

       条目=
       条目=条目
       条目=条目SP条目

       Entry =关键字"="值

       值=
       值=值
       值=值"，"值

       Int Value =
       Value = Int "-" Int

       Int = NON_ZERO_DIGIT
       整数位

       “proto”行中的每个“条目”表示Tor中继支持所讨论的协议的一个或多个版本。条目应该按关键字排序。每个条目中的值应该按数字升序排列。(这意味着不应该有重叠的范围。)
       范围的表示应该尽可能紧凑。整数不能大于63。

       该字段首次添加到Tor 0.2.9.x中。
 [在Tor 0.4.5.1-alpha之前，该字段是可选的。]


2.1.2。Extra-info文档格式

   Extra-info文档包括以下内容:
 “extra-info”昵称指纹NL[在开始时，准确地一次。]

        标识这是哪个路由器的额外信息描述符。
        指纹以十六进制编码(使用大写字母)，没有空格。
 " identifier -ed25519"[在路由器描述符中]
 发表的“YYYY-MM-DD HH:MM:SS NL”
 (一次。)

       生成此文档(以及相应的路由器描述符(如果有的话)的时间(UTC)。它必须匹配相应服务器描述符中的发布时间。
 “读历史”YYYY-MM-DD HH:MM:SS (NSEC s) NUM,NUM,NUM,NUM…最多一次。[[注释写历史]NUM,NUM,NUM,NUM…最多一次。

        声明OR最近使用了多少带宽。使用间隔以NSEC秒为单位。YYYY-MM-DD HH:MM:SS字段定义了最近的间隔的结束。数字是在最近的时间间隔中使用的字节数，按从最早到最新的顺序排列。

        这些字段包括IPv4和IPv6流量。
 “ipv6读取历史”YYYY-MM-DD HH:MM:SS (NSEC s) NUM,NUM,NUM…NL[最多一次]"ipv6写历史"最多一次

        声明OR最近在IPv6连接上使用了多少带宽。详情请参阅“读取历史”和“写入历史”。
 “geoip-db-digest”Digest NL[最多一次。]

        用于将IPv4地址解析为国家代码的IPv4 GeoIP数据库文件的摘要。
 “geoip6-db-digest”Digest NL[最多一次。]

        用于解析IPv6地址到国家代码的IPv6 GeoIP数据库文件的摘要。
 (“geoip-start-time”YYYY-MM-DD HH:MM:SS NL)问)

        仅由桥接路由器(参见block .pdf)生成，且仅在配置了geoip数据库后才生成。
        非网桥不应该生成这些字段。包含从两个字母的国家代码(CC)到已从该国连接到该桥的客户端数量的映射列表(近似，并四舍五入到8的最接近倍数，以便妨碍流量分析)。一个国家只有在它至少有一个地址时才被包括在内。“geoip开始时间”中的时间是我们开始收集geoip统计数据的时间。
 在0.2.2.4-alpha中，“geoip-开始时间”和“geoip-客户端起点”已经被“bridge- state -end”和“bridge- state -ips”所取代。原因是，由“已发布”减去“geoip开始时间”所确定的“geoip-stats”的测量间隔可能是可变长度的，而在
        0.2.2.4-alpha和later被设置为24小时。为了清晰地区分新的测量区间和旧的测量区间，引入了新的关键词。
 “桥-状态-结束”YYYY-MM-DD HH:MM:SS (NSEC s) NL[最多一次。]

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。

        一条“桥-状态-结束”线，以及任何其他“桥-*”线，只在接力作为桥运行至少24小时后才添加。
 “bridge-ips”CC = NUM CC = NUM,…最多一次。

        映射列表，从两个字母的国家代码到从该国连接到桥上且没有已知中继的唯一IP地址的数量，四舍五入到最接近8的倍数。
 “bridge-ip-versions FAM = NUM FAM = NUM,…最多一次。

        每个协议家族已连接到网桥的唯一IP地址列表。
 “bridge-ip-transports PT = NUM PT = NUM,…最多一次。

        从可插拔传输名称到使用该可插拔传输连接的唯一IP地址数量的映射列表。使用保留的可插拔传输名称“<或>”(不带引号)对未混淆的连接进行计数。如果我们从传输代理接收到一个连接，但是我们不能计算出可插入传输的名称，那么我们使用保留的可插入传输名称“<??>”。
 (“< >”和“< ? ?>"是保留的，因为正常的可插拔传输名称必须匹配以下正则表达式:"[a-zA-Z_][a-zA-Z0-9_]*")

        可插拔传输名称列表按词序升序排序。

        如果还没有客户机连接到网桥，我们只将“bridge-ip-transport”写入到stats文件。
 "dirreq-stats-end"最多一次。

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。

        一条“dirreq-stats-end”线，以及任何其他的“dirreq-*”线，只在中继打开了它的Dir端口并且在24小时的测量目录请求之后被添加。
 “dirreq-v2-ips”CC = NUM CC = NUM,…最多一次。]“dirreq-v3-ips”CC = NUM CC = NUM,…最多一次。

        从两个字母的国家代码映射到从该国连接请求v2/v3网络状态的唯一IP地址的数量，取整到最接近8的倍数。只有这些IP地址被计算，目录才能回答一个200 OK状态码。(这里和下面要注意的是:当前的Tor版本，从0.2.5.2 alpha开始，不再缓存或服务v2 networkstatus文档。)
 “dirreq-v2-reqs”CC = NUM CC = NUM,…最多一次。]“dirreq-v3-reqs”CC = NUM CC = NUM,…最多一次。

        从两个字母的国家代码到该国家对v2/v3网络状态的请求数量的映射列表，四舍五入到最接近8的倍数。只有那些请求被计算，目录才能回答200 OK状态码。
 "dirreq-v2-share" NUM% NL[最多一次。"dirreq-v3-share" NUM% NL[最多一次]

        目录期望从客户端接收的基于其广告带宽的v2/v3网络状态请求与总体网络带宽容量的比例。共享被格式化为带有两个小数位的百分数。股票以整个24小时内的方式计算。
 “dirreq-v2-resp”状态= NUM,…最多一次。]“dirreq-v3-resp”状态= NUM,……最多一次。

        从响应状态到响应状态响应的v2/v3网络状态请求数量的映射列表，四舍五入到最接近4的倍数。只报告至少有1个响应的响应状态。可以在任何时候添加新的响应状态。当前响应状态列表如下:
 “ok”:响应网络状态请求;这个数字分别对应于“dirreq-v2-reqs”或“dirreq-v3-reqs”中报告的所有请求的总和，然后再四舍五入。“不够sigs:版本3的网络状态没有被请求的权限的足够数量的签名。”“不可用”:请求的网络状态对象不可用。“未找到”:未找到所请求的网络状态。“未修改”:网络状态自…起未被修改
           如果-修改-自包含在请求中的时间起。“忙”:通讯录忙。
 “dirreq-v2-direct-dl”键= NUM,…最多一次。]“dirreq-v3-direct-dl”键= NUM,……最多一次。]“dirreq-v2-tunneled-dl”键= NUM,……最多一次。]“dirreq-v3-tunneled-dl”键= NUM,……最多一次。

        关于下载v2/v3网络状态过程中可能出现故障的统计信息列表。请求要么是“直接的”
        在中继的目录端口上使用http编码的请求，或者在中继的或端口上使用BEGIN_DIR单元“隧道化”的请求。可能的统计信息列表可以更改，并且统计信息可以从报告中删除。目前的统计数字如下:

        成功下载和失败:
 “完成”:客户端已成功完成下载。“超时”:开始发送响应后10分钟内下载未完成。“运行”:在测量结束后，在开始发送响应后不到10分钟内，下载仍在运行。

        下载时间:
 “最小”、“最大”:B/s中测量的最小和最大带宽。“d[1-4,6-9]”:B/s中测量带宽的1到4、6到9分位数。对于给定的十分位数i，所有下载的i/10的带宽比di小，所有下载的(10-i)/10的带宽比di大。“q[1,3]”:B/s中测量带宽的1 / 4和3 / 4。四分之一的下载量带宽小于q1，四分之一的下载量带宽大于q3，剩下的一半下载量带宽介于q1和q3之间。“md”:测量带宽的中位数，单位是B/s。一半的下载量带宽比md小，另一半带宽比md大。
 “dirreq-read-history”YYYY-MM-DD HH:MM:SS (NSEC s) NUM,NUM,NUM…最多一次“dirreq-write history”YYYY-MM-DD HH:MM:SS (NSEC s) NUM,NUM,NUM…最多一次

        声明OR在回答目录请求上花费了多少带宽。使用间隔以NSEC秒为单位。的
        YYYY-MM-DD HH:MM:SS字段定义最近间隔的结束。数字是在最近的时间间隔中使用的字节数，按从最早到最新的顺序排列。
 “entry- status -end”YYYY-MM-DD HH:MM:SS (NSEC s) NL[最多一次。]

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。

        一个“入口状态-结束”线，以及任何其他“入口-*”线，是在接力运行至少一段时间后首先添加的
        24小时。
 “entry-ips”CC = NUM CC = NUM,…最多一次。

        映射列表，从两个字母的国家代码到已从该国连接到中继的唯一IP地址的数量，且没有已知的其他中继，四舍五入到8的最近倍数。
 “cell-stat -end”YYYY-MM-DD HH:MM:SS (NSEC s) NL[最多一次。]

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。

        “cell-stat -end”线，以及任何其他“cell-*”线，在中继运行至少24小时后首次添加。
 “cell-processed-cells NUM”,…，NUM NL[最多一次]

        每个电路中处理细胞的平均数目，按处理细胞的数目由大到小依次划分为十分位数的电路。
 “cell-queued-cells NUM”,…，NUM NL[最多一次]

        以电路十分位数表示的队列中包含的单元的平均数量。这些方法的计算方法是:1)确定单个电路从创建到终止之间的平均细胞数;2)按照“单元处理单元”计算给定十分位数中所有电路的平均值。数字的精度为小数点后两位。

        注意，对于在测量间隔开始或结束时排队的单元的电路，这个统计可能是不准确的。
 “cell-time-in-queue NUM”,…，NUM NL[最多一次]

        平均时间单元花费在电路队列毫秒。时间的计算方法是:1)确定单元在单个电路队列中的平均时间;2)按照“单元处理单元”计算给定十分位数中所有电路的平均时间。

        注意，对于在测量间隔开始或结束时排队的单元的电路，这个统计可能是不准确的。
 “每十分位数单元电路”NUM NL[最多一次]

        每十分位数中包含的电路的平均数量，四舍五入到下一个整数。
 以下，读，写，两个NL[最多一次]

        在YYYY-MM-DD HH:MM:SS之前的NSEC秒(通常为86400秒)内，被分割成10秒间隔的连接数，单向或双向使用。每一个
        10秒,我们确定为每个连接是否读和写小于一个阈值20简约(下图),读至少10倍我们写(读),写了至少10倍我们读(写),或读和写超过阈值,但不是十倍的方向(两个)。在对连接进行分类之后，将为下一个连接重置读写计数器
        十秒的时间间隔。

        该测量包括IPv4和IPv6连接。
 下面，读，写，两个NL[最多一次]

        单向或双向使用的IPv6连接数。有关更多细节，请参阅“conni -bi-direct”。
 "exit- stat- end" YYYY-MM-DD HH:MM:SS (NSEC s) NL[最多一次]

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。

        一个“exit-stats-end”线，以及任何其他的“exit-*”线，是在中继运行至少24小时之后第一次添加的，并且仅当中继允许退出(退出到一个单一端口和IP地址是足够的)。
 “exit-kibibytes-written”端口= N端口= N,…最多一次。]“exit-kibibytes-read”端口= N端口= N,…最多一次。

        从端口映射到中继已写入到该端口的出口连接或从该端口读取的kibibytes数量的列表，取整到下一个完整的kibibyte。继电器可以限制列出的端口的数量，并将任何剩余的kibibytes归入端口“其他”。
 “exit-streams-opened”端口= N端口= N,…最多一次。

        从端口映射到该端口打开的出口流的数量的列表，取整到最接近4的倍数。继电器可以限制所列端口的数量，并将任何剩余开放的流归入端口“其他”项下。
 最多一次。[hide -v3- stat- end]最多一次。

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。

        “隐藏队-状态-结束”线和其他任何“隐藏队-*”线，都是在接力赛运行至少24小时之后才会被添加的。
 “hidserve -rend-relayed-cell”SP NUM SP key=val SP key=val…最多一次。" hidserve -rend-v3中继单元" SP NUM SP key=val SP key=val…最多一次。

        在接收并成功地处理好集合1单元后，在电路中所见的沿任一方向的继电器单元的大致数目。

        最初的测量值分几个步骤进行模糊处理:首先，将其四舍五入到这一行的key=val部分报告的'bin_size'的最接近倍数;第二，a(可能是负的)噪声值被添加到第一步的结果，从一个拉普拉斯分布随机抽样mu = 0和b =(德尔塔- f /)与‘德尔塔- f’和‘德尔塔- f’被报告在key=val部分;第三，前面的模糊处理步骤的结果被截断为下一个更小的整数，并包含为“NUM”。注意，总体报告值可以是负数。
 “hidservlet -dir-onions-seen”SP NUM SP key=val…最多一次。[hide -dir-v3-onions-seen] SP NUM SP key=val SP key=val…最多一次。

        在发布到此隐藏服务目录并由该隐藏服务目录接受的描述符中看到的唯一隐藏服务标识的大致数目。

        原始测量值与“hidserve -rend-relayed-cells”中报告的‘NUM’值一样被混淆，但可能与这一行的key=val部分中报告的参数不同。注意，总体报告值可以是负数。
 “transport”transportname地址:port [arglist] NL [Any number.]

        表示路由器在IP地址'address'和TCP端口'port'中支持'transportname'可插入传输。单个描述符不能有一个以上具有相同“transportname”的传输行。

        可插拔传输只与桥接相关，但是这些项也可以出现在非桥接中继中。
 "padding-counts" YYYY-MM-DD HH:MM:SS (NSEC s)键=NUM键=NUM…最多一次。

        SS定义包含长度NSEC秒(默认为86400秒)的测量间隔的结束。在此间隔结束时，计数被重置为0。

        关键字列表目前如下:
 容器大小
           -当前单元格计数字段的舍入值(默认为10000)写drop
           -中继发送写板的中继降单元的数量
           -此中继发送的CELL_PADDING单元格的总数
           -该继电器的总细胞数分读下降
           -该继电器接收到读取板的中继单元数
           -此中继接收到的读取单元格总数
           -此继电器接收已启用读取板的单元总数
           -此中继在支持已启用的填充的连接上接收的CELL_PADDING单元格数
           -该中继接收到的支持填充激活写板的连接的单元总数
           -此中继在支持已启用的填充的连接上接收的单元格总数-写-总数
           -该中继在支持padding max-chanpad-timer的连接上发送的细胞总数
           -此中继计划在前一个NSEC间隔内填充的最大计时器数
 "router-sig-ed25519"[在路由器描述符]
 “路由签名”NL签名NL[在结束，恰好一次。][没有额外参数]

        如1.3节所述的文件签名，使用初始项“extra-info”和最后项“router-signature”，用路由器的身份密钥签名。

2.1.3。服务器描述符中的非终端
 = 1到19个字母数字字符之间([A-Za-z0-9])，不区分大小写。hexdigest::=一个'$'，后跟40个十六进制字符([a- fa -f0-9])。[通过其身份密钥摘要表示一个中继。]
 portspec::= "*" |端口|端口"-"端口端口端口::= 1到65535之间的整数。
 [有些实现不正确地生成值为0的端口。
       实现应该接受这一点，而不应该生成它。
       不允许连接到端口0。]
 addrspec  ::= "*" | ip4spec | ip6spec ipv4spec:: = ip4 | ip4 " num_ip4_bits | ip4 " ip4mask ip4:: = ip4mask dotted-quad的IPv4地址格式::=一个IPv4面具dotted-quad格式num_ip4_bits:: = 0和32 ip6spec之间的一个整数::= ip6 | ip6 " num_ip6_bits ip6:: = IPv6地址,方括号包围。num_ip6_bits::= 0到128之间的整数
 = "0" | "1"

3.目录权限操作和格式

   每个权限都有在此协议中使用的两个密钥:一个签名密钥和一个权限标识密钥。(当局还拥有一个路由器身份密钥，用于他们作为路由器的角色，以及目录协议的早期版本。)身分密码匙会不时使用新的签署密码匙签署新的密码匙证书;这是非常敏感的。
   签名密钥用于签名密钥证书和状态文档。

3.1。创建密钥证书

   密钥证书包括以下内容:
 问“dir-key-certificate-version”版本
 (一开始，就一次。)

        确定密钥证书的版本。本文档中描述的协议必须为“3”。实现必须拒绝它们不理解的格式。
 “dir-address”IPPort NL[最多一次]

        这个权威机构的目录端口的IP:端口。
 “指纹”指纹问
 (一次。)

        不带空格的十六进制编码，基于权威的身份密钥。
 一个PEM格式的公钥
 (完全一次。][没有额外参数]

        此权限的长期权限标识密钥。这个键
        长度至少为2048位;不能短于
        1024位。
 dir-key-published" YYYY-MM-DD HH:MM:SS NL
 (一次。)

        最后生成此文档和相应密钥的时间(UTC)。
 “dir-key-expires”YYYY-MM-DD HH:MM:SS NL
 (一次。)

        一个时间(UTC)，超过这个键不再有效。
 一个PEM格式的密钥
 (完全一次。][没有额外参数]

        目录服务器的公共签名密钥。此密钥必须至少为1024位，并且可能更长。
 " dirl -key-crosscert"交叉签名
 (完全一次。][没有额外参数]

        交叉签名是使用证书的签名密钥对证书的身份密钥的pkcs1填充散列摘要进行的签名。为了向后兼容损坏的解析器版本，我们将base64编码的签名包装在——BEGIN ID中
        签名和结束ID签名标记。实现
        但是，必须允许省略“ID”部分。

        实现必须验证签名是使用签名密钥的身份密钥散列的正确签名。
 “dir-key-certification”NL签名
 [最后，就一次。][没有额外参数]

        第1.3节中所述的文件签名，使用初始项“dir-key-certification -version”和最终项“dir-key-certification”，使用权威身份密钥签名。

   权威机构必须在密钥过期之前生成一个新的签名密钥和相应的证书。

3.2。接受服务器描述符和额外信息文档上传

   当路由器将签名的描述符提交给目录权威机构时，权威机构首先检查它是否格式良好且自签名正确。如果是，接下来该机构将验证所涉及的昵称是否已经分配给具有不同公钥的路由器。
   最后，该机构可能会检查路由器是否因其密钥、IP或其他原因而被列入黑名单。

   一个权威还保存它以前看到的所有Ed25519/RSA1024身份密钥对的记录。它拒绝任何具有已知的Ed/RSA身份密钥的描述符，并且它已经在旧的描述符中看到了伴随不同的RSA/Ed身份密钥。

   在未来的某一天，有关部门将开始拒绝所有RSA密钥之前带有a的描述符
   如果描述符没有列出Ed25519键，则为Ed25519键。

   将来，当局将开始拒绝所有没有列出Ed25519密钥的描述符。

   如果描述符通过了这些测试，而该机构还没有具有此公钥的路由器的描述符，则接受该描述符并记住它。

   如果authority _does_有一个具有相同公钥的描述符，那么新上传的描述符会被记住，如果它的发布时间比该路由器最近的旧描述符更近，并且:

      旧的描述符和新的描述符之间没有表面上的区别。
      -描述符的出版时间已经经过了足够长的时间。(目前,2小时)。

   服务器描述符之间的差异是“非修饰性的”，如果它们足以强制上传，如前面2.1节所述。

   请注意，“外观差异”测试只适用于上传的描述符，而不适用于该机构从其他机构下载的描述符。

   当路由器向目录权威机构提交已签名的extra-info文档时，该权威机构再次检查它的格式是否良好和签名是否正确，并检查它是否与某些它认为当前有用的路由器描述符中的extra-info-digest相匹配。如果是，则接受并存储它，并按请求提供服务。如果没有，它就放弃它。


3.3。计算microdescriptors

   微描述符是目录权威生成的服务器描述符的简化版本，它可能另外包含权威生成的信息。微描述符只包含客户最关心的最相关的部分。微描述符预计是相对静态的，大约每周只变化一次。
   微描述符不包含客户机需要使用的任何信息，这些信息用于决定获取关于哪些服务器的信息，或者从哪些服务器获取信息。

   微描述符是对服务器描述符和consensus方法的直接转换。微描述符没有页眉或页脚。
   微描述符由其连接的元素的散列来识别，而不需要路由器的签名。微描述符不包含任何版本信息，因为它们的版本是由consensus方法确定的。

   从共识方法8开始，微描述符包含以下来自或基于服务器描述符的元素。这里的顺序很重要，因为不同的目录权限必须能够将给定的服务器描述符和一致的方法转换为完全相同的微描述符。
 一种PEM格式的公钥
 [恰好一次，在开始时][没有额外参数]

        在第2.1.1节中指定的“洋葱键”元素。

        当为consensus method 30或更高版本生成微描述符时，尾部的=符号必须不存在。对于一致方法29或更早的版本，尾等号必须出现。
 SP base-64-编码-key NL
 (完全一次)

        在第2.1.1节中规定的“ntor-onion-key”元件。
 (仅在为共识方法16或更高版本生成微描述符时才包括在内。)
 [在Tor 0.4.5.1-alpha之前，该字段是可选的。]
 一个“SP地址”:“端口NL。
 (任意数量)

        或的额外广告地址。

        目前只有当或广告至少一个IPv6地址;目前，包括第一个地址和所有其他被省略。任何其他IPv4或IPv6地址都应该被忽略。

        地址和端口与第2.1.1节中规定的“or-address”相同。
 (仅在为共识方法14 - 27生成微描述符时包括在内。)
 问“家庭”的名字
 (最多一次)

        第2.1.1节中规定的“家族”元素。

        在consensus method 29或以后生成微描述符时，采用以下规范化算法来提高压缩性能:

           对于$hexid=name或$hexid~name形式的所有条目，删除=name或~name部分。

           删除表单$hexid中不包含hexid的所有条目
           40个十六进制字符。

           如果一个条目是有效的昵称，则将其放入小写。

           如果一个条目是有效的$hexid，则将其放入大写。

           如果有任何条目，为有问题的中继添加一个$hexid条目，使其成为自己家族的成员。

           按词法顺序对所有条目进行排序。

           删除重复的条目。
 (注意，如果条目不属于“昵称”、“$hexid”、“$hexid=昵称”或“$hexid~昵称”形式，那么它将是不变的:这就是使算法向前兼容的原因。)
 "p" SP ("accept" / "reject"
 (一次。)

        第3.4.1和3.8.2节中规定的退出策略摘要。
 [使用微描述符，客户端不能了解确切的退出策略:客户端只能猜测中继是否接受他们的请求，尝试
        开始请求，如果他们猜错了，可能会得到end-reason-exit策略，在这种情况下，他们将不得不在其他地方尝试。
 [在5之前的一致方法中，这条线被省略。]
 "p6" SP("接受" / "拒绝"
 (最多一次)

        IPv6退出策略摘要如在章节3.4.1和指定
        3.8.2。缺失的“p6”行相当于“p6拒收1-65535”。
 (仅在为一致性方法15或更高版本生成微描述符时才包括在内。)
 "id" SP "rsa1024" SP base64-编码-标识-摘要NL
 (最多一次)

        节点标识摘要(如tor-spec.txt中所述)，base64编码，尾部不带=s。这一行用于防止微描述符之间的冲突。

        实现应该忽略这些行:它们被添加到微描述符只是为了防止冲突。
 (仅在为consensus-method 18或以后生成微描述符时才包括在内。)
 “id”SP“ed25519”SP base64-encode -ed25519-identity NL
 (最多一次)

        节点的主标识键Ed25519, base64编码，没有结尾=s。

        对于在consensus中包含“NoEdConsensus”标志的相应条目的任何微描述符，所有实现都必须忽略此键。
 (仅在为consensus-method 21或以后生成微描述符时包含。)
 “id”SP键类型…问
 [每个不同的键类型最多一次]

        实现必须忽略带有无法识别的键类型的“id”行，而不是“rsa1024”或“ed25519”。
 “pr”SP条目
 (一次。)

        第2.1.1节中规定的“原型”元素。
 [在Tor 0.4.5.1-alpha之前，该字段是可选的。]
 (请注意，使用微描述符时，客户端并不会获知其路由器的RSA身份:它们只会获知RSA身份密钥的散列。这是他们在进行TLS握手时确认实际身份密钥所需要的全部内容，也是他们将身份密钥摘要放入自己的文件中所需要的全部内容
   创建细胞。)

3.4。交换选票

   当局把时间分成间隔。权限管理员应该尝试选择相同的间隔长度，并且应该选择通常使用的时间分割(例如，5分钟、15分钟、30分钟、60分钟、90分钟)。投票时间间隔应平均分为24小时。

   当局应根据最新共识的间隔和延迟采取行动。由于缺乏最新的共识，他们应该违约
   30分钟的间隔，5分钟的投票延迟和5分钟的延迟。

   当局必须煞费苦心地确保他们的时钟在几秒内保持准确。(运行NTP通常就足够了。)

   每天的第一轮投票从协调世界时零时(午夜)开始。如果一天的最后一个周期将被截断一半或更多，它将与倒数第二个周期合并。

   一个权威机构应该在每个投票周期开始时立即发布它的投票结果(减去选票数+DistSeconds)。它通过在
 http:// <主机名> /下/ authority.z tor / status-vote /
 并将其以HTTP POST请求发送到URL上的其他权威机构
 http:// <主机名> / tor / post /投票

   如果在投票期间开始时，一个权限没有另一个权限的当前语句，那么第一个权限下载另一个权限的语句。

   一旦一个权威机构得到了另一个权威机构的投票，它就可以在
 http:// <主机名> / tor / status-vote /下/ < fp >还是z
 其中<fp>为另一个权限的身份密钥指纹。
   而在
 http:// <主机名> / tor / status-vote /下/ d / d < >还是z
 其中<d>是投票文档摘要。

   同样，一旦一个权威机构收到另一个权威机构的投票，它会检查该权威机构以寻找新的描述符，并从该权威机构获取它们。
   这可能是权威机构听到没有向所有权威机构发布描述符的中继的唯一方法，尽管权威机构在当前投票中包括中继已经太晚了，但它可以在下次投票中包括它们。详情见下文第3.6节。

3.4.1。投票和协商一致的状态文件格式

   投票和共识的格式比本规范中的其他文档更严格，因为不同的权威机构必须能够在相同的投票集合下产生完全相同的共识。

   决定何时产生投票和协商一致地位文件的程序见关于投票时间的第1.4节。

   状态文档按顺序包含一个前半部分、一个权限部分、一个路由器状态条目列表和一个或多个页脚签名。

   与上面描述的其他格式不同，这些文档中的SP必须是单个空格字符(十六进制20)。

   有些项目只出现在投票中，有些项目只出现在共识中。除非指定，项目出现在两个。

   序言包括以下项目。它们应该按照这里给出的顺序出现:
 “网络状态版本”SP版本NL
 (一开始，就一次。)

        文档格式版本。对于这个规范，版本是“3”。
 “选票地位”SP型国民党
 (一次。)

        根据文件的类型，状态必须是“投票”或“协商一致”。
 “共识方法”SP IntegerList NL
 [最多一次投票;不会出现在共识中。]

        用空格分隔的方法列表，用于从投票中生成共识。详见第3.8.1节。缺少该行意味着只支持方法“1”。
 “共识方法”SP整数NL
 [为了达成共识，最多一次;不发生在投票中。][没有额外参数]

        详见第3.8.1节。
 (仅适用于以共识方式2或以上产生的投票。)
 发表了“SP YYYY-MM-DD SP HH:MM:SS NL”
 [只有一次投票;不会出现在共识中。]

        此状态文档的发布时间(如果投票)。
 "valid-after" SP YYYY-MM-DD SP:MM:SS NL
 (一次。)

        投票间隔时间的开始。在此之前，这次投票产生的共识文件尚未正式使用。
 (注意，由于传播延迟，客户端和中继可能会看到比这个时间早到“DistSeconds”的共识文档，因此不应该发出警告。)

        投票时间信息见第1.4节。
 “新鲜-直到”SP YYYY-MM-DD SP:MM:SS NL
 (一次。)

        产生下一次协商一致意见的时间;在此之前，下载另一个共识没有意义，因为不会有一个新的共识。投票时间信息见第1.4节。
 “有效-直到”SP YYYY-MM-DD SP:MM:SS NL
 (一次。)

        本次投票间隔结束。在此之后，所有的客户都应该尝试找到一个更近期的共识。投票时间信息见第1.4节。

        实际上，如果不能下载更多的最新共识，客户端会在共识失效后的24小时内继续使用它。
 “投票延迟”SP VoteSeconds SP DistSeconds NL
 (一次。)

        votesecseconds是我们允许从所有权威机构收集选票的秒数;DistSeconds是我们允许从所有权威机构收集签名的秒数。投票时间信息见第1.4节。
 “客户端版本”SP VersionList NL
 (最多一次。)

        以逗号分隔的推荐Tor版本列表，供客户使用，按升序排列。版本由version-spec.txt定义。如果缺席，则对客户端版本不持任何意见。
 “服务器版本”SP VersionList NL
 (最多一次。)

        用逗号分隔的用于中继使用的推荐Tor版本列表，按升序排列。版本由version-spec.txt定义。如果缺席，则对服务器版本没有意见。
 “软件包”SP包装名称SP版本SP网址SP摘要NL
 (多少次都行。)

        这个元素:

        PACKAGENAME =是非空间
        VERSION =是非空间
        URL =是非空间
        |消化SP消化
        "=" DIGESTVAL
        一个或多个非空格打印字符
        DIGESTVAL = DIGESTTYPE =除"="之外的一个或多个非空格打印字符。

        指示可以在URL中找到版本版本的名为“package”的包，并且用DIGESTTYPE计算的它的摘要等于
        DIGESTVAL。在一般情况下，这些行按“PACKAGENAME VERSION”对进行词法排序，DIGESTTYPES必须按升序出现。一致意见中不能重复包含相同的“包装名版本”。如果一个投票不止一次地包含相同的“PACKAGENAME版本”，那么除了最后一个版本之外，其余的都将被忽略。

        仅在方法19及以后的consensuses中包含。
 “已知标志”SP FlagList NL
 (一次。)

        用空格分隔的列表，其中列出了本文档可能包含的所有标志。一个标志是“已知的”，或者是因为权威机构知道它们并可能设置它们(如果在投票中)，或者是因为已经计算了足够多的选票，从而形成了关于它们的地位的权威意见。
 “flag-threshold”SP threshold NL
 [最多一次投票;不会出现在共识中。]

         一个空格分隔的内部性能阈值列表，目录权威在进行投票时拥有这些阈值。

         metaformat是:
            阈值=阈值|阈值SP阈值
            Threshold = ThresholdKey '=' ThresholdVal
            ThresholdKey = (KeywordChar | "_") +
            ThresholdVal =[0 - 9] +(”。“[0 - 9]+)?“%”?

         此时常用的阈值包括:
 “稳定运行时间”——继电器被标记为稳定所需的运行时间(单位为秒)。
 “稳定MTBF”——标记为稳定所需的MTBF(秒)。
 “足够的MTBF”——我们是否测量了足够的MTBF来观察稳定MTBF而不是稳定运行时间。
 “快速”——一个中继被标记为快速所需的带宽(单位为字节/秒)。
 “guard- WFU”—标记为guard的继电器所需的WFU(秒)。
 “守卫-tk”——一个继电器标记为守卫所需的加权时间(以秒为单位)。
 “警卫-bw-inc-出口”——如果出口可以是警卫，那么所有的警卫必须有这么高的带宽。
 “guard-bw- excl -exit”——如果exit不能是警卫，那么所有的警卫都必须有这么高的带宽。
 如果我们有足够的测量带宽，我们就会忽略没有测量带宽的路由器所宣称的带宽。
 推荐-客户端协议推荐-中继协议SP项NL要求-客户端协议SP项NL要求-中继协议SP项
 (每人最多一次。)

        第2.1.1节中规定的“原型”元素。

        为了对这些条目进行投票，只有当协议/版本组合被大多数投票者列出时才会被包括进来。

        这些条款应该付诸表决。多数选票足以使一项协议不受支持。需要绝大多数权威人士(2/3)来制定协议。所需的协议不应该是torrc可配置的，而是应该在Tor代码中硬连接。

        txt部分9详细说明了当继电器和客户端在consensus中遇到这些线路时应该如何行为。
 "参数" SP[参数]NL
 (最多一次)

        参数::=关键字'=' Int32
        Int32::= -2147483648到2147483647之间的十进制整数。
        参数::=参数|参数SP参数

        参数列表(如果存在)包含空格分隔的大小写敏感键值对列表，按关键字词法顺序排序(如ASCII字节字符串)。每个参数都有自己的含义。
 (仅适用于以一致意见方法7或以上产生的投票。)

        有关参数及其含义的列表，请参阅param-spec.txt。
 “shared- lang - before - Value”SP值显示SP值NL
 (最多一次)

        =大于或等于0的整数。
        价值::= base64编码的数据

        倒数第二次运行共享随机协议时生成的共享随机值。例如，如果该文档是在11月5日创建的，那么该字段携带在11月3日协议运行期间生成的共享随机值。

        关于如何计算此值，请参见srv-spec.txt的[SRCALC]部分，以及关于为什么在投票和一致意见中包含旧的共享随机值的[缺点]部分。

        Value是用base64编码的实际共享随机值。numreveal是用于生成这个SRV的提交数量。
 “共享的rand-current- Value”SP数值显示SP值NL
 (最多一次)

        =大于或等于0的整数。
        价值::= base64编码的数据

        在最近一次共享随机协议运行期间生成的共享随机值。例如，如果这个文档是在11月5日创建的，那么这个字段携带在11月4日协议运行期间生成的共享随机值

        请参阅srv-spec.txt的[SRCALC]部分，了解在给定活动提交时如何计算此值的指令。

        Value是用base64编码的实际共享随机值。numreveal是用于生成这个SRV的提交数量。
 “带宽-文件头”SP键值NL
 [最多一次投票;不会出现在共识中。]

        KeyValues::= "" | KeyValue | KeyValues SP KeyValue
        关键字'='值
        价值::= ArgumentCharValue +
        ArgumentCharValue::=除NL和SP之外的任何打印ASCII字符。

        用于生成此投票的带宽文件的头。
        带宽文件头在带宽-文件-spec.txt中描述。

        如果一个权限没有配置V3BandwidthsFile，则此行
        不应该出现在它的投票中。

        如果一个权限配置了一个V3BandwidthsFile，但是解析失败了，那么这一行应该出现在它的投票中，但是没有任何头。

        第一次出现:Tor 0.3.5.1-alpha。
 1*(SP算法"="摘要)NL
 [最多一次投票;不会出现在共识中。]

        用于生成此投票的带宽文件摘要。“algorithm”是产生“digest”的哈希算法的名称，它可以是“sha256”或其他算法。“摘要”是带宽文件哈希的base64编码，尾部=s省略。

        如果一个权限没有配置V3BandwidthsFile，则此行
        不应该出现在它的投票中。

        如果一个权限配置了一个V3BandwidthsFile，但是解析失败了，那么这一行应该出现在它的投票中，带有不可解析文件的摘要。

        第一次出现:Tor 0.4.0.4-alpha

   投票的权威部分包括以下内容，然后依次是权威机构的当前密钥证书:
 “源”SP昵称SP身份SP地址SP IP SP dirport SP orport NL
 (就一次，在开始的时候)

        描述了这个权威。别名是该机构的一个方便标识符。身份是权威机构当前(v3权威机构)身份密钥的大写十六进制指纹。地址是服务器的主机名。IP是服务器当前的IP地址，dirport是它当前的目录端口。orport是该地址上的端口，在那里当局监听或连接。
 “接触”SP管柱
 (完全一次)

        描述如何联系目录服务器管理员的任意字符串。管理员应该至少包括一个电子邮件地址和一个PGP指纹。
 “legacy-dir-key”SP指纹NL
 (最多一次)

        列出了一个过时的_identity_密钥的指纹，该密钥仍被该机构用于保持老客户端工作。这个选项用于将密钥保留一段时间，以防当局需要一次性迁移多个身份密钥。(通常，只有在安全漏洞影响多个权限时才会发生这种情况，例如
        2008年5月的Debian OpenSSL RNG bug)
 “shared-rand-participate”问
 (最多一次)

        表示目录权威支持并可以参与共享随机协议。
 “共享rand- Commit”SP版本SP AlgName SP身份提交
 [任何次数]

        =大于或等于0的整数。
        = 1*(ALPHA / DIGIT / "_" / "-")
        Identity::= 40 * HEXDIG
        提交::= base64编码的数据
        揭示::= base64编码的数据

        表示共享随机协议的目录权限提交，包含提交值和揭示值。请参阅srv-spec.txt的[COMMITREVEAL]和[VALIDATEVALUES]，了解如何生成和验证这些值。

        版本是当前共享随机协议的版本。AlgName是使用的哈希算法(例如:“sha3-256”)和身份是权威机构的SHA1 v3身份指纹。Commit是base64中编码的提交值。Reveal是可选的，如果设置了它，它就包含base64中的Reveal值。

        如果投票包含来自相同权限的多个提交，则接收方必须只考虑列出的第一个提交。
 “shared- lang - before - Value”SP值显示SP值NL
 (最多一次)

        参见上面的共享价值描述。
 “共享的rand-current- Value”SP数值显示SP值NL
 (最多一次)

        参见上面的共享rand电流值说明。

   协商一致意见的权威部分包含以下项目的组，按给定的顺序，对协商一致意见有贡献的每个权威都有一组，组按权威身份摘要排序:
 “源”SP昵称SP身份SP地址SP IP SP dirport SP orport NL
 (就一次，在开始的时候)

        就像在投票的权威部分。
 “接触”SP管柱
 (一次。)

        就像在投票的权威部分。
 《投票文摘
 (一次。)

        权力机构促成这一协商一致意见的表决摘要，已签署(即不包括签字)。(十六进制,大写)。

   对于投票中的每一个“遗产-dir-key”，都有一个附加的“dir-source”行，其中包含该遗产键的指纹、附加“-legacy”的权威机构昵称，以及该权威机构的主“dir-source”行中的所有其他字段。这些“脏源”线没有相应的“联系人”或“选票摘要”条目。

   每个路由器状态条目包含以下条目。路由器状态项按身份摘要升序排序。
 “r”，外号，身份，摘要，出版物，IP，文件
        SP DirPort问
 (一开始，就一次。)
 “昵称”是OR的昵称。“Identity”是其标识键的散列，用base64编码，尾部的等号被删除。“摘要”是由RSA身份密钥(参见1.3节)签名的最近描述符的散列(即不包括签名)，用base64编码。
 “Publication”是它最近描述符的发布时间，格式为YYYY-MM-DD HH:MM:SS, UTC格式。实现可以根据过去的发布时间做出决策，但不能拒绝未来的发布时间。
 “IP”为其当前IP地址;ORPort是它的当前或端口，“DirPort”是它的当前目录端口，或“0”表示“none”。
 一个“SP地址”:“端口NL。
 (任意数量)

        OR的第一个广告IPv6地址(如果可以到达的话)。

        只有当OR广告至少一个IPv6地址，并且权威认为第一个广告地址是可到达的。
        任何其他IPv4或IPv6地址都应该被忽略。

        地址和端口与第2.1.1节中规定的“or-address”相同。
 (仅当投票或一致意见方法14或以上产生一致意见时才包括在内。)
 "s" SP Flags NL
 (一次。)

        一系列空格分隔的状态标志，按词法顺序(如ASCII字节字符串)。目前记录的标志有:
 “权限”，如果路由器是目录权限。“坏出口”，如果路由器被认为是无用的出口节点(因为它的ISP审查，因为它是在一个限制性的代理，或一些类似的原因)。“出口”，如果路由器对建立通用出口电路比对继电器电路更有用。路径构建算法使用这个标志;看到path-spec.txt。“快”，如果路由器适合高带宽的电路。“守卫”，如果路由器适合作为入口守卫使用。如果路由器被认为是一个v2隐藏服务目录，则为“HSDir”。如果路由器描述符或微处理器中的任何Ed25519键没有反映权威一致意见，则使用“NoEdConsensus”。“稳定”，如果路由器适合长寿命电路。“StaleDesc”，如果路由器上传一个新的描述符，因为旧的描述符太旧了。“运行”，如果路由器在所有发布的路由器上都可用
             ORPorts。(当局忽略IPv6 ORPorts，除非配置检查IPv6可达性。)没有此标志的继电器在共识中被忽略，当前的客户端(从0.2.9.4-alpha开始)假设每个列出的继电器都有此标志。“有效”，如果路由器已经被“验证”。客户之前
             0.2.9.4-alpha默认情况下不会使用没有此标志的路由器。目前，没有此标志的继电器在共识中被忽略，并且当前(后0.2.9.4-alpha)客户端假设每个列出的继电器都有此标志。如果路由器实现了v2目录协议或更高版本，则为"V2Dir"。
 "v" SP版本NL
 (最多一次。)

        此中继运行的Tor协议的版本。如果值以“Tor”SP开头，则字符串的其余部分是Tor版本号，协议是“给定版本的Tor所支持的Tor协议”。否则，如果值以其他字符串开始，则Tor已经升级到一个更复杂的协议版本控制系统，并且该协议是
        Tor协议比我们认识到的任何协议都要晚"

        如果描述符导致“v”行超过128个字符，目录权威机构应该省略从描述符接收的版本字符串。
 “pr”SP条目
 (最多一次。)

        第2.1.1节中规定的“原型”家族元素。

        在投票过程中，当局会抄写在“v”字下面的这些线。当描述符不包含“原型”条目时，主管当局应使用下文d节所述的方法对其进行重新设计。如果采用了足够迟的协商一致方法，则在协商一致意见中应使用与目前对“v”行使用的相同规则。
 "w" SP "带宽=" INT [SP "Measured=" INT] [SP "Unmeasured=1"] NL
 (最多一次。)

        这个中继的估计带宽，在一个任意单位(当前千字节每秒)。用于衡量路由器选择。关于值如何取值的细节，请参阅3.4.2节
        带宽是一致决定的。

        此外，Measured=关键字会出现在投票中，由参与的带宽测量权威机构表示通过测量流容量目前产生的测量带宽。它不会出现在共识中。

        当“Bandwidth=”值不是基于此继电器的3个或更多测量值的阈值时，“未测量的=1”值包含在用方法17或以后生成的共识中。

        以后可能会添加其他权重关键字。
        客户端必须忽略它们不能识别的关键字。
 "p" SP ("accept" / "reject"
 (最多一次。)

        PortList = PortOrRange
        PortList = PortList "，" PortOrRange
        PortOrRange = INT "-" INT / INT

        这些端口的列表，该路由器支持(如果'接受')或不支持(如果'拒绝')出口到“大多数地址”。
 "m" SP方法1*(SP算法"="摘要)NL
 [任何数字，只有投票。]

        微描述符散列用于权威机构支持的、使用相同微描述符格式的所有一致方法。“方法”是一份以逗号分隔的协商一致方法清单，管理局认为这些方法将产生“摘要”。“算法”是产生“摘要”的哈希算法的名称，它可以是“sha256”或其他什么，取决于支持该算法的一致“方法”。“摘要”是路由器微描述符散列的base64编码，尾部省略=s。
 "id" SP "ed25519" SP "none" NL[只限投票，最多一次]

   页脚部分是在所有支持“共识方法9”及以上的投票和共识中划分的，如下:
 "目录页脚" NL[无额外参数]

   它包含两个子部分，一个带宽权重行和一个目录签名。(在consensus method 9之前，页脚只包含目录签名，而没有“目录页脚”行或带宽权重。)

   为了达成一致，带宽-权重线最多只出现一次。它没有出现在投票中。
 “带宽-重量”[SP重量]NL

       关键字'=' Int32
       Int32::= -2147483648到2147483647之间的十进制整数。
       重量:=重量|重量SP重量

       在路径选择期间应用到路由器带宽的可选权重列表。它们按词法顺序(如ASCII字节字符串)排序，值按一致的“bwweightscale”参数分割。已知条目的定义是…

         Wgg -处于警戒位置的警戒标志节点的重量
         Wgm -处于保护位置的非标记节点的重量
         Wgd -在保护位置的保护+被退出标记的节点的权重

         Wmg -中间位置的警卫标记节点的重量
         Wmm -中间位置的非标记节点的权重
         Wme -中间位置的带有退出标记的节点的权重
         Wmd -中间位置的警卫+出口标记节点的重量

         Weg -在出口位置的警卫标记节点的重量
         Wem—退出位置的非标记节点的权重
         处于退出位置的被退出标记的节点的极小重量
         在出口位置的警卫+出口标记节点的权重

         Wgb - begin_dir支持的监视标记节点的权重
         Wmb—支持begin_dir的非标记节点的权重
         支持begin_dir的导出标记节点的Web权重
         Wdb - begin_dir支持保护+输出标记节点的权重

         为BEGIN_DIR请求的保护标记节点的权重
         为BEGIN_DIR请求的非标记节点的权重
         为BEGIN_DIR请求的导出标记节点的权重
         为BEGIN_DIR请求的保护+退出标记节点的权重

       这些值按3.8.3节的规定计算。

   签字中载有下列项目，该项目只出现一次供表决，至少出现一次供协商一致意见。
 “目录签名”[SP算法]SP身份SP签名键摘要
        问签名

        这是状态文档的签名，初始项为“network-status-version”，签名项为“directorly -signature”，使用签名密钥。(在本例中，我们在目录签名之后通过_space_进行散列，而不是使用换行符:这确保了所有权限都签署相同的内容。)“identity”是签名机构的权限标识密钥的十六进制编码摘要，“签名键摘要”是签名机构的当前权限签名密钥的十六进制编码摘要。

        如果存在，算法为sha1或sha256;实现必须忽略具有无法识别算法的目录签名项。如果没有给出算法，则默认为“sha1”。该算法描述了如何在对文档签名之前计算它的哈希值。
 “ns”风格的共识文档必须只包含sha1签名。
        投票和微描述符文档可能包含其他签名类型。请注意，每个授权机构只有一个签名应被“计算”为该授权机构签署了共识。
 (0.2.3之前的Tor客户端。x不理解“算法”字段。)

3.4.2。在投票中分配标志
 本节描述目录权威机构如何选择将哪些状态标志应用到路由器。以后，只要客户端保持良好的工作状态，目录授权机构可能会以不同的方式进行操作。客户端不能完全依赖于本节中的行为。)

   在下面的定义中，路由器被认为是“活动的”，如果它正在运行，有效，不休眠。

   当我们在本节谈到路由器的带宽时，我们指的是它的测量带宽，或它的广告带宽。如果一个足够的阈值(可配置MinMeasuredBWsForAuthToIgnoreAdvertised，
   默认为500)的路由器有测量的带宽值，然后权威基地标志上的测量的带宽，并对待节点与非测量的带宽，仿佛他们的带宽是零。否则，它会为拥有这些节点的节点使用已测量的带宽，并为其他节点宣传带宽。

   当基于节点百分比计算阈值时，权威机构只考虑活动的节点，这些节点没有被省略为sybil(见下文)，并且带宽至少是
   4 KB。不满足这些条件的节点不会影响任何阈值计算(包括稳定性、正常运行时间和带宽阈值的计算)，而且它们的退出状态也不会改变。
 “Valid”——路由器是“Valid”，如果它运行的Tor版本未被破坏，并且目录权威机构没有将其列入可疑名单。
 “已命名”——“未命名”——目录权威不再分配这些标志。
      它们曾经用于确定中继的昵称是否与它的公钥进行了规范化链接。
 “运行”——如果一个路由器在过去45分钟内成功连接到它，那么这个路由器就在运行。
   权限检查可达性:

     * IPv4 ORPort在“r”行，和
     * IPv6 ORPort考虑为“a”行，如果:
       *该路由器宣称至少有一个IPv6端口，并且
       * AuthDirHasIPv6Connectivity 1在权限上设置。

   少数投票权威机构设置的AuthDirHasIPv6Connectivity将从完全一致的意见中删除不可访问的IPv6 ORPorts。0.3.3中的Consensus method 27。x将IPv6 ORPorts放入microdesc共识中，这样当局就可以从所有共识中删除不可访问的IPv6 ORPorts。
   共识方法28从微描述符中删除IPv6 ORPorts。
 “稳定”——如果路由器处于活动状态，那么它就是“稳定”的
   MTBF至少是已知活动路由器的中位数，或其加权MTBF至少对应7天。如果路由器运行的是一个已知会愚蠢地掉线的Tor版本，路由器就永远不会被称为稳定路由器。(从0.1.1.10-alpha到0.1.1.16-rc这样做很愚蠢。)

        计算加权平均无故障时间、计算的加权平均长度的间隔时,路由器被观察到,权重区间\α^ n美元,美元$ n在哪里的时间间隔结束后和\α选择美元,以便测量大约一个月不再影响加权平均无故障时间多。
 [XXXX当我们的MTBF信息少于4天时会发生什么。]
 “出口”——路由器被称为一个“出口”，如果它允许出口到每个端口80和443上至少一个/8的地址空间。(直到
   Tor版本0.3.2，如果继电器至少退出两个端口80、443和6667，则分配该标志。
 “快速”——一个路由器是“快速”，如果它是活动的，它的带宽要么在已知活动路由器的前7/8或至少100KB/s。
 “保护”——路由器是一个可能的保护，如果以下所有应用:

       -它很快，
       -它很稳定，
       -它的加权分数正常运行时间至少是“熟悉的”活跃路由器的中值，
       -它是“熟悉的”，
       -它的带宽至少是AuthDirGuardBWGuarantee(如果设置，默认为2mb)，或者它的带宽是25%最快的中继之一，
       它符合下面描述的V2Dir标志(这个约束是在0.3.3中添加的)。x，因为0。3。x客户端开始避免同样没有V2Dir标志的保护)。

        要计算加权的分段正常运行时间，需要计算路由器在任何给定的一天中运行的时间的比例，加权使得过去的停机时间和正常运行时间的计数更少。

        如果一个节点有1/8的活动节点出现的时间比它更近，或者它已经存在了几个星期，那么这个节点就是“熟悉的”。
 “权威”——如果生成网络状态文档的权威认为路由器是权威，路由器就被称为“权威”。
 “V2Dir”——路由器支持v2目录协议或更高版本，如果它的路由器描述符中有一个开放的目录端口或tunnelled-dir-server行，并且它运行的目录协议版本支持客户端所需的功能。(目前，每个支持的Tor版本都支持客户端需要的功能，但是一些中继可能会设置“DirCache 0”或者设置非常低的速率限制，这使得它们不合格成为目录镜像，也就是说，它们会从描述符中省略tunnelled-dir-server行。)
 “HSDir”——路由器是一个v2隐藏服务目录，如果它存储并提供v2隐藏服务描述符，具有稳定和快速标志，并且权威机构认为它已经运行了至少96个小时(或者是MinUptimeHidServDirectoryV2的当前值)。
 “NoEdConsensus”——当局不应该就这面国旗投票;它是作为协商一致方法22或以后的协商一致方法的一部分产生的。
 “StaleDesc”——如果描述符上发布的时间在过去超过18个小时，那么权威机构应该投票来分配这个标志。(这个标志在0.4.0.1-alpha中添加。)

   目录服务器管理员可能将某些中继或ip标记为黑名单，并选择不将它们包括在其网络状态列表中。

   当局应该“禁用”任何继电器超过2在任何单一
   IP。当有超过2个(或AuthDirMaxServersPerAddr)可供选择时，权限应该首先选择权限而不是非权限，然后选择运行权限而不是不运行权限，最后选择高带宽而不是低带宽[*]。要“禁用”一个接力，当局*应该*投票支持没有运行或有效旗帜。
 [*]在这种比较中，使用测量的带宽，除非它不存在于路由器，在这种情况下使用广告带宽。
          Bug 8710有一个补丁来改变这个行为。

   因此，网络状态投票包括所有未被列入黑名单、未过期、未被取代的描述符。

   在“w”线的带宽应该被作为路由器的实际能力的权威的最佳估计。现在，这应该是服务器描述符中观察到的带宽和带宽速率限制中较小的一个。它的单位是千字节/秒，上限是任意的值(目前是10mb /s)。

   “w”线投票的“Measured=”关键字目前是通过将先前公布的一致带宽乘以测量的平均节点流容量与网络平均容量的比率来计算的。如果3个或3个以上的权威机构为路由器提供了一个Measured=关键字，这些权威机构将产生一个包含“w”的一致意见。
   带宽=关键字等于被测量的中位数=投票。

   在“p”线中列出的端口应该被认为是那些路由器的出口策略允许的“大部分”地址的端口，忽略任何接受不是所有的地址，忽略所有拒绝的私有网块。“大多数”地址是允许的，如果不超过2^25
   IPv4地址(2 /8个网络)被阻塞。列表的编码方法如3.8.2节所述。

3.4.3。服务带宽列表文件

   如果一个机构使用了一个带宽列表文件来生成一个投票文档，那么它应该在
 http:// <主机名> /下/ bandwidth.z tor / status-vote /
 在每个投票期开始时。

   它不能尝试在HTTP POST中将它的带宽列表文件发送到其他权限，也不能使其他权限的带宽列表文件可用。

   如果授权机构使该文件可用，那么它必须是用于创建可用的投票文档的带宽文件
 http:// <主机名> /下/ authority.z tor / status-vote /

   为了避免不一致的读取，当局应该在每个投票期间只读取一次带宽文件。进一步的处理和服务应该使用缓存的副本。

   带宽列表格式在带宽-文件-spec.txt中描述。

   带宽列表文件的标准url首先出现在
   Tor 0.4.0.4-alpha。

3.5。从其他目录权威下载丢失的证书

   XXX何时下载证书。

3.6。从其他目录权限下载服务器描述符

   目录权威会定期(目前是每10秒)检查是否有任何他们没有的特定描述符，以及他们当前没有尝试下载。
   权威机构通过投票中的散列来识别它们(如果发布日期比我们目前拥有的描述符更近)。
 XXXX需要在投票前获取描述符的方法?v2状态文档现在可以这样做。

   如果是这样，目录权威机构就会向这些描述符的权威机构发起请求，这样，每个权威机构只会被请求获得在其最近的投票中列出的描述符。如果有多个机构列出描述符，我们可以随机选择问哪个。

   如果其中一个下载失败，我们不会尝试从无法再次提供该描述符的授权处下载该描述符，除非我们从列出相同描述符的授权处收到更新的网络状态(一致同意或投票)。

   目录权威机构必须潜在地为每个路由器缓存多个描述符。当局不得放弃任何近期共识中列出的描述。如果有足够的空间存储额外的描述符，当局应该尝试保存那些客户可能下载最多的描述符。(目前，这是根据每个描述符看起来是最新的时间间隔来判断的。)

   当局不应下载路由器描述符，如果他们会基于第3.2节列出的理由立即拒绝。

3.7。从其他目录权限下载额外信息文档

   权威机构定期检查是否缺少任何extra-info文档:换句话说，它是否有任何服务器描述符的extra-info-digest字段与当前持有的任何extra-info文档不匹配。如果是这样，它会下载丢失的额外信息文档。我们遵循3.6节中相同的拆分和后退规则。

3.8。从一系列投票中计算一致意见

   在给出一组投票结果后，当局会计算出一致意见的内容。

   共识状态，以及服务器目前知道的所有签名(参见下面的3.10节)，应该可以在
 http:// <主机名> /下/ consensus.z tor / status-vote /

   协商一致意见文件的内容如下:

     “验证后”、“验证直到”和“新鲜直到”时间被取为所有投票中各自值的中值。

     取“投票延迟”行的时间中值
     选票中的votesecseconds和DistSeconds。

     已知旗帜是选民所知道的所有旗帜的总和。

     大多数权威机构(全部权威，不只是参与投票的那些)对每个关键字进行了投票，或者至少有三个权威机构对该参数进行了投票，在“params”行上给出了相关条目。给定的值是对该关键字的所有投票的中值。
 (在consensus method 7 - 11包容性中，对于*any*权威投票的每个关键字，条目在“params”行给出，给出的值是对该关键字投票的低中位数。)
 “客户端版本”和“服务器版本”按升序排序;如果在投票中包含客户端版本或服务器版本行的半数以上的投票权威机构推荐某个版本，则在一致意见中推荐该版本。

     使用consensus method 19或更高版本，如果至少有三个权威机构在投票中列出了这样的包，那么就会为给定的PACKAGENAME/版本对生成一个包行。把这些行称为“输入”行
     PACKAGENAME)。共识将包含每一个“包”行，而这些行是由超过半数的权威机构列出的包名/版本对，而没有其他的。

     权威项目组(dirl -source、contact、fingerprint、vote-digest)取自投票权威机构的投票。这些组按照权限标识键的摘要按升序进行排序。如果consensus方法在3或3之后，必须为每个带有遗产键条目的投票包括一个diri -source行，使用遗产键的指纹、投票人的普通昵称(附加字符串“-legacy”)以及来自原始投票的diri -source行的所有其他字段。

     一个路由器状态条目:
        *包含在结果中，如果一些相同身份的路由器状态条目包含超过一半的权限(全部权限，而不仅仅是那些我们有投票权的权限)。(共识法早于21)

        *根据第3.8.0.1节和的规则包含在内
          3.8.0.2如下。(共识法22或以后)

        *对于任何给定的RSA身份摘要，我们最多包含一个路由器状态条目。

        *对于任何给定的Ed25519标识，我们最多包括一个路由器状态条目。

        *路由器条目设置了一个标志，如果超过半数关心该标志的权威机构设置了该标志。

        *如果两个路由器条目具有相同的<描述符摘要、发布时间、昵称、IP、端口>元组，则它们是“相同的”。
          我们选择一个给定路由器的元组作为该路由器在投票中出现最多的元组。我们首先打破捆绑，支持最近发布的，然后支持更小的服务器描述符摘要。
 (
        *如果这个routerstatus被_any_权限包含，并且所有列出它的权限都列出相同的昵称，则会出现Named标志。但是，如果使用了协商一致方法2或更高版本，并且任何权威机构都将此标识/昵称对称为未命名，那么此routerstatus将不会获得Named标志。

        *如果使用consensus-method 2或更高版本，如果任何权威机构投票赞成用该昵称命名不同的身份，或者任何权威机构将该昵称/ID对列为未命名，则未命名标志设置为routerstatus。
 (在共识方法1中，未命名的设置与其他标记一样。)
 [但请注意，当局已不再投票支持已命名的旗帜，而上述两个公告现在已无关紧要。]]

        *版本以大多数投票者所列出的版本为准，并以更近期的版本为准。

        *如果协商一致方法4或更高的是在使用中，那么路由器没有运行标志是没有列出的。

        *如果一致意见方法5或更晚的是在使用中，那么“w”线是产生使用低中位数的带宽值从投票包括“w”线这个路由器。

        *如果使用一致意见方法5或更高版本，则“p”行取自对我们所列出的描述符具有相同策略摘要的投票。(它们都应该是一样的。如果不是，我们选择最常见的一个，打破联系，支持词典上更大的投票。)端口列表按照3.8.2节的规定进行编码。

        *如果一致意见方法6或更高版本正在使用，并且如果3个或更多的权威机构在他们对路由器的投票中提供了一个Measured=关键字，这些权威机构将产生一个包含a的一致意见
          带宽=关键字等于被测量的中位数=投票。

        *如果使用一致意见方法7或更高版本，则在输出中包含params行。

        *如果consensus方法小于11，则在计算带宽权重时考虑坏出口作为可能出口。否则，如果使用方法11或更晚的方法，那么在我们计算权重时，任何确定获得BadExit标志的路由器都不算数。

        *如果采用协商一致方法12或更迟的方法，协商一致意见中只包括投票赞成的权威总人数超过一半的协商一致参数。
 [截至0.2.6.1-alpha，当局不再宣传或协商任何低于13的共识方法。]

        *如果使用协商一致方法13或之后的方法，microdesc协商将省略任何没有商定microdesc的路由器。

        *如果使用consensus方法14或更高版本，ns consensus和微描述符可能包括一个“a”行为每个路由器，列出一个IPv6或端口。

        *如果使用consensus method 15或更高版本，微描述符包括“p6”行，包括IPv6退出策略。

        *如果使用consensus方法16或以后，ntor-onion-key包括在微描述符中

        *如果使用一致方法17或更高版本，当局会在带宽上施加一个最大值=他们会在“w”线上为任何没有在投票中至少有3个测量带宽值的路由器设置一个值。他们还在这些“w”线上添加了一个“Unmeasured=1”标志。

        *如果使用18号共识法或更晚的方法，权威机构在微描述符中包括“id”线。此方法添加RSA id。

        *如果使用第19条或更晚的协商一致方法，当局可以在协商一致中包含“一揽子”条款。

        *如果使用协商一致方法20或更迟的方法，权威机构可包括在内
          微描述符中的警戒分数信息。

        *如果使用共识法21或更高版本，当局可能会在微描述符中包含ed25519身份的“id”行。
 [在0.2.8.2-alpha，当局不再宣传或协商一致方法21，因为它包含bug。]

        *如果使用一致方法22或更晚，并且投票没有产生关于一个继电器的Ed25519密钥的多数一致意见(见
          (3.8.0.1下文)，对于所列Ed键不反映一致意见的每个继电器，一致意见必须在“s”线上包含一个NoEdConsensus标志。

        *如果采用一致方法23或更晚的方法，权威机构应包括其投票和一致意见的共享随机方案数据。

        *如果共识方法24或更晚正在使用，然后路由器没有有效的标志是没有列出的所有。
 [截至0.3.4.1-alpha，当局不再宣传或协商任何低于25的共识方法。]

        *如果采用一致意见方法25或更晚的方法，我们将对一致意见中推荐的协议和要求的协议行进行投票。我们还在routerstatus条目中包括协议线。

        *如果使用一致意见方法26或更晚，那么我们在计算中将权值初始化为1，以避免在不寻常的网络上出现除法乘零的错误。

        *如果使用27或更晚的一致方法，microdesc一致可能包括一个“a”线为每个路由器，列出一个IPv6或端口。
 [截至0.4.3.1-alpha，当局不再宣传或协商任何低于28的共识方法。]

        *如果使用第28号一致法或以后的方法，微描述符不再包括“a”行。

        *如果使用consensus method 29或更高版本，则将微描述符“家族”行规范化，以改进压缩。

        *如果使用consensus method 30或更高版本，则base64编码的ntor-onion-key不包括尾部=符号。

     共识文档末尾的签名按身份摘要升序排序。

   在计算中位数时，为了更小或更早的项，所有的关系都被打破。

3.8.0.1。决定包含哪些id。

  这种排序算法被用于consensus-method 22及以后。

  首先，根据<Ed,Rsa>身份的元组考虑每个清单，如果投票者包含“id ed25519 None”，表示权威机构知道ed25519身份是什么，并认为Rsa密钥没有，那么‘Ed’可能是“None”。

  对于每个<Ed的RSA>元组，它是由超过半数的权威(不只是总投票)列出的，包括它。(其他任何<id-Ed, id-RSA'>不可能有同样多的投票。)如果超过半数的权威机构列出了单一的<Ed,Rsa>对这种类型，我们认为Ed密钥是“一致的”;请参阅
    NoEdConsensus国旗。

  记录与我们包含的id-Ed对应的任何其他id-RSA值，以及与我们包含的id-RSA对应的任何其他id-Ed值。

  对于每个还未包括的<id-RSA>，如果它被超过一半的权威列出，并且我们还没有将它与一些<id-Ed>一起列出，包括它，但不认为它的Ed身份规范。

3.8.0.2。决定包含哪些描述符

   决定包含哪些描述符。

   一个元组属于一个< ID -RSA, ID -Ed>身份，如果它是一个新的元组，匹配两个ID部分，或者如果它是一个旧的元组(没有Ed意见)，匹配RSA部分。一个元组属于一个<id-RSA>身份，如果它
   RSA的身份匹配。

   如果两个元组中出现的所有字段相同，则一个元组与另一个元组匹配。

   对于包含的每个标识，考虑属于该标识的元组。将它们分组为一组匹配的元组。包括匹配最大集合的元组，中断绑定以支持最近发布的元组，然后支持较小的服务器描述符摘要。

3.8.1。向前兼容性

   Tor的未来版本将需要在共识文件中包含新的信息，但重要的是所有权威机构(或至少一半)生成并签署相同的已签署共识。

   为了实现这一点，当局在投票中列出了他们支持的从投票中产生共识的方法。以后的方法将被分配更大的数字。目前指定的方法:
 “1”——第一个实现的版本。"2"——增加了对未命名标志的支持。“3”——增加了传统ID键支持，以帮助权限ID键滚动。“4”——不再列出不在一致“5”中运行的路由器——增加了对“w”和“p”线的支持。“6”——喜欢测量带宽值而不是广告“7”——提供关键字=整数参数对共识“8”——提供microdescriptor总结“9”——提供重量选择标记“10”——修复边缘路由器的路径错误在路由器国旗选择权重“11”——不考虑BadExits当计算带宽权重“12”- - - Params只包括如果足够的auth投票支持他们“13”——省略路由器与失踪microdescriptors条目。“14”——增加了对ns协议和微描述符中的“a”行的支持。“15”——增加对“p6”行的支持。“16”——给微描述符添加ntor键“17”——给“w”行添加“Unmeasured=1”标记“18”——给微描述符添加“id”。“19”——在共识“20”上增加了“package”行——在微描述符上增加了“GuardFraction”信息。“21”——将Ed25519键添加到微描述符。“22”——正确实例化Ed25519投票算法。“23”——添加共享的随机协议数据。“24”——不再列出在consensus中无效的路由器。“25”——对推荐协议和要求协议进行表决。“26”——将带宽权重初始化为1，以避免除法减0。“27”——增加了对微描述符协商中的“a”行的支持。“28”——从微描述符中删除“a”行。“29”——用微描述符将家族规范化。“30”——从ntor-onion-key删除填充。

   在形成共识之前，权威机构必须决定使用哪种共识方法。为了做到这一点，它需要寻找获得超过2/3权威投票支持的最高版本。如果它支持这个方法，那么它就会使用它。否则，它就会回到它所支持的最新的一致方法(这可能不会产生一个充分签署的一致意见)。

   所有当局必须支持方法25;当局也应该支持更新式的方法。在25岁之前，当局不应该支持或宣传支持任何方法。客户可能会认为，在方法25之前，他们永远不会看到任何方法的当前有效的已签署的共识。
 (新方法产生的共识必须能够被仅理解旧方法的实现解析，并且不能导致那些实现破坏其匿名性。这是改变协商一致意见内容的一种手段;不是为了对格式进行向后不兼容的更改。)

   下列方法实现不正确;当局应该
   不宣传支持他们:
 “21”——没有正确启用对ed25519键排序的支持。

3.8.2。编码端口列表

  摘要显示的是接受端口列表还是拒绝端口列表取决于哪个列表更短(字符串表示更短)。在绑定的情况下，我们选择接受端口列表。作为该规则的一个例外，允许所有策略表示为“accept 1-65535”而不是“reject”，而拒绝所有策略类似地表示为“reject 1-65535”。

  摘要条目被压缩，即不是“80-88,89-100”，而是一个“80-100”，类似的，不是“20,21”，而是“20-21”。

  端口列表按升序排序。

  策略摘要(包括“接受”或“拒绝”)允许的最大长度为1000个字符。如果一个摘要超过了这个长度，我们将使用一个接受样式的摘要，并在这1000字节内列出尽可能多的端口列表。(再具体一点。)

3.8.3。权重计算带宽

  令weight_scale = 10000

  从一致方法26开始，G、M、E和D被初始化为1和
  T 4。之前的consensus方法将它们都初始化为0。有了这个变化，新的或小的tor网络更有可能在他们的共识中产生带宽权重。额外的带宽对公共tor网络的带宽权重影响可以忽略不计。

  设G为监视标记节点的总带宽。
  设M为非标记节点的总带宽。
  设E为输出标记节点的总带宽。
  设D为警卫+标记出的节点的总带宽。
  设T = G+M+E+D

  让Wgd为选择守卫的权重+守卫位置的出口。
  让Wmd作为选择一个后卫的权重+中间位置的出口。
  设我们为选择后卫的权重+退出位置的权重。

  设Wme为中间位置选择退出的权重。
  让Wmg是为中间位置选择一个后卫的权重。

  让Wgg为后卫位置选择一个后卫的权重。
  设我们是为退出位置选择退出的权重。

  平衡的网络条件则由以下方程组的解产生:

      Wgg*G + Wgd*D == M + Wmd*D + Wme*E + Wmg*G(护卫队bw =中bw)
      Wgg*G + Wgd*D == Wee*E + Wed*D(警卫bw =出口bw)
      Wed*D +Wmd *D + Wgd*D == D(即Wed+Wmd+Wdg = weight_scale)
      Wmg*G + Wgg*G == G(又名:Wgg = weight_scale-Wmg)
      Wme*E + Wee*E == E(又名:Wee = weight_scale-Wme)

  我们在上面的集合中缺少2个约束，剩下的约束来自于对不同网络负载情况的检查。以下约束条件在consensus method 10及以上使用。在consensus method 9中还使用了另一套不正确和过时的约束。对于这些，请参见Tor 0.2.2.10-alpha到0.2.2.16-alpha中的dir-spec.txt。

  案例1:E >= T/3 && G >= T/3(不退出也不防范)

    在本例中，附加的两个约束是:Wmg == Wmd，
    结婚= = 1/3。

    这就引出了解决方案:
        Wgd = weight_scale / 3
        结婚= weight_scale / 3
        大规模杀伤性武器= weight_scale / 3
        凌晨= (weight_scale * (E + G + M)) / (3 * E)
        Wme =称量- Wee
        Wmg = (weight_scale * (2 * G-E-M)) / (3 * G)
        Wgg = weight_scale - Wmg

  案例2:E < T/3 && G < T/3(均为稀缺)

    让R表示守卫和退出之间的更稀有的类(稀有)。
    表示较少稀缺类。

    子情形a: R+D < S

       在这个子例子中，我们只是把所有的D带宽都给了稀缺类。

       Wgg = Wee = weight_scale
       Wmg = Wme = Wmd = 0;如果E < G:
         结婚= weight_scale
         Wgd = 0
         结婚= 0
         Wgd = weight_scale

    子情形b: R+D >= S

      在这种情况下，如果M <= T/3，我们有足够的带宽来尝试实现一个平衡条件。

      添加约束Wgg = weight_scale, Wmd == Wgd，使保护位置的带宽最大化，同时仍然允许出口作为中间节点:

        Wee = (weight_scale*(E - G + M))/E
        Wed = (weight_scale*(D - 2*E + 4*G - 2*M))/(3*D)
        Wme = (weight_scale *(转基因))/ E
        Wmg = 0
        Wgg = weight_scale
        Wmd = (weight_scale - Wed)/2
        Wgd = (weight_scale - Wed)/2

      如果这个系统最终有任何超出范围的值(如负的，或高于weight_scale)，使用约束Wgg == weight_scale和Wee == weight_scale，因为这两个位置都是稀缺的:

         Wgg = weight_scale
         凌晨= weight_scale
         Wed = (weight_scale*(D - 2*E + G + M))/(3*D)
         Wmd = (weight_Scale*(D - 2*M + G + E))/(3*D)
         Wme = 0
         Wmg = 0
         Wgd = weight_scale - Wed - Wmd

      如果M > T/3，则以上Wmd权重变为负值。在本例中设置为0:
         大规模杀伤性武器= 0
         Wgd = weight_scale - Wed

  情形3:其中E < T/3或G < T/3

    让我们做(E或G的)稀有班吧。

    子例a:(S+D) < T/3:如果G=S:
        Wgg = Wgd = weight_scale;
        Wmd = Wed = Wmg = 0;//小子例，如果E比M更少，//保持它的带宽到位。如果(E < M) Wme = 0;Wme = (weight_scale*(E- m))/(2*E);
        凌晨= weight_scale-Wme;如果E = S:
        Wee = Wed = weight_scale;
        Wmd = Wgd = Wme = 0;//小子例，如果G比M更少，//保持它的带宽到位。如果(G < M) Wmg = 0;Wmg = (weight_scale*(G- m))/(2*G);
        Wgg = weight_scale-Wmg;

    如果G=S，则子情况b:(S+D) >= T/3:
        增加约束Wgg = weight_scale, Wmd == Wed以最大化保护位置的带宽，同时仍然允许出口被用作中间节点:
          Wgg = weight_scale
          Wgd = (weight_scale*(D - 2*G + E + M))/(3*D)
          Wmg = 0
          凌晨= (weight_scale * (E + M)) / (2 * E)
          Wme =称量- Wee
          Wmd = (weight_scale - Wgd)/2
          如果E=S，则Wed = (weight_scale - Wgd)/2:
        添加约束条件Wee == weight_scale, Wmd == Wgd以最大化退出位置的带宽:
          凌晨= weight_scale;
          Wed =(体重秤*(D - 2*E + G + M))/(3*D);
          Wme = 0;
          Wgg = (weight_scale * (G + M)) / (2 * G);
          Wmg = weight_scale - Wgg;
          Wmd = (weight_scale - Wed)/2;
          Wgd = (weight_scale - Wed)/2;

  为了确保一致性，所有计算都使用整数数学来执行，其精度由bwweightscale consensus参数确定(缺省值为10000,Min: 1, Max: INT32_MAX)。

  为了将来的平衡改进，Tor客户端支持11个额外的目录请求权重和中间权重。这些权重目前在weight_scale上设置，但下列分配组除外:

  目录请求使用中间权重:

     Wbd=Wmd, Wbg=Wmg, Wbe=Wme, Wbm=Wmm

  处理桥梁和奇怪的退出政策:

     Wgm = Wgg电话=凌晨,Weg =结婚

3.9。计算共识口味

   Consensus口味是Consensus的变体，客户可以选择下载和使用，而不是无味道的Consensus。一致性样式的目的是删除或替换无味道一致性中的信息，而不迫使客户下载他们无论如何都不会使用的信息。

   目录权限可以生成并提供相同共识的任意数量的样式。创建太多新口味的缺点是客户端会根据下载的口味进行区分。在添加字段时不应该创建新样式，否则会太麻烦。

   一致口味的例子包括:

      -发布微描述符的散列，而不是完整描述符的散列(见3.9.2节)。
      -包括不同的描述符摘要，而不是可能很快就会完全崩溃的SHA1。

   一旦投票过程完成，一致意见就会从无味道的一致意见中衍生出来。这是为了避免一致同步问题。

   每一种一致风格都有一个名称，由一个或多个字母数字字符和破折号组成的序列。为了兼容，最初的(无调味的)一致类型被称为“ns”。

   支持的一致口味被定义为权威的一致方法的一部分。

   所有的consensus口味都有一个共同点，他们的第一行是“network-status-version”，其中版本是3或更高，口味是一个由字母数字字符和破折号组成的字符串:
 "网络状态版本" SP版本

3.9.1。ns共识

   ns一致味道相当于无味道一致。
   如果在“网络状态版本”行中省略了风味，则应该假定它是“ns”。有些实现可能在生成共识时显式地声明味道是“ns”，但是应该接受省略了味道的共识。

3.9.2。Microdescriptor共识

   微描述符一致性是一种一致性风格，它包含微描述符散列而不是描述符散列，并且省略了微描述符中包含的退出策略总结。微描述符共识被设计用来包含小的和经常变化的元素。客户端使用微描述符共识中的信息来决定获取关于哪些服务器的信息，以及从哪些服务器获取信息。

   微描述符共识基于无调味共识，但有以下例外:
 "网络状态版" SP "microdesc" NL
 (一开始，就一次。)

        微描述符共识的风格名称是“microdesc”。

   路由器状态条目的变化如下:
 “r”SP昵称SP身份SP发布SP IP ORPort
        SP DirPort问
 (一开始，就一次。)

        类似于3.4.1节中的“r”行，但是没有摘要元素。
 一个“SP地址”:“端口NL。
 (任意数量)

        与3.4.1节中的“r”行相同。
 (仅适用于一致意见方法14或以上产生的投票，以及一致意见方法27或以上产生的一致意见。)
 “p”……问
 (最多一次)

        目前还没有生成。

        退出策略摘要包含在微描述符中，因此在微描述符共识中被忽略。
 "m" SP摘要NL
 (一次。*)
 “摘要”是路由器微描述符SHA256散列的base64，尾部省略=s。对于给定的路由器描述符摘要和一致方法，在所有投票的“m”行中应该只有一个微描述符摘要。
        如果不同的投票对相同的描述符摘要和共识方法有不同的微描述符摘要，至少有一个权威被打破。如果发生这种情况，microdesc共识应该包含最常见的微描述符摘要。如果没有赢家，我们就打破平局，以有利于词汇上最早的一方。
 [*在consensus method 13之前，这个领域有时会被错误地省略。]

   此外，微描述符一致应该对其签名使用sha256摘要算法。

3.10。交换分离签名

   一旦一个权威机构计算并签署了一个一致的网络状态，它应该在HTTP POST请求中向其他权威机构发送它的分离签名:
 http:// <主机名> / tor / post / consensus-signature
 [XXX说明为什么我们支持推然后拉。]

   它所知道的作为协商一致意见的所有独立签名应提供于:
 http:// <主机名> /下/ consensus-signatures.z tor / status-vote /

   假设完全连接，每个机构都应该计算并签署相同的共识，包括每个时期的任何风格。因此，不需要下载由各权威机构计算的共识或任何形式的共识;相反，当局只会推动/获取彼此的签名。“独立签字”文件内容如下:
 “共识消化
 [开始时，最多一次。]

        正在签署的共识摘要。
 "valid-after" SP YYYY-MM-DD HH:MM:SS NL "fresh-until" SP: yyy -MM- dd HH:MM:SS NL "valid-until" SP: yyy -MM- dd HH:MM:SS NL
 [如在共识中]
 “添加-消化”SP风味SP藻类SP消化NL
 (任意数量。)

        对于每种受支持的一致性风格，每个目录权威都会添加一个或多个“添加-摘要”行。“flavor”是consensus flavor的名称，“algname”是用于生成摘要的哈希算法的名称，“digest”是十六进制编码的摘要。

        微描述符一致风格的哈希算法被定义为SHA256，其算法名为“SHA256”。
 “附加签名”SP风味SP algname SP身份SP签名-键摘要NL签名。
 (任意数量。)

        对于每种支持的一致性风格和定义的摘要算法，每个目录权威都会添加一个“附加签名”行。“口味”是一致口味的名称。“algname”是用于哈希身份和签名密钥以及计算签名的算法的名称。“identity”是签名机构的权限标识密钥的十六进制编码摘要，“签名键摘要”是签名机构的当前权限签名密钥的十六进制编码摘要。

        “sha256”签名格式定义为要签名的项的OAEP+填充的sha256摘要的RSA签名。在检查签名时，如果签名材料以SHA256(document)开头，则必须将签名视为有效，以便以后可以添加其他数据。[说实在的，上一段我并没有完全理解，只是从proposal里抄过来的。仔细审查。吉隆坡)
 “directory-signature”
 [如在共识中;签名对象与共识文档中的相同。

3.11。发布已签署的共识

   投票期间在有效后时间结束。如果协商一致意见已由大多数当局签署，这些文件可在以下网址查阅
 http:// <主机名> / tor / status-vote /经常/ consensus.z
 和
 http:// <主机名> / tor / status-vote /经常/ consensus-signatures.z
 [XXX当前/共识签名目前未实施，因为投票协议中未使用。]
 [XXX未来可能的功能包括支持下载旧的共识。]

   其他表决文件同样可根据
 http:// <主机名> / tor / status-vote /电流/权威。z http:// <主机名> / tor / status-vote /电流/ < fp >。z http:// <主机名> / tor / status-vote /电流/ d / d < >。z http:// <主机名> / tor / status-vote /经常/ bandwidth.z
 一旦投票期结束，无论签名人数如何。

   当局对每个地方的每一种“F”口味提供另一种共识
 / tor status-vote /(当前|下一个)/ consensus-F.z。和/ tor / status-vote /(当前|下一个)/ consensus-F / < FP1 > + z。

   带宽列表文件的标准url首次出现在Tor 0.3.5中。

4. 目录缓存操作

   所有的目录缓存都实现了这个部分，除了前面提到的。

4.1。从目录权限下载协商一致状态文档

   所有目录缓存都试图保持一个最近的网络状态一致文档来服务于客户端。如果下列任何一项为真，缓存总是下载一个网络状态共识:

     -缓存没有共识文件。
     -缓存的共识文件不再有效。

   否则，缓存将在当前共识停止刷新后的前半段时间内随机选择一个时间下载一个新的共识文档。(这段时间是随机选择的，以避免在每个时期开始时让当局拥挤。区间大小是根据共识的后生效时间和新生效时间之间的差异来推断的。
 [例如，如果一个缓存有一个一致意见在1:00生效，并且在2:00之前都是新鲜的，那么该缓存将在2:00到2:30之间随机获取一个新的一致意见。]

   目录缓存也可以从权威机构获得一致意见。
   缓存检查一致风格的正确性，但是不会检查任何超出其摘要和长度的未识别的一致文档。缓存提供与目录权限相同位置的所有一致口味。

4.2。从目录权限下载服务器描述符

   定期(当前，每10秒)，目录缓存检查是否有它们没有的特定描述符，以及它们当前没有尝试下载。缓存通过最近的网络状态一致文档中的散列来识别这些描述符。

   如果是这样，目录缓存将启动对这些描述符的请求。

   如果其中一个下载失败，我们不会尝试从无法再次提供该描述符的机构下载该描述符，除非我们收到列出相同描述符的更新的网络状态一致意见。

   目录缓存必须潜在地为每个路由器缓存多个描述符。缓存不能丢弃任何根据最近一致意见列出的描述符。如果有足够的空间存储额外的描述符，缓存应该尝试保存那些客户端可能下载最多的描述符。(目前，这是根据每个描述符最新的时间间隔来判断的。)
 (最近XXXX定义)

4.3。从目录权限下载微描述符

   目录镜像应该从权限处获取、缓存和服务每个微描述符。

   base64哈希值<D1>，<D2>，<D3>的微描述符可在:
 http:// <主机名> / tor /微/ d / < D1 > - < D2 > < D3 >[还是z]
 <Dn>是base64编码，尾部省略=s，这是为了大小和与microdescriptor一致格式的一致性。使用-s而不是+s来分隔项，因为在base64编码中使用了+字符。

   目录镜像应该进行检查，以确保它们将要提供的微描述符匹配正确的散列(分别是来自fetch URL的散列或来自consensus的散列)。
 (注意:由于乌贼代理url的限制，在一个请求中最多可以检索92个microdescrriptor散列。)

4.4。从目录权限下载额外信息文档

   任何选择缓存extra-info文档的缓存都应该实现此部分。

   Tor实例定期检查是否缺少任何extra-info文档:换句话说，如果它有任何带有extra-info-digest字段的服务器描述符与当前持有的任何extra-info文档不匹配。如果是这样，它会下载丢失的额外信息文档。缓存从当局下载。我们遵循与4.2节相同的拆分和后退规则。

4.5。共识的差别

   客户不必下载整个一致意见，而可以下载包含以前一致意见文档中ed风格差异的“差异”文档。缓存(和权限)使这些不同，因为他们学习新的共识。要做到这一点，他们必须存储一个旧共识的记录。
 (在0.3.1.1-alpha中添加了对consensus diffs的支持，并在DirCache协议版本“2”或更高版本中进行了宣传。)

4.5.1。共识diff格式

   共识差异格式如下:

   第一行是“网络-状态-扩散-版本1”NL

   第二行是
 “哈希”SP从消化SP到消化NL
 FromDigest是使用十六进制编码的SHA3-256格式的一致性(有签名的部分)摘要，并且
   “ToDigest”是由应用差异而产生的整块一致性的十六进制编码的SHA3-256摘要。

   第三行和后面的行将diff从FromDigest编码为
   在附录E中指定的ed diff格式的有限子集中进行摘要。

4.5.2。服务和请求的区别。

   当下载当前共识时，客户端可能包括
   表单的HTTP头

        不同于共识:HASH1, HASH2，…
 其中的散列值是客户端知道的一个或多个共识的_signed part_的十六进制的SHA3-256摘要。

   如果缓存知道这些一致意见与请求风格的最新一致意见之间存在差异，它可能会发送该差异，而不是指定的一致意见。

   缓存服务也不同于uri:
 / tor / status-vote /电流/共识/ diff / <散列> / < FPRLIST >。z / tor / status-vote /电流/共识——<味道> / diff / <散列> / < FPRLIST >还是z
 口味是一致口味，默认为“ns”，还有
   FPRLIST是由+-分隔的认可权威身份指纹表，如附录B所示。

4.6下载重试失败

   见下文第5.5节;它既适用于缓存，也适用于客户机。

5. 客户端操作

   不是目录服务器的每个Tor(即没有DirPort集的Tor)都实现这个部分。

5.1。下载网络状态文件

   每个客户端维护一个目录权限列表。在尽可能的情况下，客户应该使用相同的列表。
 [较新的Tor版本(0.2.8.1-alpha及更高版本):
   每个客户端还维护一个默认回退目录镜像(回退)列表。Tor的每个发布版本可能有一个不同的列表，这取决于在发布时满足回退目录条件的镜像。

   客户端试图在任何时候都有一个实时的共识网络状态文档。
   如果网络状态文档的valid-after字段中的时间已通过，而其valid-until字段中的时间未通过，则该文档为“活动的”。

   当客户机没有一致的网络状态文档时，它将从随机选择的备份目录镜像或权限中下载该文档。与权威机构相比，客户更喜欢后退，更早、更频繁地尝试。
   在所有其他情况下，客户端从那些被认为是V3目录服务器的缓存中随机选择下载。(该信息来自网络状态文档。)

   在接收到任何响应后，客户端必须丢弃它没有请求的任何网络状态文档。

   失败时，客户端稍事等待，然后从另一个缓存再次尝试网络状态文档。客户端在拥有一个实时网络状态共识文档之前不会构建电路，并且它拥有它认为正在运行的大部分路由器的描述符(这可以使用torrc选项和共识参数进行配置)。
 [较新的Tor版本(0.2.6.2 alpha及更高版本):
   如果共识包含出口(典型的情况)，Tor将建立出口和内部电路。当引导程序完成时，Tor将准备处理请求退出电路的应用程序，例如
   万维网。

   如果共识不包含出口，Tor将只建立内部电路。在本例中，前面的状态将包含如上所述的“内部”。当引导完成，Tor将准备处理一个应用程序请求内部电路隐藏服务在"。洋葱”地址。

   如果未来共识包含退出，则可能出现退出电路。
 (注:客户可以而且应该选择基于网络状态信息的缓存:一旦第一个获取网络状态信息从一个权威或回退,他们不应该再次需要直接去权威,而且应该只选择随机回退,基于其共识重量在当前的共识。)

   为了避免在一个共识到期时让缓存拥挤起来，客户端在一个随机选择的时间下载新的共识，这个时间是在缓存预期会有一个新的共识到期之前。(此时间从一致意见不再新鲜后的第一个间隔的时间3/4中均匀随机选取，且一致意见无效后剩余时间的7/8。)
 (例如,如果一个客户有一个共识,成为有效的一点,是新鲜的,直到两点,4点到期,客户端将获取一个新的共识在随机时间2:45和50分之间,由于3/4的小时的间隔是45分钟,剩下的7/8 75分钟是65分钟。)

   客户端可以选择下载微描述符共识，而不是一般的网络状态共识。在这种情况下，他们应该使用与正常共识相同的更新策略。他们不应该下载一个以上的一致风格。

   当客户端没有一个有效的共识时，它通常会使用最近的共识，如果这个共识是“合理有效的”。一个“合理有效的”共识是指一个在24小时前就已经失效的共识。

5.2。下载服务器描述符或微描述符

   客户端试图为每个路由器提供最佳描述符。描述符是“最好的”，如果:

      *在共识网络状态文件中列出。

   客户端定期(目前是每10秒)检查是否有任何“可下载”的描述符。描述符可下载，如果:

      -这是一些路由器的“最佳”描述符。
      描述符至少在10分钟前发布。(这可以防止客户端试图获取镜像可能还没有检索和缓存的描述符。)
      -客户目前没有它。
      -客户端目前没有尝试下载它。
      -客户不会在收到后立即弃用。
      -客户端认为它是运行的和有效的(见下文5.4.1节)。

   如果至少有16个已知路由器有可下载的描述符，或者自客户端上次尝试下载描述符以来已经经过了足够的时间(目前为10分钟)，它就会启动对所有可下载描述符的请求。

   当下载多个服务器描述符时，客户端选择多个镜像以便:

     -至少使用了3个不同的镜像，除非这将导致对4个以下描述符的多个请求。
     -从单一镜像请求的描述符不超过128个。
     -否则，尽可能少使用镜子。
   选择镜像后，客户端将描述符随机地进行划分。

   在接收到任何响应后，客户端必须丢弃它没有请求的任何描述符。

   当描述符下载失败时，客户端会注意到它，并且在一段时间后才认为描述符可以再次下载。(目前第一次失败0秒，第二次失败60秒，第三次失败5分钟，第4次失败10分钟，之后是1天。)客户端定期(当前为每小时一次)重置失败计数。

   客户端保留为每个路由器下载的最新描述符，只要它在一致性中列出。如果它没有被列出，只要它不是太旧(目前，ROUTER_MAX_AGE=48小时)，并且没有更好的路由器描述符为同一中继下载。缓存保留描述符，直到它们至少是
   OLD_ROUTER_DESC_MAX_AGE = 5天。

   选择下载微描述符一致而不是一般一致的客户机必须下载引用的微描述符而不是服务器描述符。客户端在启动时预先从dir镜像获取和缓存微描述符，就像它们当前获取描述符一样。自举之后，客户机只需要获取已更改的微描述符。

   当客户端获得一个新的微描述符共识时，它会查看是否有需要学习的微描述符，然后启动对它们的请求。

   客户端维护微描述符和元数据的缓存，比如它最后一次被一致意见引用的时间，以及它对应的身份密钥。他们保留一个微描述符，直到一个星期没有任何共识提及它。未来的客户机可能会将它们缓存更长或更短的时间。

5.3。下载extra-info文档

   任何使用extra-info文档的客户机都应该实现此部分。

   请注意，通常客户端不需要额外信息文档。

   Tor实例定期检查是否缺少任何extra-info文档:换句话说，如果它有任何带有extra-info-digest字段的服务器描述符与当前持有的任何extra-info文档不匹配。如果是这样，它会下载丢失的额外信息文档。客户端尝试从缓存中下载。
   我们遵循与5.2节中相同的分离和返回规则。

5.4。使用目录信息
 本小节实际上属于路径规范。三种,而不是这里。吉隆坡)

   除了目录权限之外，每个人都使用本节中的方法来决定使用哪些中继以及它们的密钥可能是什么。(目录权威只相信他们自己的观点，如上文3.4.2节所述。)

5.4.1之前。为电路选择路由器。

   在客户端有足够的目录信息之前，不应该构建电路:实时一致网络状态[XXXX回退?和至少1/4的继电器的描述符被认为在运行。

   如果一致网络状态文档中包含继电器，则继电器被“列出”。客户端不应该使用未列出的继电器。

   这些标志使用如下:

     -客户端不应该使用非'有效'或非'运行'路由器，除非被要求这样做。

     -客户端不应该将非“快速”路由器用于任何目的，除了极低带宽的电路(如引入电路)。

     -客户端不应该使用非稳定路由器的电路可能需要很长一段时间的开放(如那些用于
       IRC或SSH连接)。

     -客户端在选择入口防护节点时不应该选择非“防护”节点。

   看到“path-spec。txt”文档了解更多细节。

5.4.2。管理命名
 (删除此部分;当局不再指定“已命名”国旗。)

5.4.3。软件版本

   Tor的实现应该在获得一致的网络状态，并且运行的软件版本没有列出时发出警告。

5.4.4。关于路由器状态的警告。
 (删除此部分;当局不再指定“已命名”国旗。)

5.5。重试下载失败

   本节既适用于客户机，也适用于缓存。

   当客户端下载资源(共识、路由器描述符、微描述符等)失败时，它会等待一定的时间，然后再重新尝试下载。为了确定等待的时间，客户使用随机指数后退算法。(具体来说，它们使用了来自https://aws.amazon.com/blogs/architecture/exponential-backoffandjitter/的“decorrelated jitter”算法的变体。)

   计算'i+1'时延的具体公式为:

        其中upper_bound = MAX(lower_bound+1, Delay_i * 3) lower_bound = MAX(1, base_delay)。

   'cap'的值被设置为INT_MAX;'base_delay'的值取决于下载的内容、客户端是否完全启动、客户端如何配置以及从哪里下载。当前base_delay值为:

   Consensus对象，作为一个非桥缓存:
         0 (TestingServerConsensusDownloadInitialDelay)

   共识对象，作为一个客户或桥梁已经启动:
         0 (TestingClientConsensusDownloadInitialDelay)

   当连接到一个权限(因为没有已知的“回退”缓存)时，Consensus对象作为自举的客户机或桥接:
         0 (ClientBootstrapConsensusAuthorityOnlyDownloadInitialDelay)

   共识对象，作为自举的客户端或桥接，当“回退”缓存已知但无论如何都连接到一个权威时:
         6 (ClientBootstrapConsensusAuthorityDownloadInitialDelay)

   从“回退”缓存下载时，Consensus对象作为自引导的客户机或桥接。
         0 (ClientBootstrapConsensusFallbackDownloadInitialDelay)

   桥描述符，当至少有一个桥可用时作为桥使用客户端:
         10800 (TestingBridgeDownloadInitialDelay)

   桥描述符,否则:
         0 (TestingBridgeBootstrapDownloadInitialDelay)

   其他对象，如缓存或权限:
         0 (TestingServerDownloadInitialDelay)

   其他对象，如客户端:
         0 (TestingClientDownloadInitialDelay)


6. 标准的兼容性

   所有客户端和服务器都必须支持HTTP 1.0。客户端和服务器也可能支持最新版本的HTTP。

6.1。HTTP头信息

  服务器应该将内容编码设置为用于压缩所提供的文档的算法。公认的算法是:

     - "身份" - RFC2616第3.5节
     - "deflate" - RFC2616第3.5节
     - "gzip" - RFC2616第3.5节
     - "x-zstd" - zstandard压缩算法(www.zstd.net)
     -“x-tor-lzma”-lzma压缩算法，具有不高于6的“预设”值。

  客户端应该对大多数目录请求使用接受编码，以表明它们支持上述哪种压缩算法。如果他们省略它(就像Tor客户端在0.3.1.1-alpha之前所做的那样)，那么服务器应该只提供“deflate”或“identity”编码文档，基于存在或不存在的。"在被请求的URL上添加后缀。

  请注意，对于匿名目录请求(即通过多跳电路发出的请求，如洋葱服务查找)实现
  不应该宣传任何接受编码值，除了紧缩。这样做将创造一个指纹识别的机会。

  当接收多个文档时，客户端必须接受压缩的连接文档和连接的压缩文档作为等价的东西。

  服务器可以设置内容长度:标题。当它们这样做时，它应该匹配它们正在发送的压缩字节数。

  服务器可能包含一个X-Your-Address-Is:头，其值是连接到它们的客户端的明显IP地址(作为点四轴)。
  对于在BEGIN_DIR流上隧穿的目录连接，服务器应该报告携带BEGIN_DIR流的电路到达它们的IP。

  服务器应该禁用多个网络状态或多个服务器描述符的缓存。服务器可以缓存单一描述符、单一网络状态、所有服务器描述符列表、v1目录或v1运行的路由器文档。XXX提及。

6.2。HTTP状态代码

  Tor提供以下状态代码。有些人未经深思熟虑就被选中;其他代码还不应该依赖于特定的状态代码。

  200——操作成功完成
      ——用户请求状态或服务器，我们请求的状态或服务器都没有找到(0.2.0.4-alpha和更早的版本)。

  304——客户机指定了一个if-modified-since时间，并且从那时起请求的资源没有任何更改。

  400——请求格式不正确，或者
      ——URL用于我们支持的某个URL的畸形变体，或者
      ——客户试图向非授权人员发布，或
      ——当局拒绝了一份格式畸形的邮寄文件

  404——找不到所请求的文档。
      ——用户请求状态或服务器，但是没有找到所请求的状态或服务器(0.2.0.5-alpha及以后)。

  为了节省带宽，我们拒绝了这个请求
      ——user请求一些我们通常生成或存储的项目，但我们没有任何可用的。

答:Consensus-negotiation时间表。

   周期开始:这是发布时间。
     每个人都送票
   和解:每个人都试图争取失去的选票。在这一点上可能存在共识。
   投票结束:每个人交换签名。
   现在缓存可以下载了
     现在客户端可以下载了。

   经/有效期至切换

一般使用的HTTP url
 这些url中的“指纹”是base16编码的SHA1哈希。

   最新的v3共识可在以下地方获得:
 http:// <主机名> / tor / status-vote /经常/ consensus.z

   类似地，v3微描述符一致应该在以下地方可用:
 http:// <主机名> / tor / status-vote /经常/ consensus-microdesc.z

   从Tor版本0.2.1.1-alpha开始，也可以在以下地方获得:
 http:// <主机名> / tor / status-vote /电流/共识/ < F1 > + < F2 > + < F3 >还是z
 (注意:由于乌贼代理url的限制，一个请求最多可以检索96个指纹。)

   其中F1、F2等为客户信任的权限身份指纹。
   服务器只有在超过半数的被请求机构签署了文件后才会返回一致意见，否则服务器将返回一个404错误。只需使用已编码指纹的最左边部分，指纹的长度就可以缩短为2的任意倍数。Tor使用
   指纹的3个字节(6个十六进制字符)。

   客户端应按升序对指纹进行排序。服务器必须接受任何订单。

   当客户端从目录权限服务器和运行已知支持此URL格式的Tor版本的缓存中请求一致文档时，应该使用此格式。

   所有当前密钥证书的连接集合应该在以下地方可用:
 http:// <主机名> / tor /键/ all.z

   此服务器(如果是权威机构)的密钥证书应可在以下地址获得:
 http:// <主机名> / tor /键/ authority.z

   对于权威身份指纹<F>的权威机构，其密钥证书应在:
 http:// <主机名> / tor /键/ fp / < F >还是z

   签名密钥指纹<F>的密钥证书可在:
 http:// <主机名> / tor /键/ sk / < F >还是z

   身份密钥指纹<F>，签名密钥指纹<S>的密钥证书可在:
 http:// <主机名> / tor /键/ fp-sk / < F > - <年代>还是z
 (通常情况下，客户可以通过以下方式请求多个证书:
 http:// <主机名> / tor /键/ fp-sk / < F1 > - < S1 > + < F2 > - < S2 >。z)
 [在Tor 0.2.1.9-alpha之前不支持以上fp-sk格式]

   身份密钥为<F>指纹的服务器的最新描述符应该在以下位置可用:
 http:// <主机名> / tor /服务器/ fp / < F >还是z

   身份指纹<F1>，<F2>，<F3>的服务器的最新描述符应在以下网址提供:
 http:// <主机名> / tor /服务器/ fp / < F1 > + < F2 > + < F3 >还是z
 (注意:由于乌贼代理url的限制，最多96个指纹可以在一个请求中检索。

   实现不应该通过身份密钥指纹下载描述符。这允许损坏的服务器(与缓存相勾结)向客户端提供唯一的描述符，从而将该客户端与网络的其余部分分割开来。

   服务器描述符(描述符)摘要<D>(十六进制)应该在:
 http:// <主机名> / tor /服务器/ d / d < >还是z

   摘要<D1>，<D2>，<D3>的最新描述符可在以下网址获得:
 http:// <主机名> / tor /服务器/ d / < D1 > + < D2 > + < D3 >还是z

   此服务器的最新描述符应该在:
 http:// <主机名> / tor /服务器/ authority.z
 Tor协议中还没有使用这个资源，但是它对于调试很有用。另外，官方的Tor实现(从0.1.1.x开始)使用这个资源来测试服务器自身的DirPort是否可访问。

   所有已知服务器的最新描述符的连接集应该在以下位置可用:
 http:// <主机名> / tor /服务器/ all.z

   额外信息文档可以在url中找到
 http:// <主机名> / tor /额外的/ d /…http:// <主机名> / tor /额外的/ fp /…http:// <主机名> / tor /额外的所有[/。z] http:// <主机名> / (tor /额外的权力。z](对于/tor/server/ url:支持通过摘要、服务器指纹或一次全部提取额外信息文档。当通过指纹提供服务时，我们提供额外信息，该信息对应于我们将通过该指纹提供的描述符。只有版本的目录权限
         alpha或更高版本保证支持前三个url类。缓存可能支持它们，而且必须支持它们，如果它们宣传了“缓存-额外信息”。)

   为了进行调试，目录应该公开未压缩的对象
   像上面那样的url，但是没有最终的“。z”。如果客户端使用
   Accept-Encodings头，它应该覆盖存在或不存在的"。(见第6.1节)。

   当使用base16编码指纹时，客户端应该使用大写字母(A-F)。服务器必须接受请求中的大写和小写指纹。

将curve25519公钥转换为ed25519公钥

   给定一个X25519键，也就是
   蒙哥马利曲线定义为
 bv²= u(u²+ au +1)
 在哪里
 a = 486662 b = 1
 由压缩形式(即只由u坐标组成)，我们可以检索由所定义的曲线的爱德华兹曲线上的仿射点(x,y)的y坐标

         -x^2 + y^2 = 1 + d x^2 y^2
 在哪里
 d = - 121665/121666
 通过计算
 y = (u-1) / (u + 1)。
 然后利用常用的curve25519扭曲爱德华兹点解压缩算法，求出仿射扭曲爱德华兹点的x坐标，从而验证签名。ed25519的签名键是扭曲Edwards形式的压缩曲线点(即y坐标和x坐标符号)，X25519键是Montgomery形式的压缩曲线点(即u坐标)。

   但是，请注意，蒙哥马利形式的压缩点忽略了编码相应的扭曲爱德华兹x坐标的符号。因此，我们需要x坐标的符号来做这个操作;否则，我们将有两个可能对应ed25519公钥的x坐标。

   要获得符号，最简单的方法是获取对应的私钥，将其提供给ed25519公钥生成算法，然后查看符号是什么。
 [每次从私钥重新计算符号位听起来很奇怪，而且效率很低…-isis]

   或者，如果不能访问对应的ed25519私钥，则可以使用Montgomery u-coordinate来恢复
   蒙哥马利v坐标通过计算的右手边
   蒙哥马利曲线方程:
 bv²= u(u²+ au +1)
 在哪里
 a = 486662 b = 1

   然后，知道爱德华兹x坐标的预期符号，可以通过计算恢复所述x坐标:
 x = (u/v)√(a - 2)

D.推断缺失的原型线。

   目录权限以前不再允许Tor版本
   0.2.4.18-rc。但目前，在0.2.4.19之前的共识中还没有Tor的版本。因此，我们应该禁止小于0.2.4.19的Tor版本，这样我们就可以得到当前所有Tor版本的协议列表，包括:

     Cons=1-2 Desc=1-2 DirCache=1 HSDir=1 HSIntro=3 HSRend=1-2 Link=1-4
     LinkAuth = 1 Microdesc = 1 - 2继电器= 1 - 2

   对于Desc, Microdesc和Cons, 0.2.7之前的Tor版本。当只支持版本1时，应该使用stable。

限制ed diff格式

   我们支持以下协商一致差异格式。它是ed diff格式的一个子集，但是客户端不能接受其他ed命令。

   我们支持以下的ed命令，每一个单独在一行上:

    - "<n1>d"删除第n1行
    -“<n1>，<n2>d”删除从n1到n2的行
    - "<n1>，$d"删除第n1行，包括文件末尾。
    - "<n1>c"将第n1行替换为下面的代码块
    -“<n1>，<n2>c”将第n1行到第n2行，包括以下部分。
    - "<n1>a"将下面的代码块追加到第n1行之后。
    -“a”将下面的代码块追加到当前行之后。

   注意，行号总是在应用了之前的所有命令之后应用到文件。还要注意，行号的索引为1。

   命令必须从后到前应用于文件，这样行只能通过它们在原始文件中的位置来引用。

   如果原始文档上有任何目录签名，则第一个命令必须是一个“<n1>，$d”形式，以删除所有目录签名。使用这种格式可以确保客户端能够成功地应用差异，即使它们对签名有不同寻常的编码。

   “当前行”是文件的第一行,如果这是第一个命令,一个块的最后一行我们添加在一个添加或更改命令,或后立即行一组行我们只是删除(或文件的最后一行如果没有行之后)。

   replace和append命令使用块。这些块简单地附加到命令行后面的diff中。只有一个句点(“.”)的行结束代码块(并且不属于要添加的行)。请注意，不可能插入只有一个点的行。
