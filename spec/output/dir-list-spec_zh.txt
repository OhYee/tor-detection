

                        Tor目录列表格式
                         蒂姆Wilson-Brown (teor)

1. 范围和预赛

   这个文档描述了Tor目录列表的格式，这些目录列表被编译并硬编码到Tor二进制文件中。目前有一个列表:回退目录镜像。这个列表也可以由其他库解析，比如stem和metrches -lib。其他Tor实现可以使用这个列表从最新的公共Tor目录信息进行引导。

   FallbackDir特性是由提议210引入的，在Tor 0.2.4.7-alpha版本中首次由Tor支持。第一个硬编码的列表是在0.2.8.1-alpha中提供的。

   硬编码的回退目录列表位于tor源存储库:
 src / app / config / fallback_dirs.inc

   在Tor 0.3.4及之前版本中，列表位于:
 src /或/ fallback_dirs.inc

   这个文档描述了2.0.0版本和更高版本的目录列表格式。

   与此同时发布了回退列表的遗留半结构化版本
   Tor 0.2.8.1-alpha到Tor 0.3.1.9。我们称之为版本1。
   干和中继搜索有这个遗留格式的解析器。

1.1。格式概述

   目录列表是一个包含C字符串常量数组的C代码片段。每个双引号C字符串常量都是一个有效的torrc
   FallbackDir条目。每个条目包含各种数据字段。

   目录列表不包含C数组的声明，也不包含数组的终止NULL。目录列表中的项不包括
   FallbackDir torrc选项。这些是由包含的C代码处理的。

   目录列表还包括c风格的注释和空格。空格的存在可能很重要，但是空格的数量从来都不重要。空格的类型对
   C编译器或Tor C字符串解析器。然而，其他解析器可能依赖于新行和空格之间的区别。(列表中唯一的空白字符是换行符和空格。)

   为了可读性，目录条目C字符串常量被分割成多行。结构化的c风格注释用于提供额外的数据字段。此信息不被Tor使用，但其他库可能会对此感兴趣。

   目录项和数据字段的顺序不重要，除非下面注明。

1.2。确认

   最初的回退目录脚本和格式是由weasel创建的。当前脚本使用gsathya和karsten编写的代码。

   此规范是在以下方面反馈后修改的:

     达米恩约翰逊(“atagar”)
     Iain . Learmonth(“irl”)

1.3。格式版本

   目录列表格式使用语义版本控制:https://semver.org

   特别是:
     *主要版本用于不兼容的更改，如删除非可选字段
     *次要版本用于兼容的变化，如添加字段
     *补丁版本是针对bug修复的，比如修复格式不正确的摘要项

   1.0.0 -遗留回退目录列表格式

   2.0.0 -添加名称和extrainfo结构化注释，以及节分隔符注释，使列表更容易解析。还向标题添加源列表注释。

   3.0.0 -修改源列表注释的格式。

1.4。未来的计划

   Tor还有一个auth_dirs。inc文件，但它还不是这种格式。
   Tor对权限和回退目录镜像使用稍微不同的格式，因此我们需要对Tor做一些更改，以便它解析这种格式。(我们还需要向该格式添加特定于权限的信息。)详情请参阅#24818。

   我们希望添加一个torrc选项，这样操作人员就可以选择将其中继作为回退目录镜像。这给了我们一个签字的选择确认。(我们也可以继续接受白名单条目，并做其他检查。)
   我们需要写一个简短的提案，并对tor和回退更新脚本做一些修改。详情请参阅#24839。

2. 格式的细节

   目录列表包含以下部分:

     -列表标题(仅一次)
     -生成列表(仅一次，可能为空)
     -目录条目(零次或多次)

   每个部分(或条目)以分隔符结束。

2.1。非终结符

   以下非终端在Onionoo详细文档规范中定义:
 dir_address指纹昵称

   请参阅https://metrics.torproject.org/onionoo.html详细信息

   以下非终端是在dir-spec.txt中的“Tor directory protocol”规范中定义的:

     关键字
     ArgumentChar
     NL(换行符)
     SP(空格)bool(不能与Onionoo的JSON“布尔”相混淆)

   我们从Onionoo和dir-spec.txt推导出以下非终端:
 ipv4_or_port::=来自IPv4 or_address项的端口

       的ipv4_or_port是IPv4地址的端口部分
       Onionoo or_addresses列表。
 ipv6_or_address::=一个IPv6 or_address项

       ipv6_or_address是来自Onionoo or_address列表的IPv6地址和端口。地址可能在规范的RFC 5952中
       IPv6地址格式。

   一个键-值对:
 值::= 0或多个参数char，不包括以下字符串:
                 *双引号(DQUOTE)和
                 * C注释终止符("/*"和"*/")。

               注意，c++注释("//")和等号("=")没有被排除，因为它们是为将来在base64值中使用保留的。
 关键字"="值

   我们还定义了这些额外的非终端:
 number::=一个可选的负号("-")，后跟一个或多个数字字符([0-9])，以及一个可选的小数部分("."，后跟一个或多个数字字符)。
 separator::= "/*" SP+ "==== " SP+ "*/"

2.2。列表标题

   列表标头由嵌入的若干键值对组成
   c风格的评论。

2.2.1。列表标题的格式
 "/*" SP+ "type="关键字SP+ "*/" SP* NL
 (一开始，就一次。)

       列表中目录项的类型。如果不是列表的第一行，或者值不是“fallback”，解析器应该退出并显示错误。
 “/ *”SP +“version = " version_number SP + SP *问“* /”
 (在第二位置，只有一次。)

       该版本的目录列表格式。
 version_number是一个语义版本，详细信息请参见“格式版本”一节。

       版本1.0.0表示未归档的遗留回退列表格式。版本2.0.0及以后版本由该规范编制。
 "/*" SP+ "时间戳=" number SP+ "*/" SP* NL
 (一次。)

       一个正整数，指示生成此目录列表的时间。这个时间戳在每个版本2.0.0和更高版本的目录列表中都会增加。

       当前的时间戳格式是YYYYMMDDHHMMSS，作为一个整数。
 “/ *”SP +“源= "关键字(”、“关键字)* SP + SP *问“* /”
 (零次或一次。)

       列表中目录条目的源列表。

       在3.0.0版本中，可能的来源是:
         * "offer-list" -回退脚本存储库中的fallback_offer_list文件。
         *“描述符”——一个或多个带符号的描述符，每个描述符包含一个“offer- back-dir”行。这个特性将在票据#24839中实现。
         *“fallback”-一个fallback_dirs。从一个tor存储库inc文件。
                          在check_existing模式中使用。

       在实现#24839之前，默认是“offer-list”。在向签约报价过渡期间，它将是“描述符，报价列表”。
       然后，它将是“描述符”。

       在版本2.0.0中，在“source=”之后只允许使用一个源名称，并且使用了不赞成使用的“白名单”源名称，而不是“报价列表”。

       这一行是在该规范的2.0.0版本中添加的。这一行的格式在本规范的3.0.0版本中进行了修改。
 "/*" SP+ key_value SP+ "*/" SP* NL
 (零次或多次。)

       未来的版本可能会包含额外的头字段。解析器不能依赖于这些附加字段的顺序。附加的头字段将伴有少量版本增量。
 分离器SP *问

       列表标题以节分隔符结束。

2.3。生成列表

   列表生成信息由描述该目录列表的内容和起源的人类可读的文字组成。它包含在零个或多个C风格的注释中，并且可能包含多行注释和未注释的C代码。

   特别地，这个部分可能包含包含equals("=")字符的c风格注释。它也可能是完全空的。

   以后的版本可能会任意地改变这个部分的内容。
   当格式改变时，解析器不能依赖版本增量。

2.3.1。列表生成格式

   一般来说，解析器不能依赖于此部分的格式。

   解析器可能依赖于以下细节:

   列表生成部分不能是有效的目录项。

   列表生成摘要必须以节分隔符结束:
 分离器SP *问

   除了终止节分隔符，列表生成节中不能有任何节分隔符。

2.4。目录条目

   一个目录条目由一个C字符串常量和一个或多个组成
   c风格的评论。参数的有效参数是C字符串常量
   DirAuthority或FallbackDir torrc选项。该部分还包含c样式注释中的其他键-值字段。

   回退项列表不包括目录权限:它们在一个单独的列表中。(Tor实现在解析这些列表后结合它们，并将DirAuthorityFallbackRate应用到它们的权重。)

2.4.1。目录条目的格式

     如果目录条目不符合这种格式，解析器应该忽略该条目。

     DQUOTE dir_address SP+ "orport=" ipv4_or_port SP+ "id=" fingerprint DQUOTE SP* NL
 [在开始时，只有一次，在单行上。]

       这一行由以下字段组成:
 dir_address

         定义此目录的IPv4地址和DirPort
         Onionoo。在这个格式版本中，所有IPv4地址和指向端口都保证是非零的。(对于IPv4地址，这意味着它们不等于“0.0.0.0”。)
 ipv4_or_port

         此目录的IPv4 ORPort，派生自Onionoo。在这个格式版本中，所有IPv4端口都保证是非零的。
 指纹

         此目录的中继指纹，由Onionoo定义。
         所有中继指纹都保证有一个或多个非零位。

     注意:

       出现在第一行之后的每个双引号C字符串行都以引号内的空格开始。这是一个要求
       Tor的实现。

     "ipv6=" ipv6_or_address
 (零次或一次。)

       此目录的IPv6地址和ORPort，定义为
       Onionoo。如果存在，IPv6地址和端口保证是非零的。(对于IPv6地址，这意味着它们不等于“[::]”。)

     DQUOTE SP+ "weight=" number DQUOTE SP* NL
 (零次或一次。)

       此目录的非负的、实号权重。
       默认的回退权重是1.0，默认值是
       在旧的Tor版本中，DirAuthorityFallbackRate为1.0，在最近的Tor版本中为0.1。
 版本2.0.0中去掉了这个权重，但是有文档记录，因为它可能会对实现Tor的fallaback行为的库感兴趣。

     DQUOTE SP+ key_value
 (零次或多次。)

       未来的版本可能会在双引号中包含更多的数据字段
       C字符串常量。解析器不能依赖于这些附加字段的顺序。附加的数据字段将伴随着一个较小的版本增量。
 "/*" SP+ "昵称="昵称* SP+ "*/" SP* NL
 (一次。)

       这个目录的昵称，由Onionoo定义。空昵称表示该昵称是未知的。

       采用2.0.0格式的第一个回退列表有昵称行，但它们都是空的。
 "/*" SP+ "extrainfo=" bool SP+ "*/" SP* NL
 (一次。)

       一个整数标志，指示此目录是否缓存extra-info文档。如果目录声明在创建列表时在描述符中缓存了extra-info文档，则设置为1。表示不存在，或其描述符不可用。

       第一个回退列表在2.0.0格式中有extrainfo行，但是它们都是零。
 "/*" SP+ key_value SP+ "*/" SP* NL
 (零次或多次。)

       未来的版本可能会在c风格的注释中包含更多的数据字段。解析器不能依赖于这些附加字段的顺序。附加的数据字段将伴随着一个较小的版本增量。
 分离器SP *问
 (一次。)

       每个目录条目以节分隔符结束。
 ”、“SP *问
 (一次。)

       逗号结束C字符串常量。(由空格或注释分隔的多个C字符串常量由C编译器合并。)

3.使用注意事项

   本节包含推荐的库行为。它不会影响目录列表的格式。

3.1。缓存

   回退列表通常每6-12个月更改一次。列表中的数据表示创建列表时回退目录条目的状态。随着时间的推移，备用方案可以也确实会改变它们的细节。

   库应该在构建或发布过程中解析和缓存这些列表的最新版本。默认情况下，库在每次部署或执行列表时都不能检索列表。

   最新的回退列表可以从:
 https://gitweb.torproject.org/tor.git/plain/src/or/fallback_dirs.inc

   库不能依赖承载这些列表的服务器的可用性。

   该列表也可以使用:
 git克隆https://git.torproject.org/tor.git

   如果您只想要最新的列表，您可能希望执行一个浅克隆。

3.2。检索目录信息

   一些库直接从Tor检索目录文档
   目录当局。目录权威被设计来支持
   Tor中继和客户端引导，并可以选择速率限制库访问。如果库不打算支持匿名操作，则可以在其请求中提供一个用户代理。(用户代理是指纹载体。)

   图书馆应该考虑当局的潜在负担，以及其他资源是否能满足他们的需求。

   需要Tor目录信息的高运行时间可用性的库应该研究以下选项:

     * OnionOO: https://metrics.torproject.org/onionoo.html
       *第三方OnionOO镜像也可用
     *收集器:https://collector.torproject.org/
     回退目录镜像

   Onionoo和CollecTor通常每小时定期更新一次。回退程序随机更新自己的目录信息，详细信息请参阅dir-spec。

3.3。回退的可靠性

   回退列表通常在回退失败率超过25%时重新生成。库不应该依赖于可用的任何特定回退，或一定比例的回退。

   使用回退的库可能希望在几个回退查询失败后查询某个权限。例如，Tor客户端在尝试权限之前会尝试3-4次回退。

. 1。样本数据

   示例版本2.0.0回退列表在这里:
 https://trac.torproject.org/projects/tor/raw-attachment/ticket/22759/fallback_dirs_new_format_version.4.inc

   一个示例过渡版本2.0.0回退列表可在这里获得:
 https://raw.githubusercontent.com/teor2345/tor/fallback-format-2-v4/src/or/fallback_dirs.inc

A.1.1。示例回退列表标题
 / * type =后备* / / * = 2.0.0版本  */ /* ===== */

A.1.2。示例回退列表生成
 /* 1513名候选人中的1326名被白名单和黑名单排除。*/ /*检查的IPv4 DirPorts在15.0s内一致。* / / *
最终计数:151(合格187，目标392(1963 * 0.20)，最多200)
不包括:36(相同操作27，失败/跳过下载9，超过0)
带宽范围:1.3 - 40.0 MByte/s
* / / *
Onionoo资料来源:详细日期:2017-05-16 07:00:00版本:4.0
URL: https: onionoo.torproject.orgdetails ?字段=指纹% 2 cnickname % 2 ccontact % 2 clast_changed_address_or_port % 2 cconsensus_weight % 2 cadvertised_bandwidth % 2 cor_addresses % 2 cdir_address % 2 crecommended_version % 2 cflags % 2 ceffective_family % 2 cplatform&flag = V2Dir&type = relay&last_seen_days = 0 &first_seen_days = 30 -
* / / *
Onionoo来源:正常运行时间日期:2017-05-16 07:00:00版本:4.0
URL: https: onionoo.torproject.orguptime ? first_seen_days = 30 -&flag = V2Dir&type = relay&last_seen_days = 0
*/ /* === */

A.1.3。样品回退的条目
 “176.10.104.240:80 orport = 443 id = 0111 ba9b604669e636ffd5b503f382a4b7ad6e80“/ *昵称= foo * / / * extrainfo = 1  */ /* ===== */ , " 5.9.110.236:9030 orport = 9001 id = 0756 b7cd4dfc8182be23143fac0642f515182ceb”“ipv6 = [2 a01:4f8:162:51e2:: 2]: 9001 " / *昵称= * / / * extrainfo = 0  */ /* ===== */ ,
