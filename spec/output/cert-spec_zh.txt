

                    Ed25519证书在Tor

1. 范围和预赛

   本文档描述了Tor用于其Ed25519内部证书的证书格式。它不是Tor使用的唯一证书格式。有关权威机构用于其签名密钥的证书，请参阅dir-spec.txt。
   此外，Tor使用TLS，它依赖于X.509证书;详情请参阅tor-spec.txt。

   此文档中的证书最初是在提案220中引入的，最初是由Tor版本中的Tor支持的
   0.2.7.2-alpha。

1.1。签署

   这里的所有签名，除非另有规定，都是使用Ed25519密钥计算的。

   为了对格式进行将来验证，在对任何内容进行签名之前，已签名文档的前缀是一个个性化字符串，这在每种情况下都是不同的。

1.2。整数编码

   网络字节顺序(big-endian)用于对Ed25519证书中的所有整数值进行编码，除非另有明确指定。

2. 文档格式

2.1。Ed25519证书

   在生成签名密钥时，我们还为它生成证书。
   与授权机构的签名密钥的证书不同，这些证书需要频繁地发送，而且需要大量发送。所以我们要选择一个紧凑的表示。

         版本          [ 1字节)
         CERT_TYPE(1个字节)
         EXPIRATION_DATE(4个字节)
         CERT_KEY_TYPE(1个字节)
         CERTIFIED_KEY(32个字节)
         N_EXTENSIONS(1个字节)
         扩展(N_EXTENSIONS倍)
         签名(64字节)

   “VERSION”字段包含值[01]。“CERT_TYPE”字段包含一个取决于证书类型的值。(见附件
   . 1)。如果，则CERTIFIED_KEY字段是Ed25519公钥
   CERT_KEY_TYPE是[01]，或者是其他键类型的摘要，具体取决于CERT_KEY_TYPE的值。(请参阅附录各。)
   EXPIRATION_DATE是一个日期(以小时为单位)，超过这个日期，此证书就失效。(4字节的字段在这里可以工作到公元10136年)

   扩展字段包含零个或多个扩展名，每个扩展名的格式如下:

         ExtLength(2字节)
         ExtType(1个字节)
         ExtFlags(1个字节)
         ExtData (ExtLength字节)

   扩展中ExtData字段的含义是依赖于类型的。

   ExtFlags字段包含标志;此标志目前定义为:

      1——AFFECTS_VALIDATION。如果存在此标志，则扩展将影响证书是否有效;客户不能接受有效的证书，除非他们理解扩展。

   它是一个扩展被截断的错误;这样的证书无效。

   在处理任何证书之前，各方应该知道它应该由哪个身份密钥签名，然后检查签名。签名是通过对证书的前N-64字节进行签名形成的。

2.2。基本扩展

2.2.1。ed25519-key扩展名[类型04]

   在一些地方，需要将密钥签名证书与证书捆绑在一起。我们就是这样做的。

        ExtLength = 32
        ExtData =
           ed25519密钥[32字节]

   当存在此扩展时，它必须匹配用于签署证书的密钥。

2.3。RSA - > Ed25519 cross-certificate

   证书类型[07](Ed25519身份RSA密钥交叉认证)包含以下数据:

       ED25519_KEY                        [ 32个字节)
       EXPIRATION_DATE                    [ 4个字节)
       SIGLEN                             [ 1字节)
       签名                          [ SIGLEN字节)

   在这里，Ed25519身份密钥是用路由器的RSA身份密钥签名的，以表明使用由Ed25519密钥认证的密钥进行身份验证等同于使用RSA身份密钥认证。(签名是根据证书的非签名部分的SHA256哈希计算的，前缀是字符串“Tor TLS RSA/Ed25519交叉证书”。)

   此证书类型用于表示，“此Ed25519身份密钥与签署此证书的RSA密钥的权限一起工作。”

. 1。证书类型列表(CERT_TYPE字段)

   用星号标记的值不是与2.1节中的证书格式对应的类型。相反，它们是为rsa签名的证书保留的，以避免CERTS单元的证书类型枚举与Ed25519证书中的证书类型枚举之间的冲突。


   **[00]，[01]，[02]，[03] -保留以避免与CERTS单元格中使用的类型冲突。
 [04] - Ed25519带身份密钥的签名密钥(参见prop220节4.2)
 [05] -使用ed25519签名密钥签署的TLS链路证书(参见prop220节4.2)
 [06] - Ed25519认证密钥使用Ed25519签名密钥签名(参见prop220节4.2)

   **[07] -预留用于RSA身份交叉认证;(见上文2.3节和tor-spec.txt 4.2节)
 洋葱服务:短期描述符签名密钥，用盲公钥签名。(见rend-spec-v3。三,部分[DESC_OUTER])
 洋葱服务:介绍点身份验证密钥，对描述符签名密钥进行交叉验证。(见rend-spec-v3。txt，描述“auth-key”)
 ntor洋葱密钥交叉认证ed25519身份密钥(参见dir-spec)。txt，描述“ntor-onion-key-crosscert”)
 洋葱服务:ntor-extra加密密钥，交叉认证描述符签名密钥。(见rend-spec-v3。txt，描述“enco -key-cert”)

由信用证。扩展类型列表
 [04] - signed-with-ed25519-key(第2.2.1节)

出具。签名前缀列表

   我们将各种文件描述为带有前缀的签名。下面就是这些前缀:
 “Tor路由器描述符签名v1”(参见dir-spec.txt)

各。认证密钥类型列表(CERT_KEY_TYPE字段)
 一个RSA密钥的[02]SHA256散列。(目前未使用)X.509证书的[03]SHA256散列。(与5类证书一起使用)
 (注意:在0.4.5.1-alpha之前，所有版本的Tor都错误地将“01”用于所有类型的认证密钥。实现应该允许在这个位置使用“01”，并从CERT_TYPE字段中推断实际的键类型。)
